'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet1
    Inherits Global.System.Data.DataSet
    
    Private tableBEDS As BEDSDataTable
    
    Private tableIN_PATIENTS As IN_PATIENTSDataTable
    
    Private tableLOCALDOCTORS As LOCALDOCTORSDataTable
    
    Private tableLOGIN_LOGS As LOGIN_LOGSDataTable
    
    Private tableMED_EQUIPMENTS As MED_EQUIPMENTSDataTable
    
    Private tableMED_MEDICINES As MED_MEDICINESDataTable
    
    Private tablePATIENT_KINS As PATIENT_KINSDataTable
    
    Private tablePATIENT_VISITS As PATIENT_VISITSDataTable
    
    Private tablePATIENT_WARDS As PATIENT_WARDSDataTable
    
    Private tablePATIENTS As PATIENTSDataTable
    
    Private tablePW_PRESCRIPTS As PW_PRESCRIPTSDataTable
    
    Private tableSHIFTS As SHIFTSDataTable
    
    Private tableSTAFF_EXPERIENCES As STAFF_EXPERIENCESDataTable
    
    Private tableSTAFF_QUALIFICATES As STAFF_QUALIFICATESDataTable
    
    Private tableSTAFFS As STAFFSDataTable
    
    Private tableSUPPILERS As SUPPILERSDataTable
    
    Private tableWARD_STAFFS As WARD_STAFFSDataTable
    
    Private tableWARDS As WARDSDataTable
    
    Private tableWARD_REQUESTS As WARD_REQUESTSDataTable
    
    Private relationSYS_C0013318 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013331 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013332 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013333 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013346 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013335 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013336 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013322 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013323 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013324 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013325 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013326 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013327 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013328 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013329 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013330 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013316 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013317 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013337 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013338 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013339 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013340 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013314 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013315 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013334 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013319 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013320 As Global.System.Data.DataRelation
    
    Private relationSYS_C0013321 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BEDS")) Is Nothing) Then
                MyBase.Tables.Add(New BEDSDataTable(ds.Tables("BEDS")))
            End If
            If (Not (ds.Tables("IN_PATIENTS")) Is Nothing) Then
                MyBase.Tables.Add(New IN_PATIENTSDataTable(ds.Tables("IN_PATIENTS")))
            End If
            If (Not (ds.Tables("LOCALDOCTORS")) Is Nothing) Then
                MyBase.Tables.Add(New LOCALDOCTORSDataTable(ds.Tables("LOCALDOCTORS")))
            End If
            If (Not (ds.Tables("LOGIN_LOGS")) Is Nothing) Then
                MyBase.Tables.Add(New LOGIN_LOGSDataTable(ds.Tables("LOGIN_LOGS")))
            End If
            If (Not (ds.Tables("MED_EQUIPMENTS")) Is Nothing) Then
                MyBase.Tables.Add(New MED_EQUIPMENTSDataTable(ds.Tables("MED_EQUIPMENTS")))
            End If
            If (Not (ds.Tables("MED_MEDICINES")) Is Nothing) Then
                MyBase.Tables.Add(New MED_MEDICINESDataTable(ds.Tables("MED_MEDICINES")))
            End If
            If (Not (ds.Tables("PATIENT_KINS")) Is Nothing) Then
                MyBase.Tables.Add(New PATIENT_KINSDataTable(ds.Tables("PATIENT_KINS")))
            End If
            If (Not (ds.Tables("PATIENT_VISITS")) Is Nothing) Then
                MyBase.Tables.Add(New PATIENT_VISITSDataTable(ds.Tables("PATIENT_VISITS")))
            End If
            If (Not (ds.Tables("PATIENT_WARDS")) Is Nothing) Then
                MyBase.Tables.Add(New PATIENT_WARDSDataTable(ds.Tables("PATIENT_WARDS")))
            End If
            If (Not (ds.Tables("PATIENTS")) Is Nothing) Then
                MyBase.Tables.Add(New PATIENTSDataTable(ds.Tables("PATIENTS")))
            End If
            If (Not (ds.Tables("PW_PRESCRIPTS")) Is Nothing) Then
                MyBase.Tables.Add(New PW_PRESCRIPTSDataTable(ds.Tables("PW_PRESCRIPTS")))
            End If
            If (Not (ds.Tables("SHIFTS")) Is Nothing) Then
                MyBase.Tables.Add(New SHIFTSDataTable(ds.Tables("SHIFTS")))
            End If
            If (Not (ds.Tables("STAFF_EXPERIENCES")) Is Nothing) Then
                MyBase.Tables.Add(New STAFF_EXPERIENCESDataTable(ds.Tables("STAFF_EXPERIENCES")))
            End If
            If (Not (ds.Tables("STAFF_QUALIFICATES")) Is Nothing) Then
                MyBase.Tables.Add(New STAFF_QUALIFICATESDataTable(ds.Tables("STAFF_QUALIFICATES")))
            End If
            If (Not (ds.Tables("STAFFS")) Is Nothing) Then
                MyBase.Tables.Add(New STAFFSDataTable(ds.Tables("STAFFS")))
            End If
            If (Not (ds.Tables("SUPPILERS")) Is Nothing) Then
                MyBase.Tables.Add(New SUPPILERSDataTable(ds.Tables("SUPPILERS")))
            End If
            If (Not (ds.Tables("WARD_STAFFS")) Is Nothing) Then
                MyBase.Tables.Add(New WARD_STAFFSDataTable(ds.Tables("WARD_STAFFS")))
            End If
            If (Not (ds.Tables("WARDS")) Is Nothing) Then
                MyBase.Tables.Add(New WARDSDataTable(ds.Tables("WARDS")))
            End If
            If (Not (ds.Tables("WARD_REQUESTS")) Is Nothing) Then
                MyBase.Tables.Add(New WARD_REQUESTSDataTable(ds.Tables("WARD_REQUESTS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BEDS() As BEDSDataTable
        Get
            Return Me.tableBEDS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IN_PATIENTS() As IN_PATIENTSDataTable
        Get
            Return Me.tableIN_PATIENTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOCALDOCTORS() As LOCALDOCTORSDataTable
        Get
            Return Me.tableLOCALDOCTORS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOGIN_LOGS() As LOGIN_LOGSDataTable
        Get
            Return Me.tableLOGIN_LOGS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MED_EQUIPMENTS() As MED_EQUIPMENTSDataTable
        Get
            Return Me.tableMED_EQUIPMENTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MED_MEDICINES() As MED_MEDICINESDataTable
        Get
            Return Me.tableMED_MEDICINES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PATIENT_KINS() As PATIENT_KINSDataTable
        Get
            Return Me.tablePATIENT_KINS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PATIENT_VISITS() As PATIENT_VISITSDataTable
        Get
            Return Me.tablePATIENT_VISITS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PATIENT_WARDS() As PATIENT_WARDSDataTable
        Get
            Return Me.tablePATIENT_WARDS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PATIENTS() As PATIENTSDataTable
        Get
            Return Me.tablePATIENTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PW_PRESCRIPTS() As PW_PRESCRIPTSDataTable
        Get
            Return Me.tablePW_PRESCRIPTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SHIFTS() As SHIFTSDataTable
        Get
            Return Me.tableSHIFTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STAFF_EXPERIENCES() As STAFF_EXPERIENCESDataTable
        Get
            Return Me.tableSTAFF_EXPERIENCES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STAFF_QUALIFICATES() As STAFF_QUALIFICATESDataTable
        Get
            Return Me.tableSTAFF_QUALIFICATES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STAFFS() As STAFFSDataTable
        Get
            Return Me.tableSTAFFS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SUPPILERS() As SUPPILERSDataTable
        Get
            Return Me.tableSUPPILERS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WARD_STAFFS() As WARD_STAFFSDataTable
        Get
            Return Me.tableWARD_STAFFS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WARDS() As WARDSDataTable
        Get
            Return Me.tableWARDS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WARD_REQUESTS() As WARD_REQUESTSDataTable
        Get
            Return Me.tableWARD_REQUESTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("BEDS")) Is Nothing) Then
                MyBase.Tables.Add(New BEDSDataTable(ds.Tables("BEDS")))
            End If
            If (Not (ds.Tables("IN_PATIENTS")) Is Nothing) Then
                MyBase.Tables.Add(New IN_PATIENTSDataTable(ds.Tables("IN_PATIENTS")))
            End If
            If (Not (ds.Tables("LOCALDOCTORS")) Is Nothing) Then
                MyBase.Tables.Add(New LOCALDOCTORSDataTable(ds.Tables("LOCALDOCTORS")))
            End If
            If (Not (ds.Tables("LOGIN_LOGS")) Is Nothing) Then
                MyBase.Tables.Add(New LOGIN_LOGSDataTable(ds.Tables("LOGIN_LOGS")))
            End If
            If (Not (ds.Tables("MED_EQUIPMENTS")) Is Nothing) Then
                MyBase.Tables.Add(New MED_EQUIPMENTSDataTable(ds.Tables("MED_EQUIPMENTS")))
            End If
            If (Not (ds.Tables("MED_MEDICINES")) Is Nothing) Then
                MyBase.Tables.Add(New MED_MEDICINESDataTable(ds.Tables("MED_MEDICINES")))
            End If
            If (Not (ds.Tables("PATIENT_KINS")) Is Nothing) Then
                MyBase.Tables.Add(New PATIENT_KINSDataTable(ds.Tables("PATIENT_KINS")))
            End If
            If (Not (ds.Tables("PATIENT_VISITS")) Is Nothing) Then
                MyBase.Tables.Add(New PATIENT_VISITSDataTable(ds.Tables("PATIENT_VISITS")))
            End If
            If (Not (ds.Tables("PATIENT_WARDS")) Is Nothing) Then
                MyBase.Tables.Add(New PATIENT_WARDSDataTable(ds.Tables("PATIENT_WARDS")))
            End If
            If (Not (ds.Tables("PATIENTS")) Is Nothing) Then
                MyBase.Tables.Add(New PATIENTSDataTable(ds.Tables("PATIENTS")))
            End If
            If (Not (ds.Tables("PW_PRESCRIPTS")) Is Nothing) Then
                MyBase.Tables.Add(New PW_PRESCRIPTSDataTable(ds.Tables("PW_PRESCRIPTS")))
            End If
            If (Not (ds.Tables("SHIFTS")) Is Nothing) Then
                MyBase.Tables.Add(New SHIFTSDataTable(ds.Tables("SHIFTS")))
            End If
            If (Not (ds.Tables("STAFF_EXPERIENCES")) Is Nothing) Then
                MyBase.Tables.Add(New STAFF_EXPERIENCESDataTable(ds.Tables("STAFF_EXPERIENCES")))
            End If
            If (Not (ds.Tables("STAFF_QUALIFICATES")) Is Nothing) Then
                MyBase.Tables.Add(New STAFF_QUALIFICATESDataTable(ds.Tables("STAFF_QUALIFICATES")))
            End If
            If (Not (ds.Tables("STAFFS")) Is Nothing) Then
                MyBase.Tables.Add(New STAFFSDataTable(ds.Tables("STAFFS")))
            End If
            If (Not (ds.Tables("SUPPILERS")) Is Nothing) Then
                MyBase.Tables.Add(New SUPPILERSDataTable(ds.Tables("SUPPILERS")))
            End If
            If (Not (ds.Tables("WARD_STAFFS")) Is Nothing) Then
                MyBase.Tables.Add(New WARD_STAFFSDataTable(ds.Tables("WARD_STAFFS")))
            End If
            If (Not (ds.Tables("WARDS")) Is Nothing) Then
                MyBase.Tables.Add(New WARDSDataTable(ds.Tables("WARDS")))
            End If
            If (Not (ds.Tables("WARD_REQUESTS")) Is Nothing) Then
                MyBase.Tables.Add(New WARD_REQUESTSDataTable(ds.Tables("WARD_REQUESTS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableBEDS = CType(MyBase.Tables("BEDS"),BEDSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBEDS) Is Nothing) Then
                Me.tableBEDS.InitVars
            End If
        End If
        Me.tableIN_PATIENTS = CType(MyBase.Tables("IN_PATIENTS"),IN_PATIENTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIN_PATIENTS) Is Nothing) Then
                Me.tableIN_PATIENTS.InitVars
            End If
        End If
        Me.tableLOCALDOCTORS = CType(MyBase.Tables("LOCALDOCTORS"),LOCALDOCTORSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLOCALDOCTORS) Is Nothing) Then
                Me.tableLOCALDOCTORS.InitVars
            End If
        End If
        Me.tableLOGIN_LOGS = CType(MyBase.Tables("LOGIN_LOGS"),LOGIN_LOGSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLOGIN_LOGS) Is Nothing) Then
                Me.tableLOGIN_LOGS.InitVars
            End If
        End If
        Me.tableMED_EQUIPMENTS = CType(MyBase.Tables("MED_EQUIPMENTS"),MED_EQUIPMENTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMED_EQUIPMENTS) Is Nothing) Then
                Me.tableMED_EQUIPMENTS.InitVars
            End If
        End If
        Me.tableMED_MEDICINES = CType(MyBase.Tables("MED_MEDICINES"),MED_MEDICINESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMED_MEDICINES) Is Nothing) Then
                Me.tableMED_MEDICINES.InitVars
            End If
        End If
        Me.tablePATIENT_KINS = CType(MyBase.Tables("PATIENT_KINS"),PATIENT_KINSDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePATIENT_KINS) Is Nothing) Then
                Me.tablePATIENT_KINS.InitVars
            End If
        End If
        Me.tablePATIENT_VISITS = CType(MyBase.Tables("PATIENT_VISITS"),PATIENT_VISITSDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePATIENT_VISITS) Is Nothing) Then
                Me.tablePATIENT_VISITS.InitVars
            End If
        End If
        Me.tablePATIENT_WARDS = CType(MyBase.Tables("PATIENT_WARDS"),PATIENT_WARDSDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePATIENT_WARDS) Is Nothing) Then
                Me.tablePATIENT_WARDS.InitVars
            End If
        End If
        Me.tablePATIENTS = CType(MyBase.Tables("PATIENTS"),PATIENTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePATIENTS) Is Nothing) Then
                Me.tablePATIENTS.InitVars
            End If
        End If
        Me.tablePW_PRESCRIPTS = CType(MyBase.Tables("PW_PRESCRIPTS"),PW_PRESCRIPTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePW_PRESCRIPTS) Is Nothing) Then
                Me.tablePW_PRESCRIPTS.InitVars
            End If
        End If
        Me.tableSHIFTS = CType(MyBase.Tables("SHIFTS"),SHIFTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSHIFTS) Is Nothing) Then
                Me.tableSHIFTS.InitVars
            End If
        End If
        Me.tableSTAFF_EXPERIENCES = CType(MyBase.Tables("STAFF_EXPERIENCES"),STAFF_EXPERIENCESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSTAFF_EXPERIENCES) Is Nothing) Then
                Me.tableSTAFF_EXPERIENCES.InitVars
            End If
        End If
        Me.tableSTAFF_QUALIFICATES = CType(MyBase.Tables("STAFF_QUALIFICATES"),STAFF_QUALIFICATESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSTAFF_QUALIFICATES) Is Nothing) Then
                Me.tableSTAFF_QUALIFICATES.InitVars
            End If
        End If
        Me.tableSTAFFS = CType(MyBase.Tables("STAFFS"),STAFFSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSTAFFS) Is Nothing) Then
                Me.tableSTAFFS.InitVars
            End If
        End If
        Me.tableSUPPILERS = CType(MyBase.Tables("SUPPILERS"),SUPPILERSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSUPPILERS) Is Nothing) Then
                Me.tableSUPPILERS.InitVars
            End If
        End If
        Me.tableWARD_STAFFS = CType(MyBase.Tables("WARD_STAFFS"),WARD_STAFFSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWARD_STAFFS) Is Nothing) Then
                Me.tableWARD_STAFFS.InitVars
            End If
        End If
        Me.tableWARDS = CType(MyBase.Tables("WARDS"),WARDSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWARDS) Is Nothing) Then
                Me.tableWARDS.InitVars
            End If
        End If
        Me.tableWARD_REQUESTS = CType(MyBase.Tables("WARD_REQUESTS"),WARD_REQUESTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWARD_REQUESTS) Is Nothing) Then
                Me.tableWARD_REQUESTS.InitVars
            End If
        End If
        Me.relationSYS_C0013318 = Me.Relations("SYS_C0013318")
        Me.relationSYS_C0013331 = Me.Relations("SYS_C0013331")
        Me.relationSYS_C0013332 = Me.Relations("SYS_C0013332")
        Me.relationSYS_C0013333 = Me.Relations("SYS_C0013333")
        Me.relationSYS_C0013346 = Me.Relations("SYS_C0013346")
        Me.relationSYS_C0013335 = Me.Relations("SYS_C0013335")
        Me.relationSYS_C0013336 = Me.Relations("SYS_C0013336")
        Me.relationSYS_C0013322 = Me.Relations("SYS_C0013322")
        Me.relationSYS_C0013323 = Me.Relations("SYS_C0013323")
        Me.relationSYS_C0013324 = Me.Relations("SYS_C0013324")
        Me.relationSYS_C0013325 = Me.Relations("SYS_C0013325")
        Me.relationSYS_C0013326 = Me.Relations("SYS_C0013326")
        Me.relationSYS_C0013327 = Me.Relations("SYS_C0013327")
        Me.relationSYS_C0013328 = Me.Relations("SYS_C0013328")
        Me.relationSYS_C0013329 = Me.Relations("SYS_C0013329")
        Me.relationSYS_C0013330 = Me.Relations("SYS_C0013330")
        Me.relationSYS_C0013316 = Me.Relations("SYS_C0013316")
        Me.relationSYS_C0013317 = Me.Relations("SYS_C0013317")
        Me.relationSYS_C0013337 = Me.Relations("SYS_C0013337")
        Me.relationSYS_C0013338 = Me.Relations("SYS_C0013338")
        Me.relationSYS_C0013339 = Me.Relations("SYS_C0013339")
        Me.relationSYS_C0013340 = Me.Relations("SYS_C0013340")
        Me.relationSYS_C0013314 = Me.Relations("SYS_C0013314")
        Me.relationSYS_C0013315 = Me.Relations("SYS_C0013315")
        Me.relationSYS_C0013334 = Me.Relations("SYS_C0013334")
        Me.relationSYS_C0013319 = Me.Relations("SYS_C0013319")
        Me.relationSYS_C0013320 = Me.Relations("SYS_C0013320")
        Me.relationSYS_C0013321 = Me.Relations("SYS_C0013321")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableBEDS = New BEDSDataTable()
        MyBase.Tables.Add(Me.tableBEDS)
        Me.tableIN_PATIENTS = New IN_PATIENTSDataTable()
        MyBase.Tables.Add(Me.tableIN_PATIENTS)
        Me.tableLOCALDOCTORS = New LOCALDOCTORSDataTable()
        MyBase.Tables.Add(Me.tableLOCALDOCTORS)
        Me.tableLOGIN_LOGS = New LOGIN_LOGSDataTable()
        MyBase.Tables.Add(Me.tableLOGIN_LOGS)
        Me.tableMED_EQUIPMENTS = New MED_EQUIPMENTSDataTable()
        MyBase.Tables.Add(Me.tableMED_EQUIPMENTS)
        Me.tableMED_MEDICINES = New MED_MEDICINESDataTable()
        MyBase.Tables.Add(Me.tableMED_MEDICINES)
        Me.tablePATIENT_KINS = New PATIENT_KINSDataTable()
        MyBase.Tables.Add(Me.tablePATIENT_KINS)
        Me.tablePATIENT_VISITS = New PATIENT_VISITSDataTable()
        MyBase.Tables.Add(Me.tablePATIENT_VISITS)
        Me.tablePATIENT_WARDS = New PATIENT_WARDSDataTable()
        MyBase.Tables.Add(Me.tablePATIENT_WARDS)
        Me.tablePATIENTS = New PATIENTSDataTable()
        MyBase.Tables.Add(Me.tablePATIENTS)
        Me.tablePW_PRESCRIPTS = New PW_PRESCRIPTSDataTable()
        MyBase.Tables.Add(Me.tablePW_PRESCRIPTS)
        Me.tableSHIFTS = New SHIFTSDataTable()
        MyBase.Tables.Add(Me.tableSHIFTS)
        Me.tableSTAFF_EXPERIENCES = New STAFF_EXPERIENCESDataTable()
        MyBase.Tables.Add(Me.tableSTAFF_EXPERIENCES)
        Me.tableSTAFF_QUALIFICATES = New STAFF_QUALIFICATESDataTable()
        MyBase.Tables.Add(Me.tableSTAFF_QUALIFICATES)
        Me.tableSTAFFS = New STAFFSDataTable()
        MyBase.Tables.Add(Me.tableSTAFFS)
        Me.tableSUPPILERS = New SUPPILERSDataTable()
        MyBase.Tables.Add(Me.tableSUPPILERS)
        Me.tableWARD_STAFFS = New WARD_STAFFSDataTable()
        MyBase.Tables.Add(Me.tableWARD_STAFFS)
        Me.tableWARDS = New WARDSDataTable()
        MyBase.Tables.Add(Me.tableWARDS)
        Me.tableWARD_REQUESTS = New WARD_REQUESTSDataTable()
        MyBase.Tables.Add(Me.tableWARD_REQUESTS)
        Me.relationSYS_C0013318 = New Global.System.Data.DataRelation("SYS_C0013318", New Global.System.Data.DataColumn() {Me.tableWARDS.WARDIDColumn}, New Global.System.Data.DataColumn() {Me.tableBEDS.WARDIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013318)
        Me.relationSYS_C0013331 = New Global.System.Data.DataRelation("SYS_C0013331", New Global.System.Data.DataColumn() {Me.tablePATIENT_WARDS.PWIDColumn}, New Global.System.Data.DataColumn() {Me.tableIN_PATIENTS.PWIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013331)
        Me.relationSYS_C0013332 = New Global.System.Data.DataRelation("SYS_C0013332", New Global.System.Data.DataColumn() {Me.tableWARDS.WARDIDColumn}, New Global.System.Data.DataColumn() {Me.tableIN_PATIENTS.WARDIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013332)
        Me.relationSYS_C0013333 = New Global.System.Data.DataRelation("SYS_C0013333", New Global.System.Data.DataColumn() {Me.tableBEDS.BEDIDColumn}, New Global.System.Data.DataColumn() {Me.tableIN_PATIENTS.BEDIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013333)
        Me.relationSYS_C0013346 = New Global.System.Data.DataRelation("SYS_C0013346", New Global.System.Data.DataColumn() {Me.tableSTAFFS.STAFFIDColumn}, New Global.System.Data.DataColumn() {Me.tableLOGIN_LOGS.STAFFIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013346)
        Me.relationSYS_C0013335 = New Global.System.Data.DataRelation("SYS_C0013335", New Global.System.Data.DataColumn() {Me.tableSUPPILERS.SUPPLIERIDColumn}, New Global.System.Data.DataColumn() {Me.tableMED_EQUIPMENTS.SUPPLIERIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013335)
        Me.relationSYS_C0013336 = New Global.System.Data.DataRelation("SYS_C0013336", New Global.System.Data.DataColumn() {Me.tableSUPPILERS.SUPPLIERIDColumn}, New Global.System.Data.DataColumn() {Me.tableMED_MEDICINES.SUPPLIERIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013336)
        Me.relationSYS_C0013322 = New Global.System.Data.DataRelation("SYS_C0013322", New Global.System.Data.DataColumn() {Me.tablePATIENTS.PATIENTIDColumn}, New Global.System.Data.DataColumn() {Me.tablePATIENT_VISITS.PATIENTIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013322)
        Me.relationSYS_C0013323 = New Global.System.Data.DataRelation("SYS_C0013323", New Global.System.Data.DataColumn() {Me.tableSTAFFS.STAFFIDColumn}, New Global.System.Data.DataColumn() {Me.tablePATIENT_VISITS.STAFFIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013323)
        Me.relationSYS_C0013324 = New Global.System.Data.DataRelation("SYS_C0013324", New Global.System.Data.DataColumn() {Me.tableSTAFFS.DOCTORIDColumn}, New Global.System.Data.DataColumn() {Me.tablePATIENT_VISITS.DOCTORIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013324)
        Me.relationSYS_C0013325 = New Global.System.Data.DataRelation("SYS_C0013325", New Global.System.Data.DataColumn() {Me.tableWARDS.WARDIDColumn}, New Global.System.Data.DataColumn() {Me.tablePATIENT_VISITS.WARDIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013325)
        Me.relationSYS_C0013326 = New Global.System.Data.DataRelation("SYS_C0013326", New Global.System.Data.DataColumn() {Me.tablePATIENTS.PATIENTIDColumn}, New Global.System.Data.DataColumn() {Me.tablePATIENT_WARDS.PATIENTIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013326)
        Me.relationSYS_C0013327 = New Global.System.Data.DataRelation("SYS_C0013327", New Global.System.Data.DataColumn() {Me.tablePATIENT_VISITS.VISITIDColumn}, New Global.System.Data.DataColumn() {Me.tablePATIENT_WARDS.VISITIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013327)
        Me.relationSYS_C0013328 = New Global.System.Data.DataRelation("SYS_C0013328", New Global.System.Data.DataColumn() {Me.tableSTAFFS.DOCTORIDColumn}, New Global.System.Data.DataColumn() {Me.tablePATIENT_WARDS.DOCTORIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013328)
        Me.relationSYS_C0013329 = New Global.System.Data.DataRelation("SYS_C0013329", New Global.System.Data.DataColumn() {Me.tableSTAFFS.CNIDColumn}, New Global.System.Data.DataColumn() {Me.tablePATIENT_WARDS.CNIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013329)
        Me.relationSYS_C0013330 = New Global.System.Data.DataRelation("SYS_C0013330", New Global.System.Data.DataColumn() {Me.tableWARDS.WARDIDColumn}, New Global.System.Data.DataColumn() {Me.tablePATIENT_WARDS.WARDIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013330)
        Me.relationSYS_C0013316 = New Global.System.Data.DataRelation("SYS_C0013316", New Global.System.Data.DataColumn() {Me.tablePATIENT_KINS.KINSIDColumn}, New Global.System.Data.DataColumn() {Me.tablePATIENTS.KINSIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013316)
        Me.relationSYS_C0013317 = New Global.System.Data.DataRelation("SYS_C0013317", New Global.System.Data.DataColumn() {Me.tableLOCALDOCTORS.LOCALDOCIDColumn}, New Global.System.Data.DataColumn() {Me.tablePATIENTS.LOCALDOCIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013317)
        Me.relationSYS_C0013337 = New Global.System.Data.DataRelation("SYS_C0013337", New Global.System.Data.DataColumn() {Me.tableMED_MEDICINES.MMIDColumn}, New Global.System.Data.DataColumn() {Me.tablePW_PRESCRIPTS.MMIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013337)
        Me.relationSYS_C0013338 = New Global.System.Data.DataRelation("SYS_C0013338", New Global.System.Data.DataColumn() {Me.tablePATIENT_WARDS.PWIDColumn}, New Global.System.Data.DataColumn() {Me.tablePW_PRESCRIPTS.PWIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013338)
        Me.relationSYS_C0013339 = New Global.System.Data.DataRelation("SYS_C0013339", New Global.System.Data.DataColumn() {Me.tableSTAFFS.DOCTORIDColumn}, New Global.System.Data.DataColumn() {Me.tablePW_PRESCRIPTS.DOCTORIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013339)
        Me.relationSYS_C0013340 = New Global.System.Data.DataRelation("SYS_C0013340", New Global.System.Data.DataColumn() {Me.tableSTAFFS.CNIDColumn}, New Global.System.Data.DataColumn() {Me.tablePW_PRESCRIPTS.CNIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013340)
        Me.relationSYS_C0013314 = New Global.System.Data.DataRelation("SYS_C0013314", New Global.System.Data.DataColumn() {Me.tableSTAFFS.STAFFIDColumn}, New Global.System.Data.DataColumn() {Me.tableSTAFF_EXPERIENCES.STAFFIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013314)
        Me.relationSYS_C0013315 = New Global.System.Data.DataRelation("SYS_C0013315", New Global.System.Data.DataColumn() {Me.tableSTAFFS.STAFFIDColumn}, New Global.System.Data.DataColumn() {Me.tableSTAFF_QUALIFICATES.STAFFIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013315)
        Me.relationSYS_C0013334 = New Global.System.Data.DataRelation("SYS_C0013334", New Global.System.Data.DataColumn() {Me.tableSTAFFS.MDIDColumn}, New Global.System.Data.DataColumn() {Me.tableSUPPILERS.MDIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013334)
        Me.relationSYS_C0013319 = New Global.System.Data.DataRelation("SYS_C0013319", New Global.System.Data.DataColumn() {Me.tableSHIFTS.SHIFTIDColumn}, New Global.System.Data.DataColumn() {Me.tableWARD_STAFFS.SHIFTIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013319)
        Me.relationSYS_C0013320 = New Global.System.Data.DataRelation("SYS_C0013320", New Global.System.Data.DataColumn() {Me.tableSTAFFS.STAFFIDColumn}, New Global.System.Data.DataColumn() {Me.tableWARD_STAFFS.STAFFIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013320)
        Me.relationSYS_C0013321 = New Global.System.Data.DataRelation("SYS_C0013321", New Global.System.Data.DataColumn() {Me.tableWARDS.WARDIDColumn}, New Global.System.Data.DataColumn() {Me.tableWARD_STAFFS.WARDIDColumn}, false)
        Me.Relations.Add(Me.relationSYS_C0013321)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeBEDS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeIN_PATIENTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeLOCALDOCTORS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeLOGIN_LOGS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeMED_EQUIPMENTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeMED_MEDICINES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializePATIENT_KINS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializePATIENT_VISITS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializePATIENT_WARDS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializePATIENTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializePW_PRESCRIPTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeSHIFTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeSTAFF_EXPERIENCES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeSTAFF_QUALIFICATES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeSTAFFS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeSUPPILERS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeWARD_STAFFS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeWARDS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeWARD_REQUESTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet1 = New DataSet1()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub BEDSRowChangeEventHandler(ByVal sender As Object, ByVal e As BEDSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub IN_PATIENTSRowChangeEventHandler(ByVal sender As Object, ByVal e As IN_PATIENTSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub LOCALDOCTORSRowChangeEventHandler(ByVal sender As Object, ByVal e As LOCALDOCTORSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub LOGIN_LOGSRowChangeEventHandler(ByVal sender As Object, ByVal e As LOGIN_LOGSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub MED_EQUIPMENTSRowChangeEventHandler(ByVal sender As Object, ByVal e As MED_EQUIPMENTSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub MED_MEDICINESRowChangeEventHandler(ByVal sender As Object, ByVal e As MED_MEDICINESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub PATIENT_KINSRowChangeEventHandler(ByVal sender As Object, ByVal e As PATIENT_KINSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub PATIENT_VISITSRowChangeEventHandler(ByVal sender As Object, ByVal e As PATIENT_VISITSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub PATIENT_WARDSRowChangeEventHandler(ByVal sender As Object, ByVal e As PATIENT_WARDSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub PATIENTSRowChangeEventHandler(ByVal sender As Object, ByVal e As PATIENTSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub PW_PRESCRIPTSRowChangeEventHandler(ByVal sender As Object, ByVal e As PW_PRESCRIPTSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub SHIFTSRowChangeEventHandler(ByVal sender As Object, ByVal e As SHIFTSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub STAFF_EXPERIENCESRowChangeEventHandler(ByVal sender As Object, ByVal e As STAFF_EXPERIENCESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub STAFF_QUALIFICATESRowChangeEventHandler(ByVal sender As Object, ByVal e As STAFF_QUALIFICATESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub STAFFSRowChangeEventHandler(ByVal sender As Object, ByVal e As STAFFSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub SUPPILERSRowChangeEventHandler(ByVal sender As Object, ByVal e As SUPPILERSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub WARD_STAFFSRowChangeEventHandler(ByVal sender As Object, ByVal e As WARD_STAFFSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub WARDSRowChangeEventHandler(ByVal sender As Object, ByVal e As WARDSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub WARD_REQUESTSRowChangeEventHandler(ByVal sender As Object, ByVal e As WARD_REQUESTSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BEDSDataTable
        Inherits Global.System.Data.TypedTableBase(Of BEDSRow)
        
        Private columnBEDID As Global.System.Data.DataColumn
        
        Private columnWARDID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BEDS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property BEDIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBEDID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property WARDIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARDID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BEDSRow
            Get
                Return CType(Me.Rows(index),BEDSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event BEDSRowChanging As BEDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event BEDSRowChanged As BEDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event BEDSRowDeleting As BEDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event BEDSRowDeleted As BEDSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddBEDSRow(ByVal row As BEDSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddBEDSRow(ByVal BEDID As Long, ByVal parentWARDSRowBySYS_C0013318 As WARDSRow) As BEDSRow
            Dim rowBEDSRow As BEDSRow = CType(Me.NewRow,BEDSRow)
            Dim columnValuesArray() As Object = New Object() {BEDID, Nothing}
            If (Not (parentWARDSRowBySYS_C0013318) Is Nothing) Then
                columnValuesArray(1) = parentWARDSRowBySYS_C0013318(1)
            End If
            rowBEDSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBEDSRow)
            Return rowBEDSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByBEDID(ByVal BEDID As Long) As BEDSRow
            Return CType(Me.Rows.Find(New Object() {BEDID}),BEDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BEDSDataTable = CType(MyBase.Clone,BEDSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BEDSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnBEDID = MyBase.Columns("BEDID")
            Me.columnWARDID = MyBase.Columns("WARDID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnBEDID = New Global.System.Data.DataColumn("BEDID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBEDID)
            Me.columnWARDID = New Global.System.Data.DataColumn("WARDID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARDID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnBEDID}, true))
            Me.columnBEDID.AllowDBNull = false
            Me.columnBEDID.Unique = true
            Me.columnWARDID.AllowDBNull = false
            Me.columnWARDID.MaxLength = 41
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewBEDSRow() As BEDSRow
            Return CType(Me.NewRow,BEDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BEDSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BEDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BEDSRowChangedEvent) Is Nothing) Then
                RaiseEvent BEDSRowChanged(Me, New BEDSRowChangeEvent(CType(e.Row,BEDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BEDSRowChangingEvent) Is Nothing) Then
                RaiseEvent BEDSRowChanging(Me, New BEDSRowChangeEvent(CType(e.Row,BEDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BEDSRowDeletedEvent) Is Nothing) Then
                RaiseEvent BEDSRowDeleted(Me, New BEDSRowChangeEvent(CType(e.Row,BEDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BEDSRowDeletingEvent) Is Nothing) Then
                RaiseEvent BEDSRowDeleting(Me, New BEDSRowChangeEvent(CType(e.Row,BEDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveBEDSRow(ByVal row As BEDSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BEDSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IN_PATIENTSDataTable
        Inherits Global.System.Data.TypedTableBase(Of IN_PATIENTSRow)
        
        Private columnPWID As Global.System.Data.DataColumn
        
        Private columnWARDID As Global.System.Data.DataColumn
        
        Private columnBEDID As Global.System.Data.DataColumn
        
        Private columnON_WATING_DATE As Global.System.Data.DataColumn
        
        Private columnISGETBED As Global.System.Data.DataColumn
        
        Private columnDATE_PLACE As Global.System.Data.DataColumn
        
        Private columnDATE_EXPECTED As Global.System.Data.DataColumn
        
        Private columnDATE_LEAVE As Global.System.Data.DataColumn
        
        Private columnPATIENT_STATUS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IN_PATIENTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PWIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPWID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property WARDIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARDID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property BEDIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBEDID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ON_WATING_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnON_WATING_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ISGETBEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISGETBED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DATE_PLACEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE_PLACE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DATE_EXPECTEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE_EXPECTED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DATE_LEAVEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE_LEAVE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PATIENT_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IN_PATIENTSRow
            Get
                Return CType(Me.Rows(index),IN_PATIENTSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event IN_PATIENTSRowChanging As IN_PATIENTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event IN_PATIENTSRowChanged As IN_PATIENTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event IN_PATIENTSRowDeleting As IN_PATIENTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event IN_PATIENTSRowDeleted As IN_PATIENTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddIN_PATIENTSRow(ByVal row As IN_PATIENTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddIN_PATIENTSRow(ByVal parentPATIENT_WARDSRowBySYS_C0013331 As PATIENT_WARDSRow, ByVal parentWARDSRowBySYS_C0013332 As WARDSRow, ByVal parentBEDSRowBySYS_C0013333 As BEDSRow, ByVal ON_WATING_DATE As Date, ByVal ISGETBED As Short, ByVal DATE_PLACE As Date, ByVal DATE_EXPECTED As Long, ByVal DATE_LEAVE As Date, ByVal PATIENT_STATUS As Short) As IN_PATIENTSRow
            Dim rowIN_PATIENTSRow As IN_PATIENTSRow = CType(Me.NewRow,IN_PATIENTSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, ON_WATING_DATE, ISGETBED, DATE_PLACE, DATE_EXPECTED, DATE_LEAVE, PATIENT_STATUS}
            If (Not (parentPATIENT_WARDSRowBySYS_C0013331) Is Nothing) Then
                columnValuesArray(0) = parentPATIENT_WARDSRowBySYS_C0013331(5)
            End If
            If (Not (parentWARDSRowBySYS_C0013332) Is Nothing) Then
                columnValuesArray(1) = parentWARDSRowBySYS_C0013332(1)
            End If
            If (Not (parentBEDSRowBySYS_C0013333) Is Nothing) Then
                columnValuesArray(2) = parentBEDSRowBySYS_C0013333(0)
            End If
            rowIN_PATIENTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIN_PATIENTSRow)
            Return rowIN_PATIENTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByPWID(ByVal PWID As String) As IN_PATIENTSRow
            Return CType(Me.Rows.Find(New Object() {PWID}),IN_PATIENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IN_PATIENTSDataTable = CType(MyBase.Clone,IN_PATIENTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IN_PATIENTSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPWID = MyBase.Columns("PWID")
            Me.columnWARDID = MyBase.Columns("WARDID")
            Me.columnBEDID = MyBase.Columns("BEDID")
            Me.columnON_WATING_DATE = MyBase.Columns("ON_WATING_DATE")
            Me.columnISGETBED = MyBase.Columns("ISGETBED")
            Me.columnDATE_PLACE = MyBase.Columns("DATE_PLACE")
            Me.columnDATE_EXPECTED = MyBase.Columns("DATE_EXPECTED")
            Me.columnDATE_LEAVE = MyBase.Columns("DATE_LEAVE")
            Me.columnPATIENT_STATUS = MyBase.Columns("PATIENT_STATUS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPWID = New Global.System.Data.DataColumn("PWID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPWID)
            Me.columnWARDID = New Global.System.Data.DataColumn("WARDID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARDID)
            Me.columnBEDID = New Global.System.Data.DataColumn("BEDID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBEDID)
            Me.columnON_WATING_DATE = New Global.System.Data.DataColumn("ON_WATING_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnON_WATING_DATE)
            Me.columnISGETBED = New Global.System.Data.DataColumn("ISGETBED", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISGETBED)
            Me.columnDATE_PLACE = New Global.System.Data.DataColumn("DATE_PLACE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATE_PLACE)
            Me.columnDATE_EXPECTED = New Global.System.Data.DataColumn("DATE_EXPECTED", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATE_EXPECTED)
            Me.columnDATE_LEAVE = New Global.System.Data.DataColumn("DATE_LEAVE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATE_LEAVE)
            Me.columnPATIENT_STATUS = New Global.System.Data.DataColumn("PATIENT_STATUS", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_STATUS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPWID}, true))
            Me.columnPWID.AllowDBNull = false
            Me.columnPWID.Unique = true
            Me.columnPWID.MaxLength = 42
            Me.columnWARDID.AllowDBNull = false
            Me.columnWARDID.MaxLength = 41
            Me.columnON_WATING_DATE.AllowDBNull = false
            Me.columnISGETBED.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewIN_PATIENTSRow() As IN_PATIENTSRow
            Return CType(Me.NewRow,IN_PATIENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IN_PATIENTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IN_PATIENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IN_PATIENTSRowChangedEvent) Is Nothing) Then
                RaiseEvent IN_PATIENTSRowChanged(Me, New IN_PATIENTSRowChangeEvent(CType(e.Row,IN_PATIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IN_PATIENTSRowChangingEvent) Is Nothing) Then
                RaiseEvent IN_PATIENTSRowChanging(Me, New IN_PATIENTSRowChangeEvent(CType(e.Row,IN_PATIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IN_PATIENTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent IN_PATIENTSRowDeleted(Me, New IN_PATIENTSRowChangeEvent(CType(e.Row,IN_PATIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IN_PATIENTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent IN_PATIENTSRowDeleting(Me, New IN_PATIENTSRowChangeEvent(CType(e.Row,IN_PATIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveIN_PATIENTSRow(ByVal row As IN_PATIENTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IN_PATIENTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LOCALDOCTORSDataTable
        Inherits Global.System.Data.TypedTableBase(Of LOCALDOCTORSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnLOCALDOCID As Global.System.Data.DataColumn
        
        Private columnFULLNAME As Global.System.Data.DataColumn
        
        Private columnCLINICID As Global.System.Data.DataColumn
        
        Private columnADDRESS As Global.System.Data.DataColumn
        
        Private columnTEL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LOCALDOCTORS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LOCALDOCIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOCALDOCID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FULLNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFULLNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CLINICIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLINICID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOCALDOCTORSRow
            Get
                Return CType(Me.Rows(index),LOCALDOCTORSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LOCALDOCTORSRowChanging As LOCALDOCTORSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LOCALDOCTORSRowChanged As LOCALDOCTORSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LOCALDOCTORSRowDeleting As LOCALDOCTORSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LOCALDOCTORSRowDeleted As LOCALDOCTORSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddLOCALDOCTORSRow(ByVal row As LOCALDOCTORSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddLOCALDOCTORSRow(ByVal LOCALDOCID As String, ByVal FULLNAME As String, ByVal CLINICID As String, ByVal ADDRESS As String, ByVal TEL As Long) As LOCALDOCTORSRow
            Dim rowLOCALDOCTORSRow As LOCALDOCTORSRow = CType(Me.NewRow,LOCALDOCTORSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, LOCALDOCID, FULLNAME, CLINICID, ADDRESS, TEL}
            rowLOCALDOCTORSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLOCALDOCTORSRow)
            Return rowLOCALDOCTORSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByLOCALDOCID(ByVal LOCALDOCID As String) As LOCALDOCTORSRow
            Return CType(Me.Rows.Find(New Object() {LOCALDOCID}),LOCALDOCTORSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LOCALDOCTORSDataTable = CType(MyBase.Clone,LOCALDOCTORSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LOCALDOCTORSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnLOCALDOCID = MyBase.Columns("LOCALDOCID")
            Me.columnFULLNAME = MyBase.Columns("FULLNAME")
            Me.columnCLINICID = MyBase.Columns("CLINICID")
            Me.columnADDRESS = MyBase.Columns("ADDRESS")
            Me.columnTEL = MyBase.Columns("TEL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnLOCALDOCID = New Global.System.Data.DataColumn("LOCALDOCID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOCALDOCID)
            Me.columnFULLNAME = New Global.System.Data.DataColumn("FULLNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFULLNAME)
            Me.columnCLINICID = New Global.System.Data.DataColumn("CLINICID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLINICID)
            Me.columnADDRESS = New Global.System.Data.DataColumn("ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDRESS)
            Me.columnTEL = New Global.System.Data.DataColumn("TEL", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCLINICID}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnLOCALDOCID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnLOCALDOCID.AllowDBNull = false
            Me.columnLOCALDOCID.Unique = true
            Me.columnLOCALDOCID.MaxLength = 41
            Me.columnFULLNAME.AllowDBNull = false
            Me.columnFULLNAME.MaxLength = 100
            Me.columnCLINICID.AllowDBNull = false
            Me.columnCLINICID.Unique = true
            Me.columnCLINICID.MaxLength = 10
            Me.columnADDRESS.AllowDBNull = false
            Me.columnADDRESS.MaxLength = 256
            Me.columnTEL.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewLOCALDOCTORSRow() As LOCALDOCTORSRow
            Return CType(Me.NewRow,LOCALDOCTORSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LOCALDOCTORSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LOCALDOCTORSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOCALDOCTORSRowChangedEvent) Is Nothing) Then
                RaiseEvent LOCALDOCTORSRowChanged(Me, New LOCALDOCTORSRowChangeEvent(CType(e.Row,LOCALDOCTORSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOCALDOCTORSRowChangingEvent) Is Nothing) Then
                RaiseEvent LOCALDOCTORSRowChanging(Me, New LOCALDOCTORSRowChangeEvent(CType(e.Row,LOCALDOCTORSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOCALDOCTORSRowDeletedEvent) Is Nothing) Then
                RaiseEvent LOCALDOCTORSRowDeleted(Me, New LOCALDOCTORSRowChangeEvent(CType(e.Row,LOCALDOCTORSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOCALDOCTORSRowDeletingEvent) Is Nothing) Then
                RaiseEvent LOCALDOCTORSRowDeleting(Me, New LOCALDOCTORSRowChangeEvent(CType(e.Row,LOCALDOCTORSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveLOCALDOCTORSRow(ByVal row As LOCALDOCTORSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LOCALDOCTORSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LOGIN_LOGSDataTable
        Inherits Global.System.Data.TypedTableBase(Of LOGIN_LOGSRow)
        
        Private columnSTAFFID As Global.System.Data.DataColumn
        
        Private columnLOGINTIME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LOGIN_LOGS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property STAFFIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTAFFID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LOGINTIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOGINTIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOGIN_LOGSRow
            Get
                Return CType(Me.Rows(index),LOGIN_LOGSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LOGIN_LOGSRowChanging As LOGIN_LOGSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LOGIN_LOGSRowChanged As LOGIN_LOGSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LOGIN_LOGSRowDeleting As LOGIN_LOGSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LOGIN_LOGSRowDeleted As LOGIN_LOGSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddLOGIN_LOGSRow(ByVal row As LOGIN_LOGSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddLOGIN_LOGSRow(ByVal parentSTAFFSRowBySYS_C0013346 As STAFFSRow, ByVal LOGINTIME As Date) As LOGIN_LOGSRow
            Dim rowLOGIN_LOGSRow As LOGIN_LOGSRow = CType(Me.NewRow,LOGIN_LOGSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, LOGINTIME}
            If (Not (parentSTAFFSRowBySYS_C0013346) Is Nothing) Then
                columnValuesArray(0) = parentSTAFFSRowBySYS_C0013346(1)
            End If
            rowLOGIN_LOGSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLOGIN_LOGSRow)
            Return rowLOGIN_LOGSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindBySTAFFID(ByVal STAFFID As String) As LOGIN_LOGSRow
            Return CType(Me.Rows.Find(New Object() {STAFFID}),LOGIN_LOGSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LOGIN_LOGSDataTable = CType(MyBase.Clone,LOGIN_LOGSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LOGIN_LOGSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSTAFFID = MyBase.Columns("STAFFID")
            Me.columnLOGINTIME = MyBase.Columns("LOGINTIME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSTAFFID = New Global.System.Data.DataColumn("STAFFID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTAFFID)
            Me.columnLOGINTIME = New Global.System.Data.DataColumn("LOGINTIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOGINTIME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSTAFFID}, true))
            Me.columnSTAFFID.AllowDBNull = false
            Me.columnSTAFFID.Unique = true
            Me.columnSTAFFID.MaxLength = 41
            Me.columnLOGINTIME.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewLOGIN_LOGSRow() As LOGIN_LOGSRow
            Return CType(Me.NewRow,LOGIN_LOGSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LOGIN_LOGSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LOGIN_LOGSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOGIN_LOGSRowChangedEvent) Is Nothing) Then
                RaiseEvent LOGIN_LOGSRowChanged(Me, New LOGIN_LOGSRowChangeEvent(CType(e.Row,LOGIN_LOGSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOGIN_LOGSRowChangingEvent) Is Nothing) Then
                RaiseEvent LOGIN_LOGSRowChanging(Me, New LOGIN_LOGSRowChangeEvent(CType(e.Row,LOGIN_LOGSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOGIN_LOGSRowDeletedEvent) Is Nothing) Then
                RaiseEvent LOGIN_LOGSRowDeleted(Me, New LOGIN_LOGSRowChangeEvent(CType(e.Row,LOGIN_LOGSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOGIN_LOGSRowDeletingEvent) Is Nothing) Then
                RaiseEvent LOGIN_LOGSRowDeleting(Me, New LOGIN_LOGSRowChangeEvent(CType(e.Row,LOGIN_LOGSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveLOGIN_LOGSRow(ByVal row As LOGIN_LOGSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LOGIN_LOGSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MED_EQUIPMENTSDataTable
        Inherits Global.System.Data.TypedTableBase(Of MED_EQUIPMENTSRow)
        
        Private columnMEID As Global.System.Data.DataColumn
        
        Private columnSUPPLIERID As Global.System.Data.DataColumn
        
        Private columnNAME As Global.System.Data.DataColumn
        
        Private columndesc As Global.System.Data.DataColumn
        
        Private columnSTOCK As Global.System.Data.DataColumn
        
        Private columnBUY_SCALE As Global.System.Data.DataColumn
        
        Private columnPRICE_PER_UNIT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MED_EQUIPMENTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SUPPLIERIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLIERID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property descColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property STOCKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property BUY_SCALEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUY_SCALE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PRICE_PER_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRICE_PER_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MED_EQUIPMENTSRow
            Get
                Return CType(Me.Rows(index),MED_EQUIPMENTSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event MED_EQUIPMENTSRowChanging As MED_EQUIPMENTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event MED_EQUIPMENTSRowChanged As MED_EQUIPMENTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event MED_EQUIPMENTSRowDeleting As MED_EQUIPMENTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event MED_EQUIPMENTSRowDeleted As MED_EQUIPMENTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddMED_EQUIPMENTSRow(ByVal row As MED_EQUIPMENTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddMED_EQUIPMENTSRow(ByVal MEID As Long, ByVal parentSUPPILERSRowBySYS_C0013335 As SUPPILERSRow, ByVal NAME As String, ByVal desc As String, ByVal STOCK As Long, ByVal BUY_SCALE As Double, ByVal PRICE_PER_UNIT As Double) As MED_EQUIPMENTSRow
            Dim rowMED_EQUIPMENTSRow As MED_EQUIPMENTSRow = CType(Me.NewRow,MED_EQUIPMENTSRow)
            Dim columnValuesArray() As Object = New Object() {MEID, Nothing, NAME, desc, STOCK, BUY_SCALE, PRICE_PER_UNIT}
            If (Not (parentSUPPILERSRowBySYS_C0013335) Is Nothing) Then
                columnValuesArray(1) = parentSUPPILERSRowBySYS_C0013335(0)
            End If
            rowMED_EQUIPMENTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMED_EQUIPMENTSRow)
            Return rowMED_EQUIPMENTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByMEID(ByVal MEID As Long) As MED_EQUIPMENTSRow
            Return CType(Me.Rows.Find(New Object() {MEID}),MED_EQUIPMENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MED_EQUIPMENTSDataTable = CType(MyBase.Clone,MED_EQUIPMENTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MED_EQUIPMENTSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMEID = MyBase.Columns("MEID")
            Me.columnSUPPLIERID = MyBase.Columns("SUPPLIERID")
            Me.columnNAME = MyBase.Columns("NAME")
            Me.columndesc = MyBase.Columns("desc")
            Me.columnSTOCK = MyBase.Columns("STOCK")
            Me.columnBUY_SCALE = MyBase.Columns("BUY_SCALE")
            Me.columnPRICE_PER_UNIT = MyBase.Columns("PRICE_PER_UNIT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMEID = New Global.System.Data.DataColumn("MEID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEID)
            Me.columnSUPPLIERID = New Global.System.Data.DataColumn("SUPPLIERID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLIERID)
            Me.columnNAME = New Global.System.Data.DataColumn("NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME)
            Me.columndesc = New Global.System.Data.DataColumn("desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc)
            Me.columnSTOCK = New Global.System.Data.DataColumn("STOCK", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK)
            Me.columnBUY_SCALE = New Global.System.Data.DataColumn("BUY_SCALE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUY_SCALE)
            Me.columnPRICE_PER_UNIT = New Global.System.Data.DataColumn("PRICE_PER_UNIT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRICE_PER_UNIT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMEID}, true))
            Me.columnMEID.AllowDBNull = false
            Me.columnMEID.Unique = true
            Me.columnNAME.MaxLength = 50
            Me.columndesc.MaxLength = 256
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewMED_EQUIPMENTSRow() As MED_EQUIPMENTSRow
            Return CType(Me.NewRow,MED_EQUIPMENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MED_EQUIPMENTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MED_EQUIPMENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MED_EQUIPMENTSRowChangedEvent) Is Nothing) Then
                RaiseEvent MED_EQUIPMENTSRowChanged(Me, New MED_EQUIPMENTSRowChangeEvent(CType(e.Row,MED_EQUIPMENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MED_EQUIPMENTSRowChangingEvent) Is Nothing) Then
                RaiseEvent MED_EQUIPMENTSRowChanging(Me, New MED_EQUIPMENTSRowChangeEvent(CType(e.Row,MED_EQUIPMENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MED_EQUIPMENTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent MED_EQUIPMENTSRowDeleted(Me, New MED_EQUIPMENTSRowChangeEvent(CType(e.Row,MED_EQUIPMENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MED_EQUIPMENTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent MED_EQUIPMENTSRowDeleting(Me, New MED_EQUIPMENTSRowChangeEvent(CType(e.Row,MED_EQUIPMENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveMED_EQUIPMENTSRow(ByVal row As MED_EQUIPMENTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MED_EQUIPMENTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MED_MEDICINESDataTable
        Inherits Global.System.Data.TypedTableBase(Of MED_MEDICINESRow)
        
        Private columnMMID As Global.System.Data.DataColumn
        
        Private columnSUPPLIERID As Global.System.Data.DataColumn
        
        Private columnNAME As Global.System.Data.DataColumn
        
        Private columndesc As Global.System.Data.DataColumn
        
        Private columnDOSAGE As Global.System.Data.DataColumn
        
        Private columnMETHOD As Global.System.Data.DataColumn
        
        Private columnSTOCK As Global.System.Data.DataColumn
        
        Private columnBUY_SCALE As Global.System.Data.DataColumn
        
        Private columnPRICE_PER_UNIT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MED_MEDICINES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MMIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMMID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SUPPLIERIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLIERID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property descColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DOSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property METHODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMETHOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property STOCKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property BUY_SCALEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUY_SCALE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PRICE_PER_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRICE_PER_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MED_MEDICINESRow
            Get
                Return CType(Me.Rows(index),MED_MEDICINESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event MED_MEDICINESRowChanging As MED_MEDICINESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event MED_MEDICINESRowChanged As MED_MEDICINESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event MED_MEDICINESRowDeleting As MED_MEDICINESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event MED_MEDICINESRowDeleted As MED_MEDICINESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddMED_MEDICINESRow(ByVal row As MED_MEDICINESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddMED_MEDICINESRow(ByVal MMID As Long, ByVal parentSUPPILERSRowBySYS_C0013336 As SUPPILERSRow, ByVal NAME As String, ByVal desc As String, ByVal DOSAGE As Long, ByVal METHOD As String, ByVal STOCK As Long, ByVal BUY_SCALE As Double, ByVal PRICE_PER_UNIT As Double) As MED_MEDICINESRow
            Dim rowMED_MEDICINESRow As MED_MEDICINESRow = CType(Me.NewRow,MED_MEDICINESRow)
            Dim columnValuesArray() As Object = New Object() {MMID, Nothing, NAME, desc, DOSAGE, METHOD, STOCK, BUY_SCALE, PRICE_PER_UNIT}
            If (Not (parentSUPPILERSRowBySYS_C0013336) Is Nothing) Then
                columnValuesArray(1) = parentSUPPILERSRowBySYS_C0013336(0)
            End If
            rowMED_MEDICINESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMED_MEDICINESRow)
            Return rowMED_MEDICINESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByMMID(ByVal MMID As Long) As MED_MEDICINESRow
            Return CType(Me.Rows.Find(New Object() {MMID}),MED_MEDICINESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MED_MEDICINESDataTable = CType(MyBase.Clone,MED_MEDICINESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MED_MEDICINESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMMID = MyBase.Columns("MMID")
            Me.columnSUPPLIERID = MyBase.Columns("SUPPLIERID")
            Me.columnNAME = MyBase.Columns("NAME")
            Me.columndesc = MyBase.Columns("desc")
            Me.columnDOSAGE = MyBase.Columns("DOSAGE")
            Me.columnMETHOD = MyBase.Columns("METHOD")
            Me.columnSTOCK = MyBase.Columns("STOCK")
            Me.columnBUY_SCALE = MyBase.Columns("BUY_SCALE")
            Me.columnPRICE_PER_UNIT = MyBase.Columns("PRICE_PER_UNIT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMMID = New Global.System.Data.DataColumn("MMID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMMID)
            Me.columnSUPPLIERID = New Global.System.Data.DataColumn("SUPPLIERID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLIERID)
            Me.columnNAME = New Global.System.Data.DataColumn("NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME)
            Me.columndesc = New Global.System.Data.DataColumn("desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc)
            Me.columnDOSAGE = New Global.System.Data.DataColumn("DOSAGE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOSAGE)
            Me.columnMETHOD = New Global.System.Data.DataColumn("METHOD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMETHOD)
            Me.columnSTOCK = New Global.System.Data.DataColumn("STOCK", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK)
            Me.columnBUY_SCALE = New Global.System.Data.DataColumn("BUY_SCALE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUY_SCALE)
            Me.columnPRICE_PER_UNIT = New Global.System.Data.DataColumn("PRICE_PER_UNIT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRICE_PER_UNIT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMMID}, true))
            Me.columnMMID.AllowDBNull = false
            Me.columnMMID.Unique = true
            Me.columnNAME.MaxLength = 50
            Me.columndesc.MaxLength = 256
            Me.columnMETHOD.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewMED_MEDICINESRow() As MED_MEDICINESRow
            Return CType(Me.NewRow,MED_MEDICINESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MED_MEDICINESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MED_MEDICINESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MED_MEDICINESRowChangedEvent) Is Nothing) Then
                RaiseEvent MED_MEDICINESRowChanged(Me, New MED_MEDICINESRowChangeEvent(CType(e.Row,MED_MEDICINESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MED_MEDICINESRowChangingEvent) Is Nothing) Then
                RaiseEvent MED_MEDICINESRowChanging(Me, New MED_MEDICINESRowChangeEvent(CType(e.Row,MED_MEDICINESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MED_MEDICINESRowDeletedEvent) Is Nothing) Then
                RaiseEvent MED_MEDICINESRowDeleted(Me, New MED_MEDICINESRowChangeEvent(CType(e.Row,MED_MEDICINESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MED_MEDICINESRowDeletingEvent) Is Nothing) Then
                RaiseEvent MED_MEDICINESRowDeleting(Me, New MED_MEDICINESRowChangeEvent(CType(e.Row,MED_MEDICINESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveMED_MEDICINESRow(ByVal row As MED_MEDICINESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MED_MEDICINESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PATIENT_KINSDataTable
        Inherits Global.System.Data.TypedTableBase(Of PATIENT_KINSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnKINSID As Global.System.Data.DataColumn
        
        Private columnFULLNAME As Global.System.Data.DataColumn
        
        Private columnADDRESS As Global.System.Data.DataColumn
        
        Private columnRELATIONSHIP As Global.System.Data.DataColumn
        
        Private columnTEL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PATIENT_KINS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property KINSIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKINSID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FULLNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFULLNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property RELATIONSHIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRELATIONSHIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PATIENT_KINSRow
            Get
                Return CType(Me.Rows(index),PATIENT_KINSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENT_KINSRowChanging As PATIENT_KINSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENT_KINSRowChanged As PATIENT_KINSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENT_KINSRowDeleting As PATIENT_KINSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENT_KINSRowDeleted As PATIENT_KINSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddPATIENT_KINSRow(ByVal row As PATIENT_KINSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddPATIENT_KINSRow(ByVal KINSID As String, ByVal FULLNAME As String, ByVal ADDRESS As String, ByVal RELATIONSHIP As String, ByVal TEL As Long) As PATIENT_KINSRow
            Dim rowPATIENT_KINSRow As PATIENT_KINSRow = CType(Me.NewRow,PATIENT_KINSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, KINSID, FULLNAME, ADDRESS, RELATIONSHIP, TEL}
            rowPATIENT_KINSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPATIENT_KINSRow)
            Return rowPATIENT_KINSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByKINSID(ByVal KINSID As String) As PATIENT_KINSRow
            Return CType(Me.Rows.Find(New Object() {KINSID}),PATIENT_KINSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PATIENT_KINSDataTable = CType(MyBase.Clone,PATIENT_KINSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PATIENT_KINSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnKINSID = MyBase.Columns("KINSID")
            Me.columnFULLNAME = MyBase.Columns("FULLNAME")
            Me.columnADDRESS = MyBase.Columns("ADDRESS")
            Me.columnRELATIONSHIP = MyBase.Columns("RELATIONSHIP")
            Me.columnTEL = MyBase.Columns("TEL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnKINSID = New Global.System.Data.DataColumn("KINSID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKINSID)
            Me.columnFULLNAME = New Global.System.Data.DataColumn("FULLNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFULLNAME)
            Me.columnADDRESS = New Global.System.Data.DataColumn("ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDRESS)
            Me.columnRELATIONSHIP = New Global.System.Data.DataColumn("RELATIONSHIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRELATIONSHIP)
            Me.columnTEL = New Global.System.Data.DataColumn("TEL", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnKINSID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnKINSID.AllowDBNull = false
            Me.columnKINSID.Unique = true
            Me.columnKINSID.MaxLength = 41
            Me.columnFULLNAME.AllowDBNull = false
            Me.columnFULLNAME.MaxLength = 100
            Me.columnADDRESS.AllowDBNull = false
            Me.columnADDRESS.MaxLength = 256
            Me.columnRELATIONSHIP.AllowDBNull = false
            Me.columnRELATIONSHIP.MaxLength = 30
            Me.columnTEL.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewPATIENT_KINSRow() As PATIENT_KINSRow
            Return CType(Me.NewRow,PATIENT_KINSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PATIENT_KINSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PATIENT_KINSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PATIENT_KINSRowChangedEvent) Is Nothing) Then
                RaiseEvent PATIENT_KINSRowChanged(Me, New PATIENT_KINSRowChangeEvent(CType(e.Row,PATIENT_KINSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PATIENT_KINSRowChangingEvent) Is Nothing) Then
                RaiseEvent PATIENT_KINSRowChanging(Me, New PATIENT_KINSRowChangeEvent(CType(e.Row,PATIENT_KINSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PATIENT_KINSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PATIENT_KINSRowDeleted(Me, New PATIENT_KINSRowChangeEvent(CType(e.Row,PATIENT_KINSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PATIENT_KINSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PATIENT_KINSRowDeleting(Me, New PATIENT_KINSRowChangeEvent(CType(e.Row,PATIENT_KINSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemovePATIENT_KINSRow(ByVal row As PATIENT_KINSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PATIENT_KINSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PATIENT_VISITSDataTable
        Inherits Global.System.Data.TypedTableBase(Of PATIENT_VISITSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnVISITID As Global.System.Data.DataColumn
        
        Private columnPATIENTID As Global.System.Data.DataColumn
        
        Private columnSTAFFID As Global.System.Data.DataColumn
        
        Private columnDOCTORID As Global.System.Data.DataColumn
        
        Private columnWARDID As Global.System.Data.DataColumn
        
        Private columnAPP_DATE As Global.System.Data.DataColumn
        
        Private columnAPP_TYPE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PATIENT_VISITS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VISITIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVISITID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PATIENTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property STAFFIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTAFFID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DOCTORIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCTORID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property WARDIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARDID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property APP_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPP_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property APP_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPP_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PATIENT_VISITSRow
            Get
                Return CType(Me.Rows(index),PATIENT_VISITSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENT_VISITSRowChanging As PATIENT_VISITSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENT_VISITSRowChanged As PATIENT_VISITSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENT_VISITSRowDeleting As PATIENT_VISITSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENT_VISITSRowDeleted As PATIENT_VISITSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddPATIENT_VISITSRow(ByVal row As PATIENT_VISITSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddPATIENT_VISITSRow(ByVal VISITID As String, ByVal parentPATIENTSRowBySYS_C0013322 As PATIENTSRow, ByVal parentSTAFFSRowBySYS_C0013323 As STAFFSRow, ByVal parentSTAFFSRowBySYS_C0013324 As STAFFSRow, ByVal parentWARDSRowBySYS_C0013325 As WARDSRow, ByVal APP_DATE As Date, ByVal APP_TYPE As String) As PATIENT_VISITSRow
            Dim rowPATIENT_VISITSRow As PATIENT_VISITSRow = CType(Me.NewRow,PATIENT_VISITSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, VISITID, Nothing, Nothing, Nothing, Nothing, APP_DATE, APP_TYPE}
            If (Not (parentPATIENTSRowBySYS_C0013322) Is Nothing) Then
                columnValuesArray(2) = parentPATIENTSRowBySYS_C0013322(1)
            End If
            If (Not (parentSTAFFSRowBySYS_C0013323) Is Nothing) Then
                columnValuesArray(3) = parentSTAFFSRowBySYS_C0013323(1)
            End If
            If (Not (parentSTAFFSRowBySYS_C0013324) Is Nothing) Then
                columnValuesArray(4) = parentSTAFFSRowBySYS_C0013324(2)
            End If
            If (Not (parentWARDSRowBySYS_C0013325) Is Nothing) Then
                columnValuesArray(5) = parentWARDSRowBySYS_C0013325(1)
            End If
            rowPATIENT_VISITSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPATIENT_VISITSRow)
            Return rowPATIENT_VISITSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByVISITID(ByVal VISITID As String) As PATIENT_VISITSRow
            Return CType(Me.Rows.Find(New Object() {VISITID}),PATIENT_VISITSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PATIENT_VISITSDataTable = CType(MyBase.Clone,PATIENT_VISITSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PATIENT_VISITSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnVISITID = MyBase.Columns("VISITID")
            Me.columnPATIENTID = MyBase.Columns("PATIENTID")
            Me.columnSTAFFID = MyBase.Columns("STAFFID")
            Me.columnDOCTORID = MyBase.Columns("DOCTORID")
            Me.columnWARDID = MyBase.Columns("WARDID")
            Me.columnAPP_DATE = MyBase.Columns("APP_DATE")
            Me.columnAPP_TYPE = MyBase.Columns("APP_TYPE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnVISITID = New Global.System.Data.DataColumn("VISITID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVISITID)
            Me.columnPATIENTID = New Global.System.Data.DataColumn("PATIENTID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENTID)
            Me.columnSTAFFID = New Global.System.Data.DataColumn("STAFFID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTAFFID)
            Me.columnDOCTORID = New Global.System.Data.DataColumn("DOCTORID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCTORID)
            Me.columnWARDID = New Global.System.Data.DataColumn("WARDID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARDID)
            Me.columnAPP_DATE = New Global.System.Data.DataColumn("APP_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPP_DATE)
            Me.columnAPP_TYPE = New Global.System.Data.DataColumn("APP_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPP_TYPE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnVISITID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnVISITID.AllowDBNull = false
            Me.columnVISITID.Unique = true
            Me.columnVISITID.MaxLength = 41
            Me.columnPATIENTID.AllowDBNull = false
            Me.columnPATIENTID.MaxLength = 41
            Me.columnSTAFFID.AllowDBNull = false
            Me.columnSTAFFID.MaxLength = 41
            Me.columnDOCTORID.AllowDBNull = false
            Me.columnDOCTORID.MaxLength = 10
            Me.columnWARDID.AllowDBNull = false
            Me.columnWARDID.MaxLength = 41
            Me.columnAPP_DATE.AllowDBNull = false
            Me.columnAPP_TYPE.AllowDBNull = false
            Me.columnAPP_TYPE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewPATIENT_VISITSRow() As PATIENT_VISITSRow
            Return CType(Me.NewRow,PATIENT_VISITSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PATIENT_VISITSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PATIENT_VISITSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PATIENT_VISITSRowChangedEvent) Is Nothing) Then
                RaiseEvent PATIENT_VISITSRowChanged(Me, New PATIENT_VISITSRowChangeEvent(CType(e.Row,PATIENT_VISITSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PATIENT_VISITSRowChangingEvent) Is Nothing) Then
                RaiseEvent PATIENT_VISITSRowChanging(Me, New PATIENT_VISITSRowChangeEvent(CType(e.Row,PATIENT_VISITSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PATIENT_VISITSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PATIENT_VISITSRowDeleted(Me, New PATIENT_VISITSRowChangeEvent(CType(e.Row,PATIENT_VISITSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PATIENT_VISITSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PATIENT_VISITSRowDeleting(Me, New PATIENT_VISITSRowChangeEvent(CType(e.Row,PATIENT_VISITSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemovePATIENT_VISITSRow(ByVal row As PATIENT_VISITSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PATIENT_VISITSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PATIENT_WARDSDataTable
        Inherits Global.System.Data.TypedTableBase(Of PATIENT_WARDSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPATIENTID As Global.System.Data.DataColumn
        
        Private columnVISITID As Global.System.Data.DataColumn
        
        Private columnDOCTORID As Global.System.Data.DataColumn
        
        Private columnCNID As Global.System.Data.DataColumn
        
        Private columnPWID As Global.System.Data.DataColumn
        
        Private columnWARDID As Global.System.Data.DataColumn
        
        Private columnPATIENTTYPE As Global.System.Data.DataColumn
        
        Private columnON_WARD_DATE As Global.System.Data.DataColumn
        
        Private columnSYMPTOM As Global.System.Data.DataColumn
        
        Private columnUPDATEAT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PATIENT_WARDS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PATIENTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property VISITIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVISITID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DOCTORIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCTORID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CNIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PWIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPWID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property WARDIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARDID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PATIENTTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENTTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ON_WARD_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnON_WARD_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SYMPTOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYMPTOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property UPDATEATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATEAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PATIENT_WARDSRow
            Get
                Return CType(Me.Rows(index),PATIENT_WARDSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENT_WARDSRowChanging As PATIENT_WARDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENT_WARDSRowChanged As PATIENT_WARDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENT_WARDSRowDeleting As PATIENT_WARDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENT_WARDSRowDeleted As PATIENT_WARDSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddPATIENT_WARDSRow(ByVal row As PATIENT_WARDSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddPATIENT_WARDSRow(ByVal parentPATIENTSRowBySYS_C0013326 As PATIENTSRow, ByVal parentPATIENT_VISITSRowBySYS_C0013327 As PATIENT_VISITSRow, ByVal parentSTAFFSRowBySYS_C0013328 As STAFFSRow, ByVal parentSTAFFSRowBySYS_C0013329 As STAFFSRow, ByVal PWID As String, ByVal parentWARDSRowBySYS_C0013330 As WARDSRow, ByVal PATIENTTYPE As String, ByVal ON_WARD_DATE As Date, ByVal SYMPTOM As String, ByVal UPDATEAT As Date) As PATIENT_WARDSRow
            Dim rowPATIENT_WARDSRow As PATIENT_WARDSRow = CType(Me.NewRow,PATIENT_WARDSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, Nothing, Nothing, PWID, Nothing, PATIENTTYPE, ON_WARD_DATE, SYMPTOM, UPDATEAT}
            If (Not (parentPATIENTSRowBySYS_C0013326) Is Nothing) Then
                columnValuesArray(1) = parentPATIENTSRowBySYS_C0013326(1)
            End If
            If (Not (parentPATIENT_VISITSRowBySYS_C0013327) Is Nothing) Then
                columnValuesArray(2) = parentPATIENT_VISITSRowBySYS_C0013327(1)
            End If
            If (Not (parentSTAFFSRowBySYS_C0013328) Is Nothing) Then
                columnValuesArray(3) = parentSTAFFSRowBySYS_C0013328(2)
            End If
            If (Not (parentSTAFFSRowBySYS_C0013329) Is Nothing) Then
                columnValuesArray(4) = parentSTAFFSRowBySYS_C0013329(3)
            End If
            If (Not (parentWARDSRowBySYS_C0013330) Is Nothing) Then
                columnValuesArray(6) = parentWARDSRowBySYS_C0013330(1)
            End If
            rowPATIENT_WARDSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPATIENT_WARDSRow)
            Return rowPATIENT_WARDSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByPWID(ByVal PWID As String) As PATIENT_WARDSRow
            Return CType(Me.Rows.Find(New Object() {PWID}),PATIENT_WARDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PATIENT_WARDSDataTable = CType(MyBase.Clone,PATIENT_WARDSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PATIENT_WARDSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnPATIENTID = MyBase.Columns("PATIENTID")
            Me.columnVISITID = MyBase.Columns("VISITID")
            Me.columnDOCTORID = MyBase.Columns("DOCTORID")
            Me.columnCNID = MyBase.Columns("CNID")
            Me.columnPWID = MyBase.Columns("PWID")
            Me.columnWARDID = MyBase.Columns("WARDID")
            Me.columnPATIENTTYPE = MyBase.Columns("PATIENTTYPE")
            Me.columnON_WARD_DATE = MyBase.Columns("ON_WARD_DATE")
            Me.columnSYMPTOM = MyBase.Columns("SYMPTOM")
            Me.columnUPDATEAT = MyBase.Columns("UPDATEAT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPATIENTID = New Global.System.Data.DataColumn("PATIENTID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENTID)
            Me.columnVISITID = New Global.System.Data.DataColumn("VISITID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVISITID)
            Me.columnDOCTORID = New Global.System.Data.DataColumn("DOCTORID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCTORID)
            Me.columnCNID = New Global.System.Data.DataColumn("CNID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNID)
            Me.columnPWID = New Global.System.Data.DataColumn("PWID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPWID)
            Me.columnWARDID = New Global.System.Data.DataColumn("WARDID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARDID)
            Me.columnPATIENTTYPE = New Global.System.Data.DataColumn("PATIENTTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENTTYPE)
            Me.columnON_WARD_DATE = New Global.System.Data.DataColumn("ON_WARD_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnON_WARD_DATE)
            Me.columnSYMPTOM = New Global.System.Data.DataColumn("SYMPTOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYMPTOM)
            Me.columnUPDATEAT = New Global.System.Data.DataColumn("UPDATEAT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATEAT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPWID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnPATIENTID.AllowDBNull = false
            Me.columnPATIENTID.MaxLength = 41
            Me.columnVISITID.AllowDBNull = false
            Me.columnVISITID.MaxLength = 41
            Me.columnDOCTORID.AllowDBNull = false
            Me.columnDOCTORID.MaxLength = 10
            Me.columnCNID.AllowDBNull = false
            Me.columnCNID.MaxLength = 10
            Me.columnPWID.AllowDBNull = false
            Me.columnPWID.Unique = true
            Me.columnPWID.MaxLength = 42
            Me.columnWARDID.AllowDBNull = false
            Me.columnWARDID.MaxLength = 41
            Me.columnPATIENTTYPE.AllowDBNull = false
            Me.columnPATIENTTYPE.MaxLength = 50
            Me.columnON_WARD_DATE.AllowDBNull = false
            Me.columnSYMPTOM.AllowDBNull = false
            Me.columnSYMPTOM.MaxLength = 256
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewPATIENT_WARDSRow() As PATIENT_WARDSRow
            Return CType(Me.NewRow,PATIENT_WARDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PATIENT_WARDSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PATIENT_WARDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PATIENT_WARDSRowChangedEvent) Is Nothing) Then
                RaiseEvent PATIENT_WARDSRowChanged(Me, New PATIENT_WARDSRowChangeEvent(CType(e.Row,PATIENT_WARDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PATIENT_WARDSRowChangingEvent) Is Nothing) Then
                RaiseEvent PATIENT_WARDSRowChanging(Me, New PATIENT_WARDSRowChangeEvent(CType(e.Row,PATIENT_WARDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PATIENT_WARDSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PATIENT_WARDSRowDeleted(Me, New PATIENT_WARDSRowChangeEvent(CType(e.Row,PATIENT_WARDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PATIENT_WARDSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PATIENT_WARDSRowDeleting(Me, New PATIENT_WARDSRowChangeEvent(CType(e.Row,PATIENT_WARDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemovePATIENT_WARDSRow(ByVal row As PATIENT_WARDSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PATIENT_WARDSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PATIENTSDataTable
        Inherits Global.System.Data.TypedTableBase(Of PATIENTSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPATIENTID As Global.System.Data.DataColumn
        
        Private columnKINSID As Global.System.Data.DataColumn
        
        Private columnLOCALDOCID As Global.System.Data.DataColumn
        
        Private columnFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnLASTNAME As Global.System.Data.DataColumn
        
        Private columnADDRESS As Global.System.Data.DataColumn
        
        Private columnGENDER As Global.System.Data.DataColumn
        
        Private columnMARRYSTATUS As Global.System.Data.DataColumn
        
        Private columnTEL As Global.System.Data.DataColumn
        
        Private columnDOB As Global.System.Data.DataColumn
        
        Private columnDATE_REGISTER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PATIENTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PATIENTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property KINSIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKINSID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LOCALDOCIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOCALDOCID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property GENDERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGENDER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MARRYSTATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARRYSTATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DATE_REGISTERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE_REGISTER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PATIENTSRow
            Get
                Return CType(Me.Rows(index),PATIENTSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENTSRowChanging As PATIENTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENTSRowChanged As PATIENTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENTSRowDeleting As PATIENTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PATIENTSRowDeleted As PATIENTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddPATIENTSRow(ByVal row As PATIENTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddPATIENTSRow(ByVal PATIENTID As String, ByVal parentPATIENT_KINSRowBySYS_C0013316 As PATIENT_KINSRow, ByVal parentLOCALDOCTORSRowBySYS_C0013317 As LOCALDOCTORSRow, ByVal FIRSTNAME As String, ByVal LASTNAME As String, ByVal ADDRESS As String, ByVal GENDER As String, ByVal MARRYSTATUS As String, ByVal TEL As Long, ByVal DOB As Date, ByVal DATE_REGISTER As Date) As PATIENTSRow
            Dim rowPATIENTSRow As PATIENTSRow = CType(Me.NewRow,PATIENTSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PATIENTID, Nothing, Nothing, FIRSTNAME, LASTNAME, ADDRESS, GENDER, MARRYSTATUS, TEL, DOB, DATE_REGISTER}
            If (Not (parentPATIENT_KINSRowBySYS_C0013316) Is Nothing) Then
                columnValuesArray(2) = parentPATIENT_KINSRowBySYS_C0013316(1)
            End If
            If (Not (parentLOCALDOCTORSRowBySYS_C0013317) Is Nothing) Then
                columnValuesArray(3) = parentLOCALDOCTORSRowBySYS_C0013317(1)
            End If
            rowPATIENTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPATIENTSRow)
            Return rowPATIENTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByPATIENTID(ByVal PATIENTID As String) As PATIENTSRow
            Return CType(Me.Rows.Find(New Object() {PATIENTID}),PATIENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PATIENTSDataTable = CType(MyBase.Clone,PATIENTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PATIENTSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnPATIENTID = MyBase.Columns("PATIENTID")
            Me.columnKINSID = MyBase.Columns("KINSID")
            Me.columnLOCALDOCID = MyBase.Columns("LOCALDOCID")
            Me.columnFIRSTNAME = MyBase.Columns("FIRSTNAME")
            Me.columnLASTNAME = MyBase.Columns("LASTNAME")
            Me.columnADDRESS = MyBase.Columns("ADDRESS")
            Me.columnGENDER = MyBase.Columns("GENDER")
            Me.columnMARRYSTATUS = MyBase.Columns("MARRYSTATUS")
            Me.columnTEL = MyBase.Columns("TEL")
            Me.columnDOB = MyBase.Columns("DOB")
            Me.columnDATE_REGISTER = MyBase.Columns("DATE_REGISTER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPATIENTID = New Global.System.Data.DataColumn("PATIENTID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENTID)
            Me.columnKINSID = New Global.System.Data.DataColumn("KINSID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKINSID)
            Me.columnLOCALDOCID = New Global.System.Data.DataColumn("LOCALDOCID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOCALDOCID)
            Me.columnFIRSTNAME = New Global.System.Data.DataColumn("FIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIRSTNAME)
            Me.columnLASTNAME = New Global.System.Data.DataColumn("LASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTNAME)
            Me.columnADDRESS = New Global.System.Data.DataColumn("ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDRESS)
            Me.columnGENDER = New Global.System.Data.DataColumn("GENDER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGENDER)
            Me.columnMARRYSTATUS = New Global.System.Data.DataColumn("MARRYSTATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARRYSTATUS)
            Me.columnTEL = New Global.System.Data.DataColumn("TEL", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEL)
            Me.columnDOB = New Global.System.Data.DataColumn("DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOB)
            Me.columnDATE_REGISTER = New Global.System.Data.DataColumn("DATE_REGISTER", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATE_REGISTER)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPATIENTID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnPATIENTID.AllowDBNull = false
            Me.columnPATIENTID.Unique = true
            Me.columnPATIENTID.MaxLength = 41
            Me.columnKINSID.AllowDBNull = false
            Me.columnKINSID.MaxLength = 41
            Me.columnLOCALDOCID.AllowDBNull = false
            Me.columnLOCALDOCID.MaxLength = 41
            Me.columnFIRSTNAME.AllowDBNull = false
            Me.columnFIRSTNAME.MaxLength = 50
            Me.columnLASTNAME.AllowDBNull = false
            Me.columnLASTNAME.MaxLength = 50
            Me.columnADDRESS.AllowDBNull = false
            Me.columnADDRESS.MaxLength = 256
            Me.columnGENDER.AllowDBNull = false
            Me.columnGENDER.MaxLength = 30
            Me.columnMARRYSTATUS.AllowDBNull = false
            Me.columnMARRYSTATUS.MaxLength = 30
            Me.columnTEL.AllowDBNull = false
            Me.columnDOB.AllowDBNull = false
            Me.columnDATE_REGISTER.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewPATIENTSRow() As PATIENTSRow
            Return CType(Me.NewRow,PATIENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PATIENTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PATIENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PATIENTSRowChangedEvent) Is Nothing) Then
                RaiseEvent PATIENTSRowChanged(Me, New PATIENTSRowChangeEvent(CType(e.Row,PATIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PATIENTSRowChangingEvent) Is Nothing) Then
                RaiseEvent PATIENTSRowChanging(Me, New PATIENTSRowChangeEvent(CType(e.Row,PATIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PATIENTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PATIENTSRowDeleted(Me, New PATIENTSRowChangeEvent(CType(e.Row,PATIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PATIENTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PATIENTSRowDeleting(Me, New PATIENTSRowChangeEvent(CType(e.Row,PATIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemovePATIENTSRow(ByVal row As PATIENTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PATIENTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PW_PRESCRIPTSDataTable
        Inherits Global.System.Data.TypedTableBase(Of PW_PRESCRIPTSRow)
        
        Private columnMMID As Global.System.Data.DataColumn
        
        Private columnPWID As Global.System.Data.DataColumn
        
        Private columnDOCTORID As Global.System.Data.DataColumn
        
        Private columnCNID As Global.System.Data.DataColumn
        
        Private columnDOSAGE As Global.System.Data.DataColumn
        
        Private columnSTARTDATE As Global.System.Data.DataColumn
        
        Private columnENDDATE As Global.System.Data.DataColumn
        
        Private columnCREATEAT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PW_PRESCRIPTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MMIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMMID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PWIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPWID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DOCTORIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCTORID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CNIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DOSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property STARTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTARTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ENDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENDDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CREATEATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PW_PRESCRIPTSRow
            Get
                Return CType(Me.Rows(index),PW_PRESCRIPTSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PW_PRESCRIPTSRowChanging As PW_PRESCRIPTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PW_PRESCRIPTSRowChanged As PW_PRESCRIPTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PW_PRESCRIPTSRowDeleting As PW_PRESCRIPTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event PW_PRESCRIPTSRowDeleted As PW_PRESCRIPTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddPW_PRESCRIPTSRow(ByVal row As PW_PRESCRIPTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddPW_PRESCRIPTSRow(ByVal parentMED_MEDICINESRowBySYS_C0013337 As MED_MEDICINESRow, ByVal parentPATIENT_WARDSRowBySYS_C0013338 As PATIENT_WARDSRow, ByVal parentSTAFFSRowBySYS_C0013339 As STAFFSRow, ByVal parentSTAFFSRowBySYS_C0013340 As STAFFSRow, ByVal DOSAGE As Double, ByVal STARTDATE As Date, ByVal ENDDATE As Date, ByVal CREATEAT As Date) As PW_PRESCRIPTSRow
            Dim rowPW_PRESCRIPTSRow As PW_PRESCRIPTSRow = CType(Me.NewRow,PW_PRESCRIPTSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, Nothing, DOSAGE, STARTDATE, ENDDATE, CREATEAT}
            If (Not (parentMED_MEDICINESRowBySYS_C0013337) Is Nothing) Then
                columnValuesArray(0) = parentMED_MEDICINESRowBySYS_C0013337(0)
            End If
            If (Not (parentPATIENT_WARDSRowBySYS_C0013338) Is Nothing) Then
                columnValuesArray(1) = parentPATIENT_WARDSRowBySYS_C0013338(5)
            End If
            If (Not (parentSTAFFSRowBySYS_C0013339) Is Nothing) Then
                columnValuesArray(2) = parentSTAFFSRowBySYS_C0013339(2)
            End If
            If (Not (parentSTAFFSRowBySYS_C0013340) Is Nothing) Then
                columnValuesArray(3) = parentSTAFFSRowBySYS_C0013340(3)
            End If
            rowPW_PRESCRIPTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPW_PRESCRIPTSRow)
            Return rowPW_PRESCRIPTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByMMIDPWIDDOCTORIDCNID(ByVal MMID As Long, ByVal PWID As String, ByVal DOCTORID As String, ByVal CNID As String) As PW_PRESCRIPTSRow
            Return CType(Me.Rows.Find(New Object() {MMID, PWID, DOCTORID, CNID}),PW_PRESCRIPTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PW_PRESCRIPTSDataTable = CType(MyBase.Clone,PW_PRESCRIPTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PW_PRESCRIPTSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMMID = MyBase.Columns("MMID")
            Me.columnPWID = MyBase.Columns("PWID")
            Me.columnDOCTORID = MyBase.Columns("DOCTORID")
            Me.columnCNID = MyBase.Columns("CNID")
            Me.columnDOSAGE = MyBase.Columns("DOSAGE")
            Me.columnSTARTDATE = MyBase.Columns("STARTDATE")
            Me.columnENDDATE = MyBase.Columns("ENDDATE")
            Me.columnCREATEAT = MyBase.Columns("CREATEAT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMMID = New Global.System.Data.DataColumn("MMID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMMID)
            Me.columnPWID = New Global.System.Data.DataColumn("PWID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPWID)
            Me.columnDOCTORID = New Global.System.Data.DataColumn("DOCTORID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCTORID)
            Me.columnCNID = New Global.System.Data.DataColumn("CNID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNID)
            Me.columnDOSAGE = New Global.System.Data.DataColumn("DOSAGE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOSAGE)
            Me.columnSTARTDATE = New Global.System.Data.DataColumn("STARTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTARTDATE)
            Me.columnENDDATE = New Global.System.Data.DataColumn("ENDDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENDDATE)
            Me.columnCREATEAT = New Global.System.Data.DataColumn("CREATEAT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEAT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMMID, Me.columnPWID, Me.columnDOCTORID, Me.columnCNID}, true))
            Me.columnMMID.AllowDBNull = false
            Me.columnPWID.AllowDBNull = false
            Me.columnPWID.MaxLength = 42
            Me.columnDOCTORID.AllowDBNull = false
            Me.columnDOCTORID.MaxLength = 10
            Me.columnCNID.AllowDBNull = false
            Me.columnCNID.MaxLength = 10
            Me.columnDOSAGE.AllowDBNull = false
            Me.columnSTARTDATE.AllowDBNull = false
            Me.columnCREATEAT.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewPW_PRESCRIPTSRow() As PW_PRESCRIPTSRow
            Return CType(Me.NewRow,PW_PRESCRIPTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PW_PRESCRIPTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PW_PRESCRIPTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PW_PRESCRIPTSRowChangedEvent) Is Nothing) Then
                RaiseEvent PW_PRESCRIPTSRowChanged(Me, New PW_PRESCRIPTSRowChangeEvent(CType(e.Row,PW_PRESCRIPTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PW_PRESCRIPTSRowChangingEvent) Is Nothing) Then
                RaiseEvent PW_PRESCRIPTSRowChanging(Me, New PW_PRESCRIPTSRowChangeEvent(CType(e.Row,PW_PRESCRIPTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PW_PRESCRIPTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PW_PRESCRIPTSRowDeleted(Me, New PW_PRESCRIPTSRowChangeEvent(CType(e.Row,PW_PRESCRIPTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PW_PRESCRIPTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PW_PRESCRIPTSRowDeleting(Me, New PW_PRESCRIPTSRowChangeEvent(CType(e.Row,PW_PRESCRIPTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemovePW_PRESCRIPTSRow(ByVal row As PW_PRESCRIPTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PW_PRESCRIPTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SHIFTSDataTable
        Inherits Global.System.Data.TypedTableBase(Of SHIFTSRow)
        
        Private columnSHIFTID As Global.System.Data.DataColumn
        
        Private columnSHIFTNAME As Global.System.Data.DataColumn
        
        Private columnSTARTTIME As Global.System.Data.DataColumn
        
        Private columnENDTIME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SHIFTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SHIFTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHIFTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SHIFTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHIFTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property STARTTIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTARTTIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ENDTIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENDTIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SHIFTSRow
            Get
                Return CType(Me.Rows(index),SHIFTSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SHIFTSRowChanging As SHIFTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SHIFTSRowChanged As SHIFTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SHIFTSRowDeleting As SHIFTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SHIFTSRowDeleted As SHIFTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddSHIFTSRow(ByVal row As SHIFTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddSHIFTSRow(ByVal SHIFTID As Long, ByVal SHIFTNAME As String, ByVal STARTTIME As Date, ByVal ENDTIME As Date) As SHIFTSRow
            Dim rowSHIFTSRow As SHIFTSRow = CType(Me.NewRow,SHIFTSRow)
            Dim columnValuesArray() As Object = New Object() {SHIFTID, SHIFTNAME, STARTTIME, ENDTIME}
            rowSHIFTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSHIFTSRow)
            Return rowSHIFTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindBySHIFTID(ByVal SHIFTID As Long) As SHIFTSRow
            Return CType(Me.Rows.Find(New Object() {SHIFTID}),SHIFTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SHIFTSDataTable = CType(MyBase.Clone,SHIFTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SHIFTSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSHIFTID = MyBase.Columns("SHIFTID")
            Me.columnSHIFTNAME = MyBase.Columns("SHIFTNAME")
            Me.columnSTARTTIME = MyBase.Columns("STARTTIME")
            Me.columnENDTIME = MyBase.Columns("ENDTIME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSHIFTID = New Global.System.Data.DataColumn("SHIFTID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHIFTID)
            Me.columnSHIFTNAME = New Global.System.Data.DataColumn("SHIFTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHIFTNAME)
            Me.columnSTARTTIME = New Global.System.Data.DataColumn("STARTTIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTARTTIME)
            Me.columnENDTIME = New Global.System.Data.DataColumn("ENDTIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENDTIME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSHIFTID}, true))
            Me.columnSHIFTID.AllowDBNull = false
            Me.columnSHIFTID.Unique = true
            Me.columnSHIFTNAME.AllowDBNull = false
            Me.columnSHIFTNAME.MaxLength = 50
            Me.columnSTARTTIME.AllowDBNull = false
            Me.columnENDTIME.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewSHIFTSRow() As SHIFTSRow
            Return CType(Me.NewRow,SHIFTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SHIFTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SHIFTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SHIFTSRowChangedEvent) Is Nothing) Then
                RaiseEvent SHIFTSRowChanged(Me, New SHIFTSRowChangeEvent(CType(e.Row,SHIFTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SHIFTSRowChangingEvent) Is Nothing) Then
                RaiseEvent SHIFTSRowChanging(Me, New SHIFTSRowChangeEvent(CType(e.Row,SHIFTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SHIFTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent SHIFTSRowDeleted(Me, New SHIFTSRowChangeEvent(CType(e.Row,SHIFTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SHIFTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent SHIFTSRowDeleting(Me, New SHIFTSRowChangeEvent(CType(e.Row,SHIFTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveSHIFTSRow(ByVal row As SHIFTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SHIFTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class STAFF_EXPERIENCESDataTable
        Inherits Global.System.Data.TypedTableBase(Of STAFF_EXPERIENCESRow)
        
        Private columnSTAFFID As Global.System.Data.DataColumn
        
        Private columnORGANIZATION As Global.System.Data.DataColumn
        
        Private columnPOSITION As Global.System.Data.DataColumn
        
        Private columnSTARTDATE As Global.System.Data.DataColumn
        
        Private columnENDDATE As Global.System.Data.DataColumn
        
        Private columnEXPID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "STAFF_EXPERIENCES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property STAFFIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTAFFID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ORGANIZATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORGANIZATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property POSITIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSITION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property STARTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTARTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ENDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENDDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property EXPIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As STAFF_EXPERIENCESRow
            Get
                Return CType(Me.Rows(index),STAFF_EXPERIENCESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event STAFF_EXPERIENCESRowChanging As STAFF_EXPERIENCESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event STAFF_EXPERIENCESRowChanged As STAFF_EXPERIENCESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event STAFF_EXPERIENCESRowDeleting As STAFF_EXPERIENCESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event STAFF_EXPERIENCESRowDeleted As STAFF_EXPERIENCESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddSTAFF_EXPERIENCESRow(ByVal row As STAFF_EXPERIENCESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddSTAFF_EXPERIENCESRow(ByVal parentSTAFFSRowBySYS_C0013314 As STAFFSRow, ByVal ORGANIZATION As String, ByVal POSITION As String, ByVal STARTDATE As Date, ByVal ENDDATE As Date) As STAFF_EXPERIENCESRow
            Dim rowSTAFF_EXPERIENCESRow As STAFF_EXPERIENCESRow = CType(Me.NewRow,STAFF_EXPERIENCESRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ORGANIZATION, POSITION, STARTDATE, ENDDATE, Nothing}
            If (Not (parentSTAFFSRowBySYS_C0013314) Is Nothing) Then
                columnValuesArray(0) = parentSTAFFSRowBySYS_C0013314(1)
            End If
            rowSTAFF_EXPERIENCESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSTAFF_EXPERIENCESRow)
            Return rowSTAFF_EXPERIENCESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindBySTAFFIDSTARTDATEEXPID(ByVal STAFFID As String, ByVal STARTDATE As Date, ByVal EXPID As Decimal) As STAFF_EXPERIENCESRow
            Return CType(Me.Rows.Find(New Object() {STAFFID, STARTDATE, EXPID}),STAFF_EXPERIENCESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As STAFF_EXPERIENCESDataTable = CType(MyBase.Clone,STAFF_EXPERIENCESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New STAFF_EXPERIENCESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSTAFFID = MyBase.Columns("STAFFID")
            Me.columnORGANIZATION = MyBase.Columns("ORGANIZATION")
            Me.columnPOSITION = MyBase.Columns("POSITION")
            Me.columnSTARTDATE = MyBase.Columns("STARTDATE")
            Me.columnENDDATE = MyBase.Columns("ENDDATE")
            Me.columnEXPID = MyBase.Columns("EXPID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSTAFFID = New Global.System.Data.DataColumn("STAFFID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTAFFID)
            Me.columnORGANIZATION = New Global.System.Data.DataColumn("ORGANIZATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORGANIZATION)
            Me.columnPOSITION = New Global.System.Data.DataColumn("POSITION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSITION)
            Me.columnSTARTDATE = New Global.System.Data.DataColumn("STARTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTARTDATE)
            Me.columnENDDATE = New Global.System.Data.DataColumn("ENDDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENDDATE)
            Me.columnEXPID = New Global.System.Data.DataColumn("EXPID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSTAFFID, Me.columnSTARTDATE, Me.columnEXPID}, true))
            Me.columnSTAFFID.AllowDBNull = false
            Me.columnSTAFFID.MaxLength = 41
            Me.columnORGANIZATION.AllowDBNull = false
            Me.columnORGANIZATION.MaxLength = 100
            Me.columnPOSITION.AllowDBNull = false
            Me.columnPOSITION.MaxLength = 50
            Me.columnSTARTDATE.AllowDBNull = false
            Me.columnENDDATE.AllowDBNull = false
            Me.columnEXPID.AutoIncrement = true
            Me.columnEXPID.AutoIncrementSeed = -1
            Me.columnEXPID.AutoIncrementStep = -1
            Me.columnEXPID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewSTAFF_EXPERIENCESRow() As STAFF_EXPERIENCESRow
            Return CType(Me.NewRow,STAFF_EXPERIENCESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New STAFF_EXPERIENCESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(STAFF_EXPERIENCESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STAFF_EXPERIENCESRowChangedEvent) Is Nothing) Then
                RaiseEvent STAFF_EXPERIENCESRowChanged(Me, New STAFF_EXPERIENCESRowChangeEvent(CType(e.Row,STAFF_EXPERIENCESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STAFF_EXPERIENCESRowChangingEvent) Is Nothing) Then
                RaiseEvent STAFF_EXPERIENCESRowChanging(Me, New STAFF_EXPERIENCESRowChangeEvent(CType(e.Row,STAFF_EXPERIENCESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STAFF_EXPERIENCESRowDeletedEvent) Is Nothing) Then
                RaiseEvent STAFF_EXPERIENCESRowDeleted(Me, New STAFF_EXPERIENCESRowChangeEvent(CType(e.Row,STAFF_EXPERIENCESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STAFF_EXPERIENCESRowDeletingEvent) Is Nothing) Then
                RaiseEvent STAFF_EXPERIENCESRowDeleting(Me, New STAFF_EXPERIENCESRowChangeEvent(CType(e.Row,STAFF_EXPERIENCESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveSTAFF_EXPERIENCESRow(ByVal row As STAFF_EXPERIENCESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "STAFF_EXPERIENCESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class STAFF_QUALIFICATESDataTable
        Inherits Global.System.Data.TypedTableBase(Of STAFF_QUALIFICATESRow)
        
        Private columnSTAFFID As Global.System.Data.DataColumn
        
        Private columnTYPE As Global.System.Data.DataColumn
        
        Private columnDATES As Global.System.Data.DataColumn
        
        Private columnMAJOR As Global.System.Data.DataColumn
        
        Private columnQUALID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "STAFF_QUALIFICATES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property STAFFIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTAFFID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DATESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MAJORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAJOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property QUALIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQUALID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As STAFF_QUALIFICATESRow
            Get
                Return CType(Me.Rows(index),STAFF_QUALIFICATESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event STAFF_QUALIFICATESRowChanging As STAFF_QUALIFICATESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event STAFF_QUALIFICATESRowChanged As STAFF_QUALIFICATESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event STAFF_QUALIFICATESRowDeleting As STAFF_QUALIFICATESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event STAFF_QUALIFICATESRowDeleted As STAFF_QUALIFICATESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddSTAFF_QUALIFICATESRow(ByVal row As STAFF_QUALIFICATESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddSTAFF_QUALIFICATESRow(ByVal parentSTAFFSRowBySYS_C0013315 As STAFFSRow, ByVal TYPE As String, ByVal DATES As Date, ByVal MAJOR As String) As STAFF_QUALIFICATESRow
            Dim rowSTAFF_QUALIFICATESRow As STAFF_QUALIFICATESRow = CType(Me.NewRow,STAFF_QUALIFICATESRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TYPE, DATES, MAJOR, Nothing}
            If (Not (parentSTAFFSRowBySYS_C0013315) Is Nothing) Then
                columnValuesArray(0) = parentSTAFFSRowBySYS_C0013315(1)
            End If
            rowSTAFF_QUALIFICATESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSTAFF_QUALIFICATESRow)
            Return rowSTAFF_QUALIFICATESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindBySTAFFIDDATESQUALID(ByVal STAFFID As String, ByVal DATES As Date, ByVal QUALID As Decimal) As STAFF_QUALIFICATESRow
            Return CType(Me.Rows.Find(New Object() {STAFFID, DATES, QUALID}),STAFF_QUALIFICATESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As STAFF_QUALIFICATESDataTable = CType(MyBase.Clone,STAFF_QUALIFICATESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New STAFF_QUALIFICATESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSTAFFID = MyBase.Columns("STAFFID")
            Me.columnTYPE = MyBase.Columns("TYPE")
            Me.columnDATES = MyBase.Columns("DATES")
            Me.columnMAJOR = MyBase.Columns("MAJOR")
            Me.columnQUALID = MyBase.Columns("QUALID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSTAFFID = New Global.System.Data.DataColumn("STAFFID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTAFFID)
            Me.columnTYPE = New Global.System.Data.DataColumn("TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTYPE)
            Me.columnDATES = New Global.System.Data.DataColumn("DATES", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATES)
            Me.columnMAJOR = New Global.System.Data.DataColumn("MAJOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAJOR)
            Me.columnQUALID = New Global.System.Data.DataColumn("QUALID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQUALID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSTAFFID, Me.columnDATES, Me.columnQUALID}, true))
            Me.columnSTAFFID.AllowDBNull = false
            Me.columnSTAFFID.MaxLength = 41
            Me.columnTYPE.AllowDBNull = false
            Me.columnTYPE.MaxLength = 50
            Me.columnDATES.AllowDBNull = false
            Me.columnMAJOR.AllowDBNull = false
            Me.columnMAJOR.MaxLength = 50
            Me.columnQUALID.AutoIncrement = true
            Me.columnQUALID.AutoIncrementSeed = -1
            Me.columnQUALID.AutoIncrementStep = -1
            Me.columnQUALID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewSTAFF_QUALIFICATESRow() As STAFF_QUALIFICATESRow
            Return CType(Me.NewRow,STAFF_QUALIFICATESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New STAFF_QUALIFICATESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(STAFF_QUALIFICATESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STAFF_QUALIFICATESRowChangedEvent) Is Nothing) Then
                RaiseEvent STAFF_QUALIFICATESRowChanged(Me, New STAFF_QUALIFICATESRowChangeEvent(CType(e.Row,STAFF_QUALIFICATESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STAFF_QUALIFICATESRowChangingEvent) Is Nothing) Then
                RaiseEvent STAFF_QUALIFICATESRowChanging(Me, New STAFF_QUALIFICATESRowChangeEvent(CType(e.Row,STAFF_QUALIFICATESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STAFF_QUALIFICATESRowDeletedEvent) Is Nothing) Then
                RaiseEvent STAFF_QUALIFICATESRowDeleted(Me, New STAFF_QUALIFICATESRowChangeEvent(CType(e.Row,STAFF_QUALIFICATESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STAFF_QUALIFICATESRowDeletingEvent) Is Nothing) Then
                RaiseEvent STAFF_QUALIFICATESRowDeleting(Me, New STAFF_QUALIFICATESRowChangeEvent(CType(e.Row,STAFF_QUALIFICATESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveSTAFF_QUALIFICATESRow(ByVal row As STAFF_QUALIFICATESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "STAFF_QUALIFICATESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class STAFFSDataTable
        Inherits Global.System.Data.TypedTableBase(Of STAFFSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnSTAFFID As Global.System.Data.DataColumn
        
        Private columnDOCTORID As Global.System.Data.DataColumn
        
        Private columnCNID As Global.System.Data.DataColumn
        
        Private columnMDID As Global.System.Data.DataColumn
        
        Private columnFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnLASTNAME As Global.System.Data.DataColumn
        
        Private columnADDRESS As Global.System.Data.DataColumn
        
        Private columnTEL As Global.System.Data.DataColumn
        
        Private columnDOB As Global.System.Data.DataColumn
        
        Private columnNIN As Global.System.Data.DataColumn
        
        Private columnPOSITION As Global.System.Data.DataColumn
        
        Private columnSALARY As Global.System.Data.DataColumn
        
        Private columnSALARYSCALE As Global.System.Data.DataColumn
        
        Private columnHOURSWEEK As Global.System.Data.DataColumn
        
        Private columnCONTACTTYPE As Global.System.Data.DataColumn
        
        Private columnPAIDTYPE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "STAFFS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property STAFFIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTAFFID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DOCTORIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCTORID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CNIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MDIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMDID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property POSITIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSITION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SALARYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALARY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SALARYSCALEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALARYSCALE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property HOURSWEEKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHOURSWEEK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CONTACTTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTACTTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PAIDTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAIDTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As STAFFSRow
            Get
                Return CType(Me.Rows(index),STAFFSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event STAFFSRowChanging As STAFFSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event STAFFSRowChanged As STAFFSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event STAFFSRowDeleting As STAFFSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event STAFFSRowDeleted As STAFFSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddSTAFFSRow(ByVal row As STAFFSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddSTAFFSRow( _
                    ByVal STAFFID As String,  _
                    ByVal DOCTORID As String,  _
                    ByVal CNID As String,  _
                    ByVal MDID As String,  _
                    ByVal FIRSTNAME As String,  _
                    ByVal LASTNAME As String,  _
                    ByVal ADDRESS As String,  _
                    ByVal TEL As Long,  _
                    ByVal DOB As Date,  _
                    ByVal NIN As String,  _
                    ByVal POSITION As String,  _
                    ByVal SALARY As Double,  _
                    ByVal SALARYSCALE As Double,  _
                    ByVal HOURSWEEK As Date,  _
                    ByVal CONTACTTYPE As String,  _
                    ByVal PAIDTYPE As String) As STAFFSRow
            Dim rowSTAFFSRow As STAFFSRow = CType(Me.NewRow,STAFFSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, STAFFID, DOCTORID, CNID, MDID, FIRSTNAME, LASTNAME, ADDRESS, TEL, DOB, NIN, POSITION, SALARY, SALARYSCALE, HOURSWEEK, CONTACTTYPE, PAIDTYPE}
            rowSTAFFSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSTAFFSRow)
            Return rowSTAFFSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindBySTAFFID(ByVal STAFFID As String) As STAFFSRow
            Return CType(Me.Rows.Find(New Object() {STAFFID}),STAFFSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As STAFFSDataTable = CType(MyBase.Clone,STAFFSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New STAFFSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnSTAFFID = MyBase.Columns("STAFFID")
            Me.columnDOCTORID = MyBase.Columns("DOCTORID")
            Me.columnCNID = MyBase.Columns("CNID")
            Me.columnMDID = MyBase.Columns("MDID")
            Me.columnFIRSTNAME = MyBase.Columns("FIRSTNAME")
            Me.columnLASTNAME = MyBase.Columns("LASTNAME")
            Me.columnADDRESS = MyBase.Columns("ADDRESS")
            Me.columnTEL = MyBase.Columns("TEL")
            Me.columnDOB = MyBase.Columns("DOB")
            Me.columnNIN = MyBase.Columns("NIN")
            Me.columnPOSITION = MyBase.Columns("POSITION")
            Me.columnSALARY = MyBase.Columns("SALARY")
            Me.columnSALARYSCALE = MyBase.Columns("SALARYSCALE")
            Me.columnHOURSWEEK = MyBase.Columns("HOURSWEEK")
            Me.columnCONTACTTYPE = MyBase.Columns("CONTACTTYPE")
            Me.columnPAIDTYPE = MyBase.Columns("PAIDTYPE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnSTAFFID = New Global.System.Data.DataColumn("STAFFID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTAFFID)
            Me.columnDOCTORID = New Global.System.Data.DataColumn("DOCTORID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCTORID)
            Me.columnCNID = New Global.System.Data.DataColumn("CNID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNID)
            Me.columnMDID = New Global.System.Data.DataColumn("MDID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMDID)
            Me.columnFIRSTNAME = New Global.System.Data.DataColumn("FIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIRSTNAME)
            Me.columnLASTNAME = New Global.System.Data.DataColumn("LASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTNAME)
            Me.columnADDRESS = New Global.System.Data.DataColumn("ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDRESS)
            Me.columnTEL = New Global.System.Data.DataColumn("TEL", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEL)
            Me.columnDOB = New Global.System.Data.DataColumn("DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOB)
            Me.columnNIN = New Global.System.Data.DataColumn("NIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIN)
            Me.columnPOSITION = New Global.System.Data.DataColumn("POSITION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSITION)
            Me.columnSALARY = New Global.System.Data.DataColumn("SALARY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALARY)
            Me.columnSALARYSCALE = New Global.System.Data.DataColumn("SALARYSCALE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALARYSCALE)
            Me.columnHOURSWEEK = New Global.System.Data.DataColumn("HOURSWEEK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHOURSWEEK)
            Me.columnCONTACTTYPE = New Global.System.Data.DataColumn("CONTACTTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTACTTYPE)
            Me.columnPAIDTYPE = New Global.System.Data.DataColumn("PAIDTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAIDTYPE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSTAFFID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnSTAFFID.AllowDBNull = false
            Me.columnSTAFFID.Unique = true
            Me.columnSTAFFID.MaxLength = 41
            Me.columnDOCTORID.MaxLength = 10
            Me.columnCNID.MaxLength = 10
            Me.columnMDID.MaxLength = 10
            Me.columnFIRSTNAME.AllowDBNull = false
            Me.columnFIRSTNAME.MaxLength = 50
            Me.columnLASTNAME.AllowDBNull = false
            Me.columnLASTNAME.MaxLength = 50
            Me.columnADDRESS.MaxLength = 256
            Me.columnNIN.MaxLength = 20
            Me.columnPOSITION.MaxLength = 50
            Me.columnCONTACTTYPE.MaxLength = 30
            Me.columnPAIDTYPE.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewSTAFFSRow() As STAFFSRow
            Return CType(Me.NewRow,STAFFSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New STAFFSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(STAFFSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STAFFSRowChangedEvent) Is Nothing) Then
                RaiseEvent STAFFSRowChanged(Me, New STAFFSRowChangeEvent(CType(e.Row,STAFFSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STAFFSRowChangingEvent) Is Nothing) Then
                RaiseEvent STAFFSRowChanging(Me, New STAFFSRowChangeEvent(CType(e.Row,STAFFSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STAFFSRowDeletedEvent) Is Nothing) Then
                RaiseEvent STAFFSRowDeleted(Me, New STAFFSRowChangeEvent(CType(e.Row,STAFFSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STAFFSRowDeletingEvent) Is Nothing) Then
                RaiseEvent STAFFSRowDeleting(Me, New STAFFSRowChangeEvent(CType(e.Row,STAFFSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveSTAFFSRow(ByVal row As STAFFSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "STAFFSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SUPPILERSDataTable
        Inherits Global.System.Data.TypedTableBase(Of SUPPILERSRow)
        
        Private columnSUPPLIERID As Global.System.Data.DataColumn
        
        Private columnMDID As Global.System.Data.DataColumn
        
        Private columnNAME As Global.System.Data.DataColumn
        
        Private columnADDRESS As Global.System.Data.DataColumn
        
        Private columnTEL As Global.System.Data.DataColumn
        
        Private columnFAX As Global.System.Data.DataColumn
        
        Private columnCREATEAT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SUPPILERS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SUPPLIERIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLIERID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MDIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMDID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CREATEATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SUPPILERSRow
            Get
                Return CType(Me.Rows(index),SUPPILERSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SUPPILERSRowChanging As SUPPILERSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SUPPILERSRowChanged As SUPPILERSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SUPPILERSRowDeleting As SUPPILERSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event SUPPILERSRowDeleted As SUPPILERSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddSUPPILERSRow(ByVal row As SUPPILERSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddSUPPILERSRow(ByVal SUPPLIERID As Long, ByVal parentSTAFFSRowBySYS_C0013334 As STAFFSRow, ByVal NAME As String, ByVal ADDRESS As String, ByVal TEL As Long, ByVal FAX As String, ByVal CREATEAT As Date) As SUPPILERSRow
            Dim rowSUPPILERSRow As SUPPILERSRow = CType(Me.NewRow,SUPPILERSRow)
            Dim columnValuesArray() As Object = New Object() {SUPPLIERID, Nothing, NAME, ADDRESS, TEL, FAX, CREATEAT}
            If (Not (parentSTAFFSRowBySYS_C0013334) Is Nothing) Then
                columnValuesArray(1) = parentSTAFFSRowBySYS_C0013334(4)
            End If
            rowSUPPILERSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSUPPILERSRow)
            Return rowSUPPILERSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindBySUPPLIERID(ByVal SUPPLIERID As Long) As SUPPILERSRow
            Return CType(Me.Rows.Find(New Object() {SUPPLIERID}),SUPPILERSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SUPPILERSDataTable = CType(MyBase.Clone,SUPPILERSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SUPPILERSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSUPPLIERID = MyBase.Columns("SUPPLIERID")
            Me.columnMDID = MyBase.Columns("MDID")
            Me.columnNAME = MyBase.Columns("NAME")
            Me.columnADDRESS = MyBase.Columns("ADDRESS")
            Me.columnTEL = MyBase.Columns("TEL")
            Me.columnFAX = MyBase.Columns("FAX")
            Me.columnCREATEAT = MyBase.Columns("CREATEAT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSUPPLIERID = New Global.System.Data.DataColumn("SUPPLIERID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLIERID)
            Me.columnMDID = New Global.System.Data.DataColumn("MDID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMDID)
            Me.columnNAME = New Global.System.Data.DataColumn("NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME)
            Me.columnADDRESS = New Global.System.Data.DataColumn("ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDRESS)
            Me.columnTEL = New Global.System.Data.DataColumn("TEL", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEL)
            Me.columnFAX = New Global.System.Data.DataColumn("FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAX)
            Me.columnCREATEAT = New Global.System.Data.DataColumn("CREATEAT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEAT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSUPPLIERID}, true))
            Me.columnSUPPLIERID.AllowDBNull = false
            Me.columnSUPPLIERID.Unique = true
            Me.columnMDID.MaxLength = 10
            Me.columnNAME.MaxLength = 50
            Me.columnADDRESS.MaxLength = 256
            Me.columnFAX.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewSUPPILERSRow() As SUPPILERSRow
            Return CType(Me.NewRow,SUPPILERSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SUPPILERSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SUPPILERSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SUPPILERSRowChangedEvent) Is Nothing) Then
                RaiseEvent SUPPILERSRowChanged(Me, New SUPPILERSRowChangeEvent(CType(e.Row,SUPPILERSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SUPPILERSRowChangingEvent) Is Nothing) Then
                RaiseEvent SUPPILERSRowChanging(Me, New SUPPILERSRowChangeEvent(CType(e.Row,SUPPILERSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SUPPILERSRowDeletedEvent) Is Nothing) Then
                RaiseEvent SUPPILERSRowDeleted(Me, New SUPPILERSRowChangeEvent(CType(e.Row,SUPPILERSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SUPPILERSRowDeletingEvent) Is Nothing) Then
                RaiseEvent SUPPILERSRowDeleting(Me, New SUPPILERSRowChangeEvent(CType(e.Row,SUPPILERSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveSUPPILERSRow(ByVal row As SUPPILERSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SUPPILERSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WARD_STAFFSDataTable
        Inherits Global.System.Data.TypedTableBase(Of WARD_STAFFSRow)
        
        Private columnWSID As Global.System.Data.DataColumn
        
        Private columnSHIFTID As Global.System.Data.DataColumn
        
        Private columnSTAFFID As Global.System.Data.DataColumn
        
        Private columnWARDID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WARD_STAFFS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property WSIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWSID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SHIFTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHIFTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property STAFFIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTAFFID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property WARDIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARDID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WARD_STAFFSRow
            Get
                Return CType(Me.Rows(index),WARD_STAFFSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event WARD_STAFFSRowChanging As WARD_STAFFSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event WARD_STAFFSRowChanged As WARD_STAFFSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event WARD_STAFFSRowDeleting As WARD_STAFFSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event WARD_STAFFSRowDeleted As WARD_STAFFSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddWARD_STAFFSRow(ByVal row As WARD_STAFFSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddWARD_STAFFSRow(ByVal WSID As Long, ByVal parentSHIFTSRowBySYS_C0013319 As SHIFTSRow, ByVal parentSTAFFSRowBySYS_C0013320 As STAFFSRow, ByVal parentWARDSRowBySYS_C0013321 As WARDSRow) As WARD_STAFFSRow
            Dim rowWARD_STAFFSRow As WARD_STAFFSRow = CType(Me.NewRow,WARD_STAFFSRow)
            Dim columnValuesArray() As Object = New Object() {WSID, Nothing, Nothing, Nothing}
            If (Not (parentSHIFTSRowBySYS_C0013319) Is Nothing) Then
                columnValuesArray(1) = parentSHIFTSRowBySYS_C0013319(0)
            End If
            If (Not (parentSTAFFSRowBySYS_C0013320) Is Nothing) Then
                columnValuesArray(2) = parentSTAFFSRowBySYS_C0013320(1)
            End If
            If (Not (parentWARDSRowBySYS_C0013321) Is Nothing) Then
                columnValuesArray(3) = parentWARDSRowBySYS_C0013321(1)
            End If
            rowWARD_STAFFSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWARD_STAFFSRow)
            Return rowWARD_STAFFSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByWSID(ByVal WSID As Long) As WARD_STAFFSRow
            Return CType(Me.Rows.Find(New Object() {WSID}),WARD_STAFFSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WARD_STAFFSDataTable = CType(MyBase.Clone,WARD_STAFFSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WARD_STAFFSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnWSID = MyBase.Columns("WSID")
            Me.columnSHIFTID = MyBase.Columns("SHIFTID")
            Me.columnSTAFFID = MyBase.Columns("STAFFID")
            Me.columnWARDID = MyBase.Columns("WARDID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnWSID = New Global.System.Data.DataColumn("WSID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWSID)
            Me.columnSHIFTID = New Global.System.Data.DataColumn("SHIFTID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHIFTID)
            Me.columnSTAFFID = New Global.System.Data.DataColumn("STAFFID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTAFFID)
            Me.columnWARDID = New Global.System.Data.DataColumn("WARDID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARDID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnWSID}, true))
            Me.columnWSID.AllowDBNull = false
            Me.columnWSID.Unique = true
            Me.columnSHIFTID.AllowDBNull = false
            Me.columnSTAFFID.AllowDBNull = false
            Me.columnSTAFFID.MaxLength = 41
            Me.columnWARDID.AllowDBNull = false
            Me.columnWARDID.MaxLength = 41
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewWARD_STAFFSRow() As WARD_STAFFSRow
            Return CType(Me.NewRow,WARD_STAFFSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WARD_STAFFSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WARD_STAFFSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WARD_STAFFSRowChangedEvent) Is Nothing) Then
                RaiseEvent WARD_STAFFSRowChanged(Me, New WARD_STAFFSRowChangeEvent(CType(e.Row,WARD_STAFFSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WARD_STAFFSRowChangingEvent) Is Nothing) Then
                RaiseEvent WARD_STAFFSRowChanging(Me, New WARD_STAFFSRowChangeEvent(CType(e.Row,WARD_STAFFSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WARD_STAFFSRowDeletedEvent) Is Nothing) Then
                RaiseEvent WARD_STAFFSRowDeleted(Me, New WARD_STAFFSRowChangeEvent(CType(e.Row,WARD_STAFFSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WARD_STAFFSRowDeletingEvent) Is Nothing) Then
                RaiseEvent WARD_STAFFSRowDeleting(Me, New WARD_STAFFSRowChangeEvent(CType(e.Row,WARD_STAFFSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveWARD_STAFFSRow(ByVal row As WARD_STAFFSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WARD_STAFFSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WARDSDataTable
        Inherits Global.System.Data.TypedTableBase(Of WARDSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnWARDID As Global.System.Data.DataColumn
        
        Private columnWARDNAME As Global.System.Data.DataColumn
        
        Private columnWARDLOCATION As Global.System.Data.DataColumn
        
        Private columnWARDTEL As Global.System.Data.DataColumn
        
        Private columnTOTALBED As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WARDS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property WARDIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARDID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property WARDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property WARDLOCATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARDLOCATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property WARDTELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARDTEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TOTALBEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALBED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WARDSRow
            Get
                Return CType(Me.Rows(index),WARDSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event WARDSRowChanging As WARDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event WARDSRowChanged As WARDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event WARDSRowDeleting As WARDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event WARDSRowDeleted As WARDSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddWARDSRow(ByVal row As WARDSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddWARDSRow(ByVal WARDID As String, ByVal WARDNAME As String, ByVal WARDLOCATION As String, ByVal WARDTEL As Long, ByVal TOTALBED As Long) As WARDSRow
            Dim rowWARDSRow As WARDSRow = CType(Me.NewRow,WARDSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, WARDID, WARDNAME, WARDLOCATION, WARDTEL, TOTALBED}
            rowWARDSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWARDSRow)
            Return rowWARDSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByWARDID(ByVal WARDID As String) As WARDSRow
            Return CType(Me.Rows.Find(New Object() {WARDID}),WARDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WARDSDataTable = CType(MyBase.Clone,WARDSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WARDSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnWARDID = MyBase.Columns("WARDID")
            Me.columnWARDNAME = MyBase.Columns("WARDNAME")
            Me.columnWARDLOCATION = MyBase.Columns("WARDLOCATION")
            Me.columnWARDTEL = MyBase.Columns("WARDTEL")
            Me.columnTOTALBED = MyBase.Columns("TOTALBED")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnWARDID = New Global.System.Data.DataColumn("WARDID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARDID)
            Me.columnWARDNAME = New Global.System.Data.DataColumn("WARDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARDNAME)
            Me.columnWARDLOCATION = New Global.System.Data.DataColumn("WARDLOCATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARDLOCATION)
            Me.columnWARDTEL = New Global.System.Data.DataColumn("WARDTEL", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARDTEL)
            Me.columnTOTALBED = New Global.System.Data.DataColumn("TOTALBED", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALBED)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnWARDID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnWARDID.AllowDBNull = false
            Me.columnWARDID.Unique = true
            Me.columnWARDID.MaxLength = 41
            Me.columnWARDNAME.MaxLength = 50
            Me.columnWARDLOCATION.MaxLength = 256
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewWARDSRow() As WARDSRow
            Return CType(Me.NewRow,WARDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WARDSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WARDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WARDSRowChangedEvent) Is Nothing) Then
                RaiseEvent WARDSRowChanged(Me, New WARDSRowChangeEvent(CType(e.Row,WARDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WARDSRowChangingEvent) Is Nothing) Then
                RaiseEvent WARDSRowChanging(Me, New WARDSRowChangeEvent(CType(e.Row,WARDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WARDSRowDeletedEvent) Is Nothing) Then
                RaiseEvent WARDSRowDeleted(Me, New WARDSRowChangeEvent(CType(e.Row,WARDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WARDSRowDeletingEvent) Is Nothing) Then
                RaiseEvent WARDSRowDeleting(Me, New WARDSRowChangeEvent(CType(e.Row,WARDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveWARDSRow(ByVal row As WARDSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WARDSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WARD_REQUESTSDataTable
        Inherits Global.System.Data.TypedTableBase(Of WARD_REQUESTSRow)
        
        Private columnREQID As Global.System.Data.DataColumn
        
        Private columnSTAFFID As Global.System.Data.DataColumn
        
        Private columnCNID As Global.System.Data.DataColumn
        
        Private columnWARDID As Global.System.Data.DataColumn
        
        Private columnMEID As Global.System.Data.DataColumn
        
        Private columnMMID As Global.System.Data.DataColumn
        
        Private columnDOSAGE As Global.System.Data.DataColumn
        
        Private columnCOUNT As Global.System.Data.DataColumn
        
        Private columnDATEREQ As Global.System.Data.DataColumn
        
        Private columnCREATEAT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WARD_REQUESTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property REQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property STAFFIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTAFFID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CNIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property WARDIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARDID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MMIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMMID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DOSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property COUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DATEREQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEREQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CREATEATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WARD_REQUESTSRow
            Get
                Return CType(Me.Rows(index),WARD_REQUESTSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event WARD_REQUESTSRowChanging As WARD_REQUESTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event WARD_REQUESTSRowChanged As WARD_REQUESTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event WARD_REQUESTSRowDeleting As WARD_REQUESTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event WARD_REQUESTSRowDeleted As WARD_REQUESTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddWARD_REQUESTSRow(ByVal row As WARD_REQUESTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddWARD_REQUESTSRow(ByVal REQID As String, ByVal STAFFID As String, ByVal CNID As String, ByVal WARDID As String, ByVal MEID As Long, ByVal MMID As Long, ByVal DOSAGE As Double, ByVal COUNT As Long, ByVal DATEREQ As Date, ByVal CREATEAT As Date) As WARD_REQUESTSRow
            Dim rowWARD_REQUESTSRow As WARD_REQUESTSRow = CType(Me.NewRow,WARD_REQUESTSRow)
            Dim columnValuesArray() As Object = New Object() {REQID, STAFFID, CNID, WARDID, MEID, MMID, DOSAGE, COUNT, DATEREQ, CREATEAT}
            rowWARD_REQUESTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWARD_REQUESTSRow)
            Return rowWARD_REQUESTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByREQID(ByVal REQID As String) As WARD_REQUESTSRow
            Return CType(Me.Rows.Find(New Object() {REQID}),WARD_REQUESTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WARD_REQUESTSDataTable = CType(MyBase.Clone,WARD_REQUESTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WARD_REQUESTSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnREQID = MyBase.Columns("REQID")
            Me.columnSTAFFID = MyBase.Columns("STAFFID")
            Me.columnCNID = MyBase.Columns("CNID")
            Me.columnWARDID = MyBase.Columns("WARDID")
            Me.columnMEID = MyBase.Columns("MEID")
            Me.columnMMID = MyBase.Columns("MMID")
            Me.columnDOSAGE = MyBase.Columns("DOSAGE")
            Me.columnCOUNT = MyBase.Columns("COUNT")
            Me.columnDATEREQ = MyBase.Columns("DATEREQ")
            Me.columnCREATEAT = MyBase.Columns("CREATEAT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnREQID = New Global.System.Data.DataColumn("REQID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREQID)
            Me.columnSTAFFID = New Global.System.Data.DataColumn("STAFFID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTAFFID)
            Me.columnCNID = New Global.System.Data.DataColumn("CNID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNID)
            Me.columnWARDID = New Global.System.Data.DataColumn("WARDID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARDID)
            Me.columnMEID = New Global.System.Data.DataColumn("MEID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEID)
            Me.columnMMID = New Global.System.Data.DataColumn("MMID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMMID)
            Me.columnDOSAGE = New Global.System.Data.DataColumn("DOSAGE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOSAGE)
            Me.columnCOUNT = New Global.System.Data.DataColumn("COUNT", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNT)
            Me.columnDATEREQ = New Global.System.Data.DataColumn("DATEREQ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEREQ)
            Me.columnCREATEAT = New Global.System.Data.DataColumn("CREATEAT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEAT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnREQID}, true))
            Me.columnREQID.AllowDBNull = false
            Me.columnREQID.Unique = true
            Me.columnREQID.MaxLength = 10
            Me.columnSTAFFID.MaxLength = 41
            Me.columnCNID.MaxLength = 10
            Me.columnWARDID.AllowDBNull = false
            Me.columnWARDID.MaxLength = 41
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewWARD_REQUESTSRow() As WARD_REQUESTSRow
            Return CType(Me.NewRow,WARD_REQUESTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WARD_REQUESTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WARD_REQUESTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WARD_REQUESTSRowChangedEvent) Is Nothing) Then
                RaiseEvent WARD_REQUESTSRowChanged(Me, New WARD_REQUESTSRowChangeEvent(CType(e.Row,WARD_REQUESTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WARD_REQUESTSRowChangingEvent) Is Nothing) Then
                RaiseEvent WARD_REQUESTSRowChanging(Me, New WARD_REQUESTSRowChangeEvent(CType(e.Row,WARD_REQUESTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WARD_REQUESTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent WARD_REQUESTSRowDeleted(Me, New WARD_REQUESTSRowChangeEvent(CType(e.Row,WARD_REQUESTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WARD_REQUESTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent WARD_REQUESTSRowDeleting(Me, New WARD_REQUESTSRowChangeEvent(CType(e.Row,WARD_REQUESTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveWARD_REQUESTSRow(ByVal row As WARD_REQUESTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WARD_REQUESTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class BEDSRow
        Inherits Global.System.Data.DataRow
        
        Private tableBEDS As BEDSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBEDS = CType(Me.Table,BEDSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BEDID() As Long
            Get
                Return CType(Me(Me.tableBEDS.BEDIDColumn),Long)
            End Get
            Set
                Me(Me.tableBEDS.BEDIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WARDID() As String
            Get
                Return CType(Me(Me.tableBEDS.WARDIDColumn),String)
            End Get
            Set
                Me(Me.tableBEDS.WARDIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WARDSRow() As WARDSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013318")),WARDSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013318"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetIN_PATIENTSRows() As IN_PATIENTSRow()
            If (Me.Table.ChildRelations("SYS_C0013333") Is Nothing) Then
                Return New IN_PATIENTSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013333")),IN_PATIENTSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class IN_PATIENTSRow
        Inherits Global.System.Data.DataRow
        
        Private tableIN_PATIENTS As IN_PATIENTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIN_PATIENTS = CType(Me.Table,IN_PATIENTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PWID() As String
            Get
                Return CType(Me(Me.tableIN_PATIENTS.PWIDColumn),String)
            End Get
            Set
                Me(Me.tableIN_PATIENTS.PWIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WARDID() As String
            Get
                Return CType(Me(Me.tableIN_PATIENTS.WARDIDColumn),String)
            End Get
            Set
                Me(Me.tableIN_PATIENTS.WARDIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BEDID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableIN_PATIENTS.BEDIDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BEDID' in table 'IN_PATIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIN_PATIENTS.BEDIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ON_WATING_DATE() As Date
            Get
                Return CType(Me(Me.tableIN_PATIENTS.ON_WATING_DATEColumn),Date)
            End Get
            Set
                Me(Me.tableIN_PATIENTS.ON_WATING_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ISGETBED() As Short
            Get
                Return CType(Me(Me.tableIN_PATIENTS.ISGETBEDColumn),Short)
            End Get
            Set
                Me(Me.tableIN_PATIENTS.ISGETBEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DATE_PLACE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIN_PATIENTS.DATE_PLACEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE_PLACE' in table 'IN_PATIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIN_PATIENTS.DATE_PLACEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DATE_EXPECTED() As Long
            Get
                Try 
                    Return CType(Me(Me.tableIN_PATIENTS.DATE_EXPECTEDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE_EXPECTED' in table 'IN_PATIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIN_PATIENTS.DATE_EXPECTEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DATE_LEAVE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIN_PATIENTS.DATE_LEAVEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE_LEAVE' in table 'IN_PATIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIN_PATIENTS.DATE_LEAVEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PATIENT_STATUS() As Short
            Get
                Try 
                    Return CType(Me(Me.tableIN_PATIENTS.PATIENT_STATUSColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_STATUS' in table 'IN_PATIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIN_PATIENTS.PATIENT_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PATIENT_WARDSRow() As PATIENT_WARDSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013331")),PATIENT_WARDSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013331"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WARDSRow() As WARDSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013332")),WARDSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013332"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BEDSRow() As BEDSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013333")),BEDSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013333"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsBEDIDNull() As Boolean
            Return Me.IsNull(Me.tableIN_PATIENTS.BEDIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetBEDIDNull()
            Me(Me.tableIN_PATIENTS.BEDIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsDATE_PLACENull() As Boolean
            Return Me.IsNull(Me.tableIN_PATIENTS.DATE_PLACEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetDATE_PLACENull()
            Me(Me.tableIN_PATIENTS.DATE_PLACEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsDATE_EXPECTEDNull() As Boolean
            Return Me.IsNull(Me.tableIN_PATIENTS.DATE_EXPECTEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetDATE_EXPECTEDNull()
            Me(Me.tableIN_PATIENTS.DATE_EXPECTEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsDATE_LEAVENull() As Boolean
            Return Me.IsNull(Me.tableIN_PATIENTS.DATE_LEAVEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetDATE_LEAVENull()
            Me(Me.tableIN_PATIENTS.DATE_LEAVEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsPATIENT_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableIN_PATIENTS.PATIENT_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetPATIENT_STATUSNull()
            Me(Me.tableIN_PATIENTS.PATIENT_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class LOCALDOCTORSRow
        Inherits Global.System.Data.DataRow
        
        Private tableLOCALDOCTORS As LOCALDOCTORSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOCALDOCTORS = CType(Me.Table,LOCALDOCTORSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tableLOCALDOCTORS.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableLOCALDOCTORS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LOCALDOCID() As String
            Get
                Return CType(Me(Me.tableLOCALDOCTORS.LOCALDOCIDColumn),String)
            End Get
            Set
                Me(Me.tableLOCALDOCTORS.LOCALDOCIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FULLNAME() As String
            Get
                Return CType(Me(Me.tableLOCALDOCTORS.FULLNAMEColumn),String)
            End Get
            Set
                Me(Me.tableLOCALDOCTORS.FULLNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CLINICID() As String
            Get
                Return CType(Me(Me.tableLOCALDOCTORS.CLINICIDColumn),String)
            End Get
            Set
                Me(Me.tableLOCALDOCTORS.CLINICIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ADDRESS() As String
            Get
                Return CType(Me(Me.tableLOCALDOCTORS.ADDRESSColumn),String)
            End Get
            Set
                Me(Me.tableLOCALDOCTORS.ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TEL() As Long
            Get
                Return CType(Me(Me.tableLOCALDOCTORS.TELColumn),Long)
            End Get
            Set
                Me(Me.tableLOCALDOCTORS.TELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPATIENTSRows() As PATIENTSRow()
            If (Me.Table.ChildRelations("SYS_C0013317") Is Nothing) Then
                Return New PATIENTSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013317")),PATIENTSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class LOGIN_LOGSRow
        Inherits Global.System.Data.DataRow
        
        Private tableLOGIN_LOGS As LOGIN_LOGSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOGIN_LOGS = CType(Me.Table,LOGIN_LOGSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFID() As String
            Get
                Return CType(Me(Me.tableLOGIN_LOGS.STAFFIDColumn),String)
            End Get
            Set
                Me(Me.tableLOGIN_LOGS.STAFFIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LOGINTIME() As Date
            Get
                Return CType(Me(Me.tableLOGIN_LOGS.LOGINTIMEColumn),Date)
            End Get
            Set
                Me(Me.tableLOGIN_LOGS.LOGINTIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFSRow() As STAFFSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013346")),STAFFSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013346"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MED_EQUIPMENTSRow
        Inherits Global.System.Data.DataRow
        
        Private tableMED_EQUIPMENTS As MED_EQUIPMENTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMED_EQUIPMENTS = CType(Me.Table,MED_EQUIPMENTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MEID() As Long
            Get
                Return CType(Me(Me.tableMED_EQUIPMENTS.MEIDColumn),Long)
            End Get
            Set
                Me(Me.tableMED_EQUIPMENTS.MEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SUPPLIERID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableMED_EQUIPMENTS.SUPPLIERIDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLIERID' in table 'MED_EQUIPMENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMED_EQUIPMENTS.SUPPLIERIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMED_EQUIPMENTS.NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAME' in table 'MED_EQUIPMENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMED_EQUIPMENTS.NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableMED_EQUIPMENTS.descColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'desc' in table 'MED_EQUIPMENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMED_EQUIPMENTS.descColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STOCK() As Long
            Get
                Try 
                    Return CType(Me(Me.tableMED_EQUIPMENTS.STOCKColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STOCK' in table 'MED_EQUIPMENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMED_EQUIPMENTS.STOCKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BUY_SCALE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMED_EQUIPMENTS.BUY_SCALEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUY_SCALE' in table 'MED_EQUIPMENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMED_EQUIPMENTS.BUY_SCALEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PRICE_PER_UNIT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMED_EQUIPMENTS.PRICE_PER_UNITColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRICE_PER_UNIT' in table 'MED_EQUIPMENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMED_EQUIPMENTS.PRICE_PER_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SUPPILERSRow() As SUPPILERSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013335")),SUPPILERSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013335"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsSUPPLIERIDNull() As Boolean
            Return Me.IsNull(Me.tableMED_EQUIPMENTS.SUPPLIERIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetSUPPLIERIDNull()
            Me(Me.tableMED_EQUIPMENTS.SUPPLIERIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableMED_EQUIPMENTS.NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNAMENull()
            Me(Me.tableMED_EQUIPMENTS.NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsdescNull() As Boolean
            Return Me.IsNull(Me.tableMED_EQUIPMENTS.descColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetdescNull()
            Me(Me.tableMED_EQUIPMENTS.descColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsSTOCKNull() As Boolean
            Return Me.IsNull(Me.tableMED_EQUIPMENTS.STOCKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetSTOCKNull()
            Me(Me.tableMED_EQUIPMENTS.STOCKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsBUY_SCALENull() As Boolean
            Return Me.IsNull(Me.tableMED_EQUIPMENTS.BUY_SCALEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetBUY_SCALENull()
            Me(Me.tableMED_EQUIPMENTS.BUY_SCALEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsPRICE_PER_UNITNull() As Boolean
            Return Me.IsNull(Me.tableMED_EQUIPMENTS.PRICE_PER_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetPRICE_PER_UNITNull()
            Me(Me.tableMED_EQUIPMENTS.PRICE_PER_UNITColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MED_MEDICINESRow
        Inherits Global.System.Data.DataRow
        
        Private tableMED_MEDICINES As MED_MEDICINESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMED_MEDICINES = CType(Me.Table,MED_MEDICINESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MMID() As Long
            Get
                Return CType(Me(Me.tableMED_MEDICINES.MMIDColumn),Long)
            End Get
            Set
                Me(Me.tableMED_MEDICINES.MMIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SUPPLIERID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableMED_MEDICINES.SUPPLIERIDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLIERID' in table 'MED_MEDICINES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMED_MEDICINES.SUPPLIERIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMED_MEDICINES.NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAME' in table 'MED_MEDICINES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMED_MEDICINES.NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableMED_MEDICINES.descColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'desc' in table 'MED_MEDICINES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMED_MEDICINES.descColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DOSAGE() As Long
            Get
                Try 
                    Return CType(Me(Me.tableMED_MEDICINES.DOSAGEColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOSAGE' in table 'MED_MEDICINES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMED_MEDICINES.DOSAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property METHOD() As String
            Get
                Try 
                    Return CType(Me(Me.tableMED_MEDICINES.METHODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'METHOD' in table 'MED_MEDICINES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMED_MEDICINES.METHODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STOCK() As Long
            Get
                Try 
                    Return CType(Me(Me.tableMED_MEDICINES.STOCKColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STOCK' in table 'MED_MEDICINES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMED_MEDICINES.STOCKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BUY_SCALE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMED_MEDICINES.BUY_SCALEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUY_SCALE' in table 'MED_MEDICINES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMED_MEDICINES.BUY_SCALEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PRICE_PER_UNIT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMED_MEDICINES.PRICE_PER_UNITColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRICE_PER_UNIT' in table 'MED_MEDICINES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMED_MEDICINES.PRICE_PER_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SUPPILERSRow() As SUPPILERSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013336")),SUPPILERSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013336"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsSUPPLIERIDNull() As Boolean
            Return Me.IsNull(Me.tableMED_MEDICINES.SUPPLIERIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetSUPPLIERIDNull()
            Me(Me.tableMED_MEDICINES.SUPPLIERIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableMED_MEDICINES.NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNAMENull()
            Me(Me.tableMED_MEDICINES.NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsdescNull() As Boolean
            Return Me.IsNull(Me.tableMED_MEDICINES.descColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetdescNull()
            Me(Me.tableMED_MEDICINES.descColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsDOSAGENull() As Boolean
            Return Me.IsNull(Me.tableMED_MEDICINES.DOSAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetDOSAGENull()
            Me(Me.tableMED_MEDICINES.DOSAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsMETHODNull() As Boolean
            Return Me.IsNull(Me.tableMED_MEDICINES.METHODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetMETHODNull()
            Me(Me.tableMED_MEDICINES.METHODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsSTOCKNull() As Boolean
            Return Me.IsNull(Me.tableMED_MEDICINES.STOCKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetSTOCKNull()
            Me(Me.tableMED_MEDICINES.STOCKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsBUY_SCALENull() As Boolean
            Return Me.IsNull(Me.tableMED_MEDICINES.BUY_SCALEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetBUY_SCALENull()
            Me(Me.tableMED_MEDICINES.BUY_SCALEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsPRICE_PER_UNITNull() As Boolean
            Return Me.IsNull(Me.tableMED_MEDICINES.PRICE_PER_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetPRICE_PER_UNITNull()
            Me(Me.tableMED_MEDICINES.PRICE_PER_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPW_PRESCRIPTSRows() As PW_PRESCRIPTSRow()
            If (Me.Table.ChildRelations("SYS_C0013337") Is Nothing) Then
                Return New PW_PRESCRIPTSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013337")),PW_PRESCRIPTSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PATIENT_KINSRow
        Inherits Global.System.Data.DataRow
        
        Private tablePATIENT_KINS As PATIENT_KINSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePATIENT_KINS = CType(Me.Table,PATIENT_KINSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tablePATIENT_KINS.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePATIENT_KINS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property KINSID() As String
            Get
                Return CType(Me(Me.tablePATIENT_KINS.KINSIDColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_KINS.KINSIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FULLNAME() As String
            Get
                Return CType(Me(Me.tablePATIENT_KINS.FULLNAMEColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_KINS.FULLNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ADDRESS() As String
            Get
                Return CType(Me(Me.tablePATIENT_KINS.ADDRESSColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_KINS.ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property RELATIONSHIP() As String
            Get
                Return CType(Me(Me.tablePATIENT_KINS.RELATIONSHIPColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_KINS.RELATIONSHIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TEL() As Long
            Get
                Return CType(Me(Me.tablePATIENT_KINS.TELColumn),Long)
            End Get
            Set
                Me(Me.tablePATIENT_KINS.TELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPATIENTSRows() As PATIENTSRow()
            If (Me.Table.ChildRelations("SYS_C0013316") Is Nothing) Then
                Return New PATIENTSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013316")),PATIENTSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PATIENT_VISITSRow
        Inherits Global.System.Data.DataRow
        
        Private tablePATIENT_VISITS As PATIENT_VISITSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePATIENT_VISITS = CType(Me.Table,PATIENT_VISITSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tablePATIENT_VISITS.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePATIENT_VISITS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VISITID() As String
            Get
                Return CType(Me(Me.tablePATIENT_VISITS.VISITIDColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_VISITS.VISITIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PATIENTID() As String
            Get
                Return CType(Me(Me.tablePATIENT_VISITS.PATIENTIDColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_VISITS.PATIENTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFID() As String
            Get
                Return CType(Me(Me.tablePATIENT_VISITS.STAFFIDColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_VISITS.STAFFIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DOCTORID() As String
            Get
                Return CType(Me(Me.tablePATIENT_VISITS.DOCTORIDColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_VISITS.DOCTORIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WARDID() As String
            Get
                Return CType(Me(Me.tablePATIENT_VISITS.WARDIDColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_VISITS.WARDIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property APP_DATE() As Date
            Get
                Return CType(Me(Me.tablePATIENT_VISITS.APP_DATEColumn),Date)
            End Get
            Set
                Me(Me.tablePATIENT_VISITS.APP_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property APP_TYPE() As String
            Get
                Return CType(Me(Me.tablePATIENT_VISITS.APP_TYPEColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_VISITS.APP_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PATIENTSRow() As PATIENTSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013322")),PATIENTSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013322"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFSRowBySYS_C0013323() As STAFFSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013323")),STAFFSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013323"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFSRowBySYS_C0013324() As STAFFSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013324")),STAFFSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013324"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WARDSRow() As WARDSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013325")),WARDSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013325"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPATIENT_WARDSRows() As PATIENT_WARDSRow()
            If (Me.Table.ChildRelations("SYS_C0013327") Is Nothing) Then
                Return New PATIENT_WARDSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013327")),PATIENT_WARDSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PATIENT_WARDSRow
        Inherits Global.System.Data.DataRow
        
        Private tablePATIENT_WARDS As PATIENT_WARDSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePATIENT_WARDS = CType(Me.Table,PATIENT_WARDSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tablePATIENT_WARDS.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePATIENT_WARDS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PATIENTID() As String
            Get
                Return CType(Me(Me.tablePATIENT_WARDS.PATIENTIDColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_WARDS.PATIENTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property VISITID() As String
            Get
                Return CType(Me(Me.tablePATIENT_WARDS.VISITIDColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_WARDS.VISITIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DOCTORID() As String
            Get
                Return CType(Me(Me.tablePATIENT_WARDS.DOCTORIDColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_WARDS.DOCTORIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CNID() As String
            Get
                Return CType(Me(Me.tablePATIENT_WARDS.CNIDColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_WARDS.CNIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PWID() As String
            Get
                Return CType(Me(Me.tablePATIENT_WARDS.PWIDColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_WARDS.PWIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WARDID() As String
            Get
                Return CType(Me(Me.tablePATIENT_WARDS.WARDIDColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_WARDS.WARDIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PATIENTTYPE() As String
            Get
                Return CType(Me(Me.tablePATIENT_WARDS.PATIENTTYPEColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_WARDS.PATIENTTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ON_WARD_DATE() As Date
            Get
                Return CType(Me(Me.tablePATIENT_WARDS.ON_WARD_DATEColumn),Date)
            End Get
            Set
                Me(Me.tablePATIENT_WARDS.ON_WARD_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SYMPTOM() As String
            Get
                Return CType(Me(Me.tablePATIENT_WARDS.SYMPTOMColumn),String)
            End Get
            Set
                Me(Me.tablePATIENT_WARDS.SYMPTOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UPDATEAT() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePATIENT_WARDS.UPDATEATColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATEAT' in table 'PATIENT_WARDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePATIENT_WARDS.UPDATEATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PATIENTSRow() As PATIENTSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013326")),PATIENTSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013326"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PATIENT_VISITSRow() As PATIENT_VISITSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013327")),PATIENT_VISITSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013327"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFSRowBySYS_C0013328() As STAFFSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013328")),STAFFSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013328"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFSRowBySYS_C0013329() As STAFFSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013329")),STAFFSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013329"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WARDSRow() As WARDSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013330")),WARDSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013330"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsUPDATEATNull() As Boolean
            Return Me.IsNull(Me.tablePATIENT_WARDS.UPDATEATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetUPDATEATNull()
            Me(Me.tablePATIENT_WARDS.UPDATEATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetIN_PATIENTSRows() As IN_PATIENTSRow()
            If (Me.Table.ChildRelations("SYS_C0013331") Is Nothing) Then
                Return New IN_PATIENTSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013331")),IN_PATIENTSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPW_PRESCRIPTSRows() As PW_PRESCRIPTSRow()
            If (Me.Table.ChildRelations("SYS_C0013338") Is Nothing) Then
                Return New PW_PRESCRIPTSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013338")),PW_PRESCRIPTSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PATIENTSRow
        Inherits Global.System.Data.DataRow
        
        Private tablePATIENTS As PATIENTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePATIENTS = CType(Me.Table,PATIENTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tablePATIENTS.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePATIENTS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PATIENTID() As String
            Get
                Return CType(Me(Me.tablePATIENTS.PATIENTIDColumn),String)
            End Get
            Set
                Me(Me.tablePATIENTS.PATIENTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property KINSID() As String
            Get
                Return CType(Me(Me.tablePATIENTS.KINSIDColumn),String)
            End Get
            Set
                Me(Me.tablePATIENTS.KINSIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LOCALDOCID() As String
            Get
                Return CType(Me(Me.tablePATIENTS.LOCALDOCIDColumn),String)
            End Get
            Set
                Me(Me.tablePATIENTS.LOCALDOCIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FIRSTNAME() As String
            Get
                Return CType(Me(Me.tablePATIENTS.FIRSTNAMEColumn),String)
            End Get
            Set
                Me(Me.tablePATIENTS.FIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LASTNAME() As String
            Get
                Return CType(Me(Me.tablePATIENTS.LASTNAMEColumn),String)
            End Get
            Set
                Me(Me.tablePATIENTS.LASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ADDRESS() As String
            Get
                Return CType(Me(Me.tablePATIENTS.ADDRESSColumn),String)
            End Get
            Set
                Me(Me.tablePATIENTS.ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property GENDER() As String
            Get
                Return CType(Me(Me.tablePATIENTS.GENDERColumn),String)
            End Get
            Set
                Me(Me.tablePATIENTS.GENDERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MARRYSTATUS() As String
            Get
                Return CType(Me(Me.tablePATIENTS.MARRYSTATUSColumn),String)
            End Get
            Set
                Me(Me.tablePATIENTS.MARRYSTATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TEL() As Long
            Get
                Return CType(Me(Me.tablePATIENTS.TELColumn),Long)
            End Get
            Set
                Me(Me.tablePATIENTS.TELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DOB() As Date
            Get
                Return CType(Me(Me.tablePATIENTS.DOBColumn),Date)
            End Get
            Set
                Me(Me.tablePATIENTS.DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DATE_REGISTER() As Date
            Get
                Return CType(Me(Me.tablePATIENTS.DATE_REGISTERColumn),Date)
            End Get
            Set
                Me(Me.tablePATIENTS.DATE_REGISTERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PATIENT_KINSRow() As PATIENT_KINSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013316")),PATIENT_KINSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013316"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LOCALDOCTORSRow() As LOCALDOCTORSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013317")),LOCALDOCTORSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013317"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPATIENT_VISITSRows() As PATIENT_VISITSRow()
            If (Me.Table.ChildRelations("SYS_C0013322") Is Nothing) Then
                Return New PATIENT_VISITSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013322")),PATIENT_VISITSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPATIENT_WARDSRows() As PATIENT_WARDSRow()
            If (Me.Table.ChildRelations("SYS_C0013326") Is Nothing) Then
                Return New PATIENT_WARDSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013326")),PATIENT_WARDSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PW_PRESCRIPTSRow
        Inherits Global.System.Data.DataRow
        
        Private tablePW_PRESCRIPTS As PW_PRESCRIPTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePW_PRESCRIPTS = CType(Me.Table,PW_PRESCRIPTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MMID() As Long
            Get
                Return CType(Me(Me.tablePW_PRESCRIPTS.MMIDColumn),Long)
            End Get
            Set
                Me(Me.tablePW_PRESCRIPTS.MMIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PWID() As String
            Get
                Return CType(Me(Me.tablePW_PRESCRIPTS.PWIDColumn),String)
            End Get
            Set
                Me(Me.tablePW_PRESCRIPTS.PWIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DOCTORID() As String
            Get
                Return CType(Me(Me.tablePW_PRESCRIPTS.DOCTORIDColumn),String)
            End Get
            Set
                Me(Me.tablePW_PRESCRIPTS.DOCTORIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CNID() As String
            Get
                Return CType(Me(Me.tablePW_PRESCRIPTS.CNIDColumn),String)
            End Get
            Set
                Me(Me.tablePW_PRESCRIPTS.CNIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DOSAGE() As Double
            Get
                Return CType(Me(Me.tablePW_PRESCRIPTS.DOSAGEColumn),Double)
            End Get
            Set
                Me(Me.tablePW_PRESCRIPTS.DOSAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STARTDATE() As Date
            Get
                Return CType(Me(Me.tablePW_PRESCRIPTS.STARTDATEColumn),Date)
            End Get
            Set
                Me(Me.tablePW_PRESCRIPTS.STARTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ENDDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePW_PRESCRIPTS.ENDDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENDDATE' in table 'PW_PRESCRIPTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePW_PRESCRIPTS.ENDDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CREATEAT() As Date
            Get
                Return CType(Me(Me.tablePW_PRESCRIPTS.CREATEATColumn),Date)
            End Get
            Set
                Me(Me.tablePW_PRESCRIPTS.CREATEATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MED_MEDICINESRow() As MED_MEDICINESRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013337")),MED_MEDICINESRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013337"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PATIENT_WARDSRow() As PATIENT_WARDSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013338")),PATIENT_WARDSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013338"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFSRowBySYS_C0013339() As STAFFSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013339")),STAFFSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013339"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFSRowBySYS_C0013340() As STAFFSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013340")),STAFFSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013340"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsENDDATENull() As Boolean
            Return Me.IsNull(Me.tablePW_PRESCRIPTS.ENDDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetENDDATENull()
            Me(Me.tablePW_PRESCRIPTS.ENDDATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SHIFTSRow
        Inherits Global.System.Data.DataRow
        
        Private tableSHIFTS As SHIFTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSHIFTS = CType(Me.Table,SHIFTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SHIFTID() As Long
            Get
                Return CType(Me(Me.tableSHIFTS.SHIFTIDColumn),Long)
            End Get
            Set
                Me(Me.tableSHIFTS.SHIFTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SHIFTNAME() As String
            Get
                Return CType(Me(Me.tableSHIFTS.SHIFTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableSHIFTS.SHIFTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STARTTIME() As Date
            Get
                Return CType(Me(Me.tableSHIFTS.STARTTIMEColumn),Date)
            End Get
            Set
                Me(Me.tableSHIFTS.STARTTIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ENDTIME() As Date
            Get
                Return CType(Me(Me.tableSHIFTS.ENDTIMEColumn),Date)
            End Get
            Set
                Me(Me.tableSHIFTS.ENDTIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetWARD_STAFFSRows() As WARD_STAFFSRow()
            If (Me.Table.ChildRelations("SYS_C0013319") Is Nothing) Then
                Return New WARD_STAFFSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013319")),WARD_STAFFSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class STAFF_EXPERIENCESRow
        Inherits Global.System.Data.DataRow
        
        Private tableSTAFF_EXPERIENCES As STAFF_EXPERIENCESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTAFF_EXPERIENCES = CType(Me.Table,STAFF_EXPERIENCESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFID() As String
            Get
                Return CType(Me(Me.tableSTAFF_EXPERIENCES.STAFFIDColumn),String)
            End Get
            Set
                Me(Me.tableSTAFF_EXPERIENCES.STAFFIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ORGANIZATION() As String
            Get
                Return CType(Me(Me.tableSTAFF_EXPERIENCES.ORGANIZATIONColumn),String)
            End Get
            Set
                Me(Me.tableSTAFF_EXPERIENCES.ORGANIZATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property POSITION() As String
            Get
                Return CType(Me(Me.tableSTAFF_EXPERIENCES.POSITIONColumn),String)
            End Get
            Set
                Me(Me.tableSTAFF_EXPERIENCES.POSITIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STARTDATE() As Date
            Get
                Return CType(Me(Me.tableSTAFF_EXPERIENCES.STARTDATEColumn),Date)
            End Get
            Set
                Me(Me.tableSTAFF_EXPERIENCES.STARTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ENDDATE() As Date
            Get
                Return CType(Me(Me.tableSTAFF_EXPERIENCES.ENDDATEColumn),Date)
            End Get
            Set
                Me(Me.tableSTAFF_EXPERIENCES.ENDDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property EXPID() As Decimal
            Get
                Return CType(Me(Me.tableSTAFF_EXPERIENCES.EXPIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableSTAFF_EXPERIENCES.EXPIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFSRow() As STAFFSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013314")),STAFFSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013314"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class STAFF_QUALIFICATESRow
        Inherits Global.System.Data.DataRow
        
        Private tableSTAFF_QUALIFICATES As STAFF_QUALIFICATESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTAFF_QUALIFICATES = CType(Me.Table,STAFF_QUALIFICATESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFID() As String
            Get
                Return CType(Me(Me.tableSTAFF_QUALIFICATES.STAFFIDColumn),String)
            End Get
            Set
                Me(Me.tableSTAFF_QUALIFICATES.STAFFIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TYPE() As String
            Get
                Return CType(Me(Me.tableSTAFF_QUALIFICATES.TYPEColumn),String)
            End Get
            Set
                Me(Me.tableSTAFF_QUALIFICATES.TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DATES() As Date
            Get
                Return CType(Me(Me.tableSTAFF_QUALIFICATES.DATESColumn),Date)
            End Get
            Set
                Me(Me.tableSTAFF_QUALIFICATES.DATESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MAJOR() As String
            Get
                Return CType(Me(Me.tableSTAFF_QUALIFICATES.MAJORColumn),String)
            End Get
            Set
                Me(Me.tableSTAFF_QUALIFICATES.MAJORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property QUALID() As Decimal
            Get
                Return CType(Me(Me.tableSTAFF_QUALIFICATES.QUALIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableSTAFF_QUALIFICATES.QUALIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFSRow() As STAFFSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013315")),STAFFSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013315"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class STAFFSRow
        Inherits Global.System.Data.DataRow
        
        Private tableSTAFFS As STAFFSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTAFFS = CType(Me.Table,STAFFSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tableSTAFFS.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableSTAFFS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFID() As String
            Get
                Return CType(Me(Me.tableSTAFFS.STAFFIDColumn),String)
            End Get
            Set
                Me(Me.tableSTAFFS.STAFFIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DOCTORID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSTAFFS.DOCTORIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOCTORID' in table 'STAFFS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTAFFS.DOCTORIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CNID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSTAFFS.CNIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CNID' in table 'STAFFS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTAFFS.CNIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MDID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSTAFFS.MDIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MDID' in table 'STAFFS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTAFFS.MDIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FIRSTNAME() As String
            Get
                Return CType(Me(Me.tableSTAFFS.FIRSTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableSTAFFS.FIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LASTNAME() As String
            Get
                Return CType(Me(Me.tableSTAFFS.LASTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableSTAFFS.LASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSTAFFS.ADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDRESS' in table 'STAFFS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTAFFS.ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TEL() As Long
            Get
                Try 
                    Return CType(Me(Me.tableSTAFFS.TELColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEL' in table 'STAFFS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTAFFS.TELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DOB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSTAFFS.DOBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOB' in table 'STAFFS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTAFFS.DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableSTAFFS.NINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIN' in table 'STAFFS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTAFFS.NINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property POSITION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSTAFFS.POSITIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POSITION' in table 'STAFFS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTAFFS.POSITIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SALARY() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSTAFFS.SALARYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SALARY' in table 'STAFFS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTAFFS.SALARYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SALARYSCALE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSTAFFS.SALARYSCALEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SALARYSCALE' in table 'STAFFS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTAFFS.SALARYSCALEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property HOURSWEEK() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSTAFFS.HOURSWEEKColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HOURSWEEK' in table 'STAFFS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTAFFS.HOURSWEEKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CONTACTTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSTAFFS.CONTACTTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CONTACTTYPE' in table 'STAFFS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTAFFS.CONTACTTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PAIDTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSTAFFS.PAIDTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAIDTYPE' in table 'STAFFS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTAFFS.PAIDTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsDOCTORIDNull() As Boolean
            Return Me.IsNull(Me.tableSTAFFS.DOCTORIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetDOCTORIDNull()
            Me(Me.tableSTAFFS.DOCTORIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCNIDNull() As Boolean
            Return Me.IsNull(Me.tableSTAFFS.CNIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCNIDNull()
            Me(Me.tableSTAFFS.CNIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsMDIDNull() As Boolean
            Return Me.IsNull(Me.tableSTAFFS.MDIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetMDIDNull()
            Me(Me.tableSTAFFS.MDIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableSTAFFS.ADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetADDRESSNull()
            Me(Me.tableSTAFFS.ADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTELNull() As Boolean
            Return Me.IsNull(Me.tableSTAFFS.TELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTELNull()
            Me(Me.tableSTAFFS.TELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableSTAFFS.DOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetDOBNull()
            Me(Me.tableSTAFFS.DOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNINNull() As Boolean
            Return Me.IsNull(Me.tableSTAFFS.NINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNINNull()
            Me(Me.tableSTAFFS.NINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsPOSITIONNull() As Boolean
            Return Me.IsNull(Me.tableSTAFFS.POSITIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetPOSITIONNull()
            Me(Me.tableSTAFFS.POSITIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsSALARYNull() As Boolean
            Return Me.IsNull(Me.tableSTAFFS.SALARYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetSALARYNull()
            Me(Me.tableSTAFFS.SALARYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsSALARYSCALENull() As Boolean
            Return Me.IsNull(Me.tableSTAFFS.SALARYSCALEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetSALARYSCALENull()
            Me(Me.tableSTAFFS.SALARYSCALEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsHOURSWEEKNull() As Boolean
            Return Me.IsNull(Me.tableSTAFFS.HOURSWEEKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetHOURSWEEKNull()
            Me(Me.tableSTAFFS.HOURSWEEKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCONTACTTYPENull() As Boolean
            Return Me.IsNull(Me.tableSTAFFS.CONTACTTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCONTACTTYPENull()
            Me(Me.tableSTAFFS.CONTACTTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsPAIDTYPENull() As Boolean
            Return Me.IsNull(Me.tableSTAFFS.PAIDTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetPAIDTYPENull()
            Me(Me.tableSTAFFS.PAIDTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetLOGIN_LOGSRows() As LOGIN_LOGSRow()
            If (Me.Table.ChildRelations("SYS_C0013346") Is Nothing) Then
                Return New LOGIN_LOGSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013346")),LOGIN_LOGSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPATIENT_VISITSRowsBySYS_C0013323() As PATIENT_VISITSRow()
            If (Me.Table.ChildRelations("SYS_C0013323") Is Nothing) Then
                Return New PATIENT_VISITSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013323")),PATIENT_VISITSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPATIENT_VISITSRowsBySYS_C0013324() As PATIENT_VISITSRow()
            If (Me.Table.ChildRelations("SYS_C0013324") Is Nothing) Then
                Return New PATIENT_VISITSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013324")),PATIENT_VISITSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPATIENT_WARDSRowsBySYS_C0013328() As PATIENT_WARDSRow()
            If (Me.Table.ChildRelations("SYS_C0013328") Is Nothing) Then
                Return New PATIENT_WARDSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013328")),PATIENT_WARDSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPATIENT_WARDSRowsBySYS_C0013329() As PATIENT_WARDSRow()
            If (Me.Table.ChildRelations("SYS_C0013329") Is Nothing) Then
                Return New PATIENT_WARDSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013329")),PATIENT_WARDSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPW_PRESCRIPTSRowsBySYS_C0013339() As PW_PRESCRIPTSRow()
            If (Me.Table.ChildRelations("SYS_C0013339") Is Nothing) Then
                Return New PW_PRESCRIPTSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013339")),PW_PRESCRIPTSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPW_PRESCRIPTSRowsBySYS_C0013340() As PW_PRESCRIPTSRow()
            If (Me.Table.ChildRelations("SYS_C0013340") Is Nothing) Then
                Return New PW_PRESCRIPTSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013340")),PW_PRESCRIPTSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetSTAFF_EXPERIENCESRows() As STAFF_EXPERIENCESRow()
            If (Me.Table.ChildRelations("SYS_C0013314") Is Nothing) Then
                Return New STAFF_EXPERIENCESRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013314")),STAFF_EXPERIENCESRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetSTAFF_QUALIFICATESRows() As STAFF_QUALIFICATESRow()
            If (Me.Table.ChildRelations("SYS_C0013315") Is Nothing) Then
                Return New STAFF_QUALIFICATESRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013315")),STAFF_QUALIFICATESRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetSUPPILERSRows() As SUPPILERSRow()
            If (Me.Table.ChildRelations("SYS_C0013334") Is Nothing) Then
                Return New SUPPILERSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013334")),SUPPILERSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetWARD_STAFFSRows() As WARD_STAFFSRow()
            If (Me.Table.ChildRelations("SYS_C0013320") Is Nothing) Then
                Return New WARD_STAFFSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013320")),WARD_STAFFSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SUPPILERSRow
        Inherits Global.System.Data.DataRow
        
        Private tableSUPPILERS As SUPPILERSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSUPPILERS = CType(Me.Table,SUPPILERSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SUPPLIERID() As Long
            Get
                Return CType(Me(Me.tableSUPPILERS.SUPPLIERIDColumn),Long)
            End Get
            Set
                Me(Me.tableSUPPILERS.SUPPLIERIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MDID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUPPILERS.MDIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MDID' in table 'SUPPILERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPILERS.MDIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUPPILERS.NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAME' in table 'SUPPILERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPILERS.NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUPPILERS.ADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDRESS' in table 'SUPPILERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPILERS.ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TEL() As Long
            Get
                Try 
                    Return CType(Me(Me.tableSUPPILERS.TELColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEL' in table 'SUPPILERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPILERS.TELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUPPILERS.FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAX' in table 'SUPPILERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPILERS.FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CREATEAT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSUPPILERS.CREATEATColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATEAT' in table 'SUPPILERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPILERS.CREATEATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFSRow() As STAFFSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013334")),STAFFSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013334"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsMDIDNull() As Boolean
            Return Me.IsNull(Me.tableSUPPILERS.MDIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetMDIDNull()
            Me(Me.tableSUPPILERS.MDIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableSUPPILERS.NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNAMENull()
            Me(Me.tableSUPPILERS.NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableSUPPILERS.ADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetADDRESSNull()
            Me(Me.tableSUPPILERS.ADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTELNull() As Boolean
            Return Me.IsNull(Me.tableSUPPILERS.TELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTELNull()
            Me(Me.tableSUPPILERS.TELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsFAXNull() As Boolean
            Return Me.IsNull(Me.tableSUPPILERS.FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetFAXNull()
            Me(Me.tableSUPPILERS.FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCREATEATNull() As Boolean
            Return Me.IsNull(Me.tableSUPPILERS.CREATEATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCREATEATNull()
            Me(Me.tableSUPPILERS.CREATEATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetMED_EQUIPMENTSRows() As MED_EQUIPMENTSRow()
            If (Me.Table.ChildRelations("SYS_C0013335") Is Nothing) Then
                Return New MED_EQUIPMENTSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013335")),MED_EQUIPMENTSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetMED_MEDICINESRows() As MED_MEDICINESRow()
            If (Me.Table.ChildRelations("SYS_C0013336") Is Nothing) Then
                Return New MED_MEDICINESRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013336")),MED_MEDICINESRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class WARD_STAFFSRow
        Inherits Global.System.Data.DataRow
        
        Private tableWARD_STAFFS As WARD_STAFFSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWARD_STAFFS = CType(Me.Table,WARD_STAFFSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WSID() As Long
            Get
                Return CType(Me(Me.tableWARD_STAFFS.WSIDColumn),Long)
            End Get
            Set
                Me(Me.tableWARD_STAFFS.WSIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SHIFTID() As Long
            Get
                Return CType(Me(Me.tableWARD_STAFFS.SHIFTIDColumn),Long)
            End Get
            Set
                Me(Me.tableWARD_STAFFS.SHIFTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFID() As String
            Get
                Return CType(Me(Me.tableWARD_STAFFS.STAFFIDColumn),String)
            End Get
            Set
                Me(Me.tableWARD_STAFFS.STAFFIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WARDID() As String
            Get
                Return CType(Me(Me.tableWARD_STAFFS.WARDIDColumn),String)
            End Get
            Set
                Me(Me.tableWARD_STAFFS.WARDIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SHIFTSRow() As SHIFTSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013319")),SHIFTSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013319"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFSRow() As STAFFSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013320")),STAFFSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013320"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WARDSRow() As WARDSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_C0013321")),WARDSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_C0013321"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class WARDSRow
        Inherits Global.System.Data.DataRow
        
        Private tableWARDS As WARDSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWARDS = CType(Me.Table,WARDSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tableWARDS.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableWARDS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WARDID() As String
            Get
                Return CType(Me(Me.tableWARDS.WARDIDColumn),String)
            End Get
            Set
                Me(Me.tableWARDS.WARDIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WARDNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableWARDS.WARDNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WARDNAME' in table 'WARDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWARDS.WARDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WARDLOCATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableWARDS.WARDLOCATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WARDLOCATION' in table 'WARDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWARDS.WARDLOCATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WARDTEL() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWARDS.WARDTELColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WARDTEL' in table 'WARDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWARDS.WARDTELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TOTALBED() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWARDS.TOTALBEDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALBED' in table 'WARDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWARDS.TOTALBEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsWARDNAMENull() As Boolean
            Return Me.IsNull(Me.tableWARDS.WARDNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetWARDNAMENull()
            Me(Me.tableWARDS.WARDNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsWARDLOCATIONNull() As Boolean
            Return Me.IsNull(Me.tableWARDS.WARDLOCATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetWARDLOCATIONNull()
            Me(Me.tableWARDS.WARDLOCATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsWARDTELNull() As Boolean
            Return Me.IsNull(Me.tableWARDS.WARDTELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetWARDTELNull()
            Me(Me.tableWARDS.WARDTELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTOTALBEDNull() As Boolean
            Return Me.IsNull(Me.tableWARDS.TOTALBEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTOTALBEDNull()
            Me(Me.tableWARDS.TOTALBEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetBEDSRows() As BEDSRow()
            If (Me.Table.ChildRelations("SYS_C0013318") Is Nothing) Then
                Return New BEDSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013318")),BEDSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetIN_PATIENTSRows() As IN_PATIENTSRow()
            If (Me.Table.ChildRelations("SYS_C0013332") Is Nothing) Then
                Return New IN_PATIENTSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013332")),IN_PATIENTSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPATIENT_VISITSRows() As PATIENT_VISITSRow()
            If (Me.Table.ChildRelations("SYS_C0013325") Is Nothing) Then
                Return New PATIENT_VISITSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013325")),PATIENT_VISITSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetPATIENT_WARDSRows() As PATIENT_WARDSRow()
            If (Me.Table.ChildRelations("SYS_C0013330") Is Nothing) Then
                Return New PATIENT_WARDSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013330")),PATIENT_WARDSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetWARD_STAFFSRows() As WARD_STAFFSRow()
            If (Me.Table.ChildRelations("SYS_C0013321") Is Nothing) Then
                Return New WARD_STAFFSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_C0013321")),WARD_STAFFSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class WARD_REQUESTSRow
        Inherits Global.System.Data.DataRow
        
        Private tableWARD_REQUESTS As WARD_REQUESTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWARD_REQUESTS = CType(Me.Table,WARD_REQUESTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property REQID() As String
            Get
                Return CType(Me(Me.tableWARD_REQUESTS.REQIDColumn),String)
            End Get
            Set
                Me(Me.tableWARD_REQUESTS.REQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property STAFFID() As String
            Get
                Try 
                    Return CType(Me(Me.tableWARD_REQUESTS.STAFFIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STAFFID' in table 'WARD_REQUESTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWARD_REQUESTS.STAFFIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CNID() As String
            Get
                Try 
                    Return CType(Me(Me.tableWARD_REQUESTS.CNIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CNID' in table 'WARD_REQUESTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWARD_REQUESTS.CNIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property WARDID() As String
            Get
                Return CType(Me(Me.tableWARD_REQUESTS.WARDIDColumn),String)
            End Get
            Set
                Me(Me.tableWARD_REQUESTS.WARDIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MEID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWARD_REQUESTS.MEIDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEID' in table 'WARD_REQUESTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWARD_REQUESTS.MEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MMID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWARD_REQUESTS.MMIDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MMID' in table 'WARD_REQUESTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWARD_REQUESTS.MMIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DOSAGE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableWARD_REQUESTS.DOSAGEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOSAGE' in table 'WARD_REQUESTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWARD_REQUESTS.DOSAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property COUNT() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWARD_REQUESTS.COUNTColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUNT' in table 'WARD_REQUESTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWARD_REQUESTS.COUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DATEREQ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWARD_REQUESTS.DATEREQColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEREQ' in table 'WARD_REQUESTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWARD_REQUESTS.DATEREQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CREATEAT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWARD_REQUESTS.CREATEATColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATEAT' in table 'WARD_REQUESTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWARD_REQUESTS.CREATEATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsSTAFFIDNull() As Boolean
            Return Me.IsNull(Me.tableWARD_REQUESTS.STAFFIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetSTAFFIDNull()
            Me(Me.tableWARD_REQUESTS.STAFFIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCNIDNull() As Boolean
            Return Me.IsNull(Me.tableWARD_REQUESTS.CNIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCNIDNull()
            Me(Me.tableWARD_REQUESTS.CNIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsMEIDNull() As Boolean
            Return Me.IsNull(Me.tableWARD_REQUESTS.MEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetMEIDNull()
            Me(Me.tableWARD_REQUESTS.MEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsMMIDNull() As Boolean
            Return Me.IsNull(Me.tableWARD_REQUESTS.MMIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetMMIDNull()
            Me(Me.tableWARD_REQUESTS.MMIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsDOSAGENull() As Boolean
            Return Me.IsNull(Me.tableWARD_REQUESTS.DOSAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetDOSAGENull()
            Me(Me.tableWARD_REQUESTS.DOSAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableWARD_REQUESTS.COUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCOUNTNull()
            Me(Me.tableWARD_REQUESTS.COUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsDATEREQNull() As Boolean
            Return Me.IsNull(Me.tableWARD_REQUESTS.DATEREQColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetDATEREQNull()
            Me(Me.tableWARD_REQUESTS.DATEREQColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCREATEATNull() As Boolean
            Return Me.IsNull(Me.tableWARD_REQUESTS.CREATEATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCREATEATNull()
            Me(Me.tableWARD_REQUESTS.CREATEATColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class BEDSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BEDSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As BEDSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As BEDSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class IN_PATIENTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IN_PATIENTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As IN_PATIENTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As IN_PATIENTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class LOCALDOCTORSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LOCALDOCTORSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As LOCALDOCTORSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As LOCALDOCTORSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class LOGIN_LOGSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LOGIN_LOGSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As LOGIN_LOGSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As LOGIN_LOGSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class MED_EQUIPMENTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MED_EQUIPMENTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As MED_EQUIPMENTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As MED_EQUIPMENTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class MED_MEDICINESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MED_MEDICINESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As MED_MEDICINESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As MED_MEDICINESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class PATIENT_KINSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PATIENT_KINSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As PATIENT_KINSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As PATIENT_KINSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class PATIENT_VISITSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PATIENT_VISITSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As PATIENT_VISITSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As PATIENT_VISITSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class PATIENT_WARDSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PATIENT_WARDSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As PATIENT_WARDSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As PATIENT_WARDSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class PATIENTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PATIENTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As PATIENTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As PATIENTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class PW_PRESCRIPTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PW_PRESCRIPTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As PW_PRESCRIPTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As PW_PRESCRIPTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class SHIFTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SHIFTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As SHIFTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As SHIFTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class STAFF_EXPERIENCESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As STAFF_EXPERIENCESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As STAFF_EXPERIENCESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As STAFF_EXPERIENCESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class STAFF_QUALIFICATESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As STAFF_QUALIFICATESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As STAFF_QUALIFICATESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As STAFF_QUALIFICATESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class STAFFSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As STAFFSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As STAFFSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As STAFFSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class SUPPILERSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SUPPILERSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As SUPPILERSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As SUPPILERSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class WARD_STAFFSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WARD_STAFFSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As WARD_STAFFSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As WARD_STAFFSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class WARDSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WARDSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As WARDSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As WARDSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class WARD_REQUESTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WARD_REQUESTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As WARD_REQUESTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As WARD_REQUESTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSet1TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BEDSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BEDS"
            tableMapping.ColumnMappings.Add("BEDID", "BEDID")
            tableMapping.ColumnMappings.Add("WARDID", "WARDID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""BEDS"" WHERE ((""BEDID"" = :Original_BEDID) AND (""WARDID"" = "& _ 
                ":Original_WARDID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_BEDID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BEDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""BEDS"" (""BEDID"", ""WARDID"") VALUES (:BEDID, :WARDID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "BEDID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BEDID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""BEDS"" SET ""BEDID"" = :BEDID, ""WARDID"" = :WARDID WHERE ((""BEDID"""& _ 
                " = :Original_BEDID) AND (""WARDID"" = :Original_WARDID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "BEDID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BEDID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_BEDID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BEDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT BEDID, WARDID FROM B6301170.BEDS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.BEDSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.BEDSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.BEDSDataTable = New DataSet1.BEDSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.BEDSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "BEDS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_BEDID As Long, ByVal Original_WARDID As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_BEDID,Long)
            If (Original_WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WARDID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_WARDID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal BEDID As Long, ByVal WARDID As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(BEDID,Long)
            If (WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WARDID")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(WARDID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal BEDID As Long, ByVal WARDID As String, ByVal Original_BEDID As Long, ByVal Original_WARDID As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(BEDID,Long)
            If (WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WARDID")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(WARDID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_BEDID,Long)
            If (Original_WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WARDID")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_WARDID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal WARDID As String, ByVal Original_BEDID As Long, ByVal Original_WARDID As String) As Integer
            Return Me.Update(Original_BEDID, WARDID, Original_BEDID, Original_WARDID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IN_PATIENTSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IN_PATIENTS"
            tableMapping.ColumnMappings.Add("PWID", "PWID")
            tableMapping.ColumnMappings.Add("WARDID", "WARDID")
            tableMapping.ColumnMappings.Add("BEDID", "BEDID")
            tableMapping.ColumnMappings.Add("ON_WATING_DATE", "ON_WATING_DATE")
            tableMapping.ColumnMappings.Add("ISGETBED", "ISGETBED")
            tableMapping.ColumnMappings.Add("DATE_PLACE", "DATE_PLACE")
            tableMapping.ColumnMappings.Add("DATE_EXPECTED", "DATE_EXPECTED")
            tableMapping.ColumnMappings.Add("DATE_LEAVE", "DATE_LEAVE")
            tableMapping.ColumnMappings.Add("PATIENT_STATUS", "PATIENT_STATUS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""IN_PATIENTS"" WHERE ((""PWID"" = :Original_PWID) AND (""WARDI"& _ 
                "D"" = :Original_WARDID) AND ((:IsNull_BEDID = 1 AND ""BEDID"" IS NULL) OR (""BEDID"" "& _ 
                "= :Original_BEDID)) AND (""ON_WATING_DATE"" = :Original_ON_WATING_DATE) AND (""ISGE"& _ 
                "TBED"" = :Original_ISGETBED) AND ((:IsNull_DATE_PLACE = 1 AND ""DATE_PLACE"" IS NUL"& _ 
                "L) OR (""DATE_PLACE"" = :Original_DATE_PLACE)) AND ((:IsNull_DATE_EXPECTED = 1 AND"& _ 
                " ""DATE_EXPECTED"" IS NULL) OR (""DATE_EXPECTED"" = :Original_DATE_EXPECTED)) AND (("& _ 
                ":IsNull_DATE_LEAVE = 1 AND ""DATE_LEAVE"" IS NULL) OR (""DATE_LEAVE"" = :Original_DA"& _ 
                "TE_LEAVE)) AND ((:IsNull_PATIENT_STATUS = 1 AND ""PATIENT_STATUS"" IS NULL) OR (""P"& _ 
                "ATIENT_STATUS"" = :Original_PATIENT_STATUS)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PWID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 42
            param.IsNullable = true
            param.SourceColumn = "PWID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_BEDID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BEDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_BEDID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BEDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ON_WATING_DATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ON_WATING_DATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ISGETBED"
            param.DbType = Global.System.Data.DbType.Int16
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int16
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ISGETBED"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_DATE_PLACE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_PLACE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DATE_PLACE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_PLACE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_DATE_EXPECTED"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DATE_EXPECTED"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DATE_EXPECTED"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DATE_EXPECTED"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_DATE_LEAVE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_LEAVE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DATE_LEAVE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_LEAVE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_PATIENT_STATUS"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PATIENT_STATUS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PATIENT_STATUS"
            param.DbType = Global.System.Data.DbType.Int16
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int16
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PATIENT_STATUS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""IN_PATIENTS"" (""PWID"", ""WARDID"", ""BEDID"", ""ON_WATING_DATE"""& _ 
                ", ""ISGETBED"", ""DATE_PLACE"", ""DATE_EXPECTED"", ""DATE_LEAVE"", ""PATIENT_STATUS"") VAL"& _ 
                "UES (:PWID, :WARDID, :BEDID, :ON_WATING_DATE, :ISGETBED, :DATE_PLACE, :DATE_EXPE"& _ 
                "CTED, :DATE_LEAVE, :PATIENT_STATUS)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PWID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 42
            param.IsNullable = true
            param.SourceColumn = "PWID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "BEDID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BEDID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ON_WATING_DATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ON_WATING_DATE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ISGETBED"
            param.DbType = Global.System.Data.DbType.Int16
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int16
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ISGETBED"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DATE_PLACE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_PLACE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DATE_EXPECTED"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DATE_EXPECTED"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DATE_LEAVE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_LEAVE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PATIENT_STATUS"
            param.DbType = Global.System.Data.DbType.Int16
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int16
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PATIENT_STATUS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""IN_PATIENTS"" SET ""PWID"" = :PWID, ""WARDID"" = :WARDID, ""BEDID"" ="& _ 
                " :BEDID, ""ON_WATING_DATE"" = :ON_WATING_DATE, ""ISGETBED"" = :ISGETBED, ""DATE_PLACE"& _ 
                """ = :DATE_PLACE, ""DATE_EXPECTED"" = :DATE_EXPECTED, ""DATE_LEAVE"" = :DATE_LEAVE, """& _ 
                "PATIENT_STATUS"" = :PATIENT_STATUS WHERE ((""PWID"" = :Original_PWID) AND (""WARDID"""& _ 
                " = :Original_WARDID) AND ((:IsNull_BEDID = 1 AND ""BEDID"" IS NULL) OR (""BEDID"" = "& _ 
                ":Original_BEDID)) AND (""ON_WATING_DATE"" = :Original_ON_WATING_DATE) AND (""ISGETB"& _ 
                "ED"" = :Original_ISGETBED) AND ((:IsNull_DATE_PLACE = 1 AND ""DATE_PLACE"" IS NULL)"& _ 
                " OR (""DATE_PLACE"" = :Original_DATE_PLACE)) AND ((:IsNull_DATE_EXPECTED = 1 AND """& _ 
                "DATE_EXPECTED"" IS NULL) OR (""DATE_EXPECTED"" = :Original_DATE_EXPECTED)) AND ((:I"& _ 
                "sNull_DATE_LEAVE = 1 AND ""DATE_LEAVE"" IS NULL) OR (""DATE_LEAVE"" = :Original_DATE"& _ 
                "_LEAVE)) AND ((:IsNull_PATIENT_STATUS = 1 AND ""PATIENT_STATUS"" IS NULL) OR (""PAT"& _ 
                "IENT_STATUS"" = :Original_PATIENT_STATUS)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PWID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 42
            param.IsNullable = true
            param.SourceColumn = "PWID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "BEDID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BEDID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ON_WATING_DATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ON_WATING_DATE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ISGETBED"
            param.DbType = Global.System.Data.DbType.Int16
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int16
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ISGETBED"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DATE_PLACE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_PLACE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DATE_EXPECTED"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DATE_EXPECTED"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DATE_LEAVE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_LEAVE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PATIENT_STATUS"
            param.DbType = Global.System.Data.DbType.Int16
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int16
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PATIENT_STATUS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PWID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 42
            param.IsNullable = true
            param.SourceColumn = "PWID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_BEDID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BEDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_BEDID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BEDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ON_WATING_DATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ON_WATING_DATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ISGETBED"
            param.DbType = Global.System.Data.DbType.Int16
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int16
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ISGETBED"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_DATE_PLACE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_PLACE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DATE_PLACE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_PLACE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_DATE_EXPECTED"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DATE_EXPECTED"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DATE_EXPECTED"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DATE_EXPECTED"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_DATE_LEAVE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_LEAVE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DATE_LEAVE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_LEAVE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_PATIENT_STATUS"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PATIENT_STATUS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PATIENT_STATUS"
            param.DbType = Global.System.Data.DbType.Int16
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int16
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PATIENT_STATUS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PWID, WARDID, BEDID, ON_WATING_DATE, ISGETBED, DATE_PLACE, DATE_EXPECTED, "& _ 
                "DATE_LEAVE, PATIENT_STATUS FROM B6301170.IN_PATIENTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.IN_PATIENTSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.IN_PATIENTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.IN_PATIENTSDataTable = New DataSet1.IN_PATIENTSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.IN_PATIENTSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "IN_PATIENTS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PWID As String, ByVal Original_WARDID As String, ByVal Original_BEDID As Global.System.Nullable(Of Long), ByVal Original_ON_WATING_DATE As Date, ByVal Original_ISGETBED As Short, ByVal Original_DATE_PLACE As Global.System.Nullable(Of Date), ByVal Original_DATE_EXPECTED As Global.System.Nullable(Of Long), ByVal Original_DATE_LEAVE As Global.System.Nullable(Of Date), ByVal Original_PATIENT_STATUS As Global.System.Nullable(Of Short)) As Integer
            If (Original_PWID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PWID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PWID,String)
            End If
            If (Original_WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WARDID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_WARDID,String)
            End If
            If (Original_BEDID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_BEDID.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ON_WATING_DATE,Date)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ISGETBED,Short)
            If (Original_DATE_PLACE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_DATE_PLACE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_DATE_EXPECTED.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_DATE_EXPECTED.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_DATE_LEAVE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_DATE_LEAVE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_PATIENT_STATUS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_PATIENT_STATUS.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PWID As String, ByVal WARDID As String, ByVal BEDID As Global.System.Nullable(Of Long), ByVal ON_WATING_DATE As Date, ByVal ISGETBED As Short, ByVal DATE_PLACE As Global.System.Nullable(Of Date), ByVal DATE_EXPECTED As Global.System.Nullable(Of Long), ByVal DATE_LEAVE As Global.System.Nullable(Of Date), ByVal PATIENT_STATUS As Global.System.Nullable(Of Short)) As Integer
            If (PWID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PWID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PWID,String)
            End If
            If (WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WARDID")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(WARDID,String)
            End If
            If (BEDID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(BEDID.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ON_WATING_DATE,Date)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ISGETBED,Short)
            If (DATE_PLACE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DATE_PLACE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DATE_EXPECTED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DATE_EXPECTED.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DATE_LEAVE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DATE_LEAVE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PATIENT_STATUS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PATIENT_STATUS.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PWID As String,  _
                    ByVal WARDID As String,  _
                    ByVal BEDID As Global.System.Nullable(Of Long),  _
                    ByVal ON_WATING_DATE As Date,  _
                    ByVal ISGETBED As Short,  _
                    ByVal DATE_PLACE As Global.System.Nullable(Of Date),  _
                    ByVal DATE_EXPECTED As Global.System.Nullable(Of Long),  _
                    ByVal DATE_LEAVE As Global.System.Nullable(Of Date),  _
                    ByVal PATIENT_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_PWID As String,  _
                    ByVal Original_WARDID As String,  _
                    ByVal Original_BEDID As Global.System.Nullable(Of Long),  _
                    ByVal Original_ON_WATING_DATE As Date,  _
                    ByVal Original_ISGETBED As Short,  _
                    ByVal Original_DATE_PLACE As Global.System.Nullable(Of Date),  _
                    ByVal Original_DATE_EXPECTED As Global.System.Nullable(Of Long),  _
                    ByVal Original_DATE_LEAVE As Global.System.Nullable(Of Date),  _
                    ByVal Original_PATIENT_STATUS As Global.System.Nullable(Of Short)) As Integer
            If (PWID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PWID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PWID,String)
            End If
            If (WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WARDID")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(WARDID,String)
            End If
            If (BEDID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(BEDID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ON_WATING_DATE,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ISGETBED,Short)
            If (DATE_PLACE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DATE_PLACE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DATE_EXPECTED.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DATE_EXPECTED.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DATE_LEAVE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(DATE_LEAVE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PATIENT_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PATIENT_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_PWID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PWID")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PWID,String)
            End If
            If (Original_WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WARDID")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_WARDID,String)
            End If
            If (Original_BEDID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_BEDID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ON_WATING_DATE,Date)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ISGETBED,Short)
            If (Original_DATE_PLACE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_DATE_PLACE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_DATE_EXPECTED.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_DATE_EXPECTED.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_DATE_LEAVE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_DATE_LEAVE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_PATIENT_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_PATIENT_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal WARDID As String,  _
                    ByVal BEDID As Global.System.Nullable(Of Long),  _
                    ByVal ON_WATING_DATE As Date,  _
                    ByVal ISGETBED As Short,  _
                    ByVal DATE_PLACE As Global.System.Nullable(Of Date),  _
                    ByVal DATE_EXPECTED As Global.System.Nullable(Of Long),  _
                    ByVal DATE_LEAVE As Global.System.Nullable(Of Date),  _
                    ByVal PATIENT_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_PWID As String,  _
                    ByVal Original_WARDID As String,  _
                    ByVal Original_BEDID As Global.System.Nullable(Of Long),  _
                    ByVal Original_ON_WATING_DATE As Date,  _
                    ByVal Original_ISGETBED As Short,  _
                    ByVal Original_DATE_PLACE As Global.System.Nullable(Of Date),  _
                    ByVal Original_DATE_EXPECTED As Global.System.Nullable(Of Long),  _
                    ByVal Original_DATE_LEAVE As Global.System.Nullable(Of Date),  _
                    ByVal Original_PATIENT_STATUS As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_PWID, WARDID, BEDID, ON_WATING_DATE, ISGETBED, DATE_PLACE, DATE_EXPECTED, DATE_LEAVE, PATIENT_STATUS, Original_PWID, Original_WARDID, Original_BEDID, Original_ON_WATING_DATE, Original_ISGETBED, Original_DATE_PLACE, Original_DATE_EXPECTED, Original_DATE_LEAVE, Original_PATIENT_STATUS)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LOCALDOCTORSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LOCALDOCTORS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("LOCALDOCID", "LOCALDOCID")
            tableMapping.ColumnMappings.Add("FULLNAME", "FULLNAME")
            tableMapping.ColumnMappings.Add("CLINICID", "CLINICID")
            tableMapping.ColumnMappings.Add("ADDRESS", "ADDRESS")
            tableMapping.ColumnMappings.Add("TEL", "TEL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""LOCALDOCTORS"" WHERE ((""ID"" = :Original_ID) AND (""LOCALDOC"& _ 
                "ID"" = :Original_LOCALDOCID) AND (""FULLNAME"" = :Original_FULLNAME) AND (""CLINICID"& _ 
                """ = :Original_CLINICID) AND (""ADDRESS"" = :Original_ADDRESS) AND (""TEL"" = :Origin"& _ 
                "al_TEL))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_LOCALDOCID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "LOCALDOCID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FULLNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "FULLNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CLINICID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CLINICID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""LOCALDOCTORS"" (""LOCALDOCID"", ""FULLNAME"", ""CLINICID"", ""ADD"& _ 
                "RESS"", ""TEL"") VALUES (:LOCALDOCID, :FULLNAME, :CLINICID, :ADDRESS, :TEL)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "LOCALDOCID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "LOCALDOCID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FULLNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "FULLNAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CLINICID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CLINICID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""LOCALDOCTORS"" SET ""LOCALDOCID"" = :LOCALDOCID, ""FULLNAME"" = :FU"& _ 
                "LLNAME, ""CLINICID"" = :CLINICID, ""ADDRESS"" = :ADDRESS, ""TEL"" = :TEL WHERE ((""ID"" "& _ 
                "= :Original_ID) AND (""LOCALDOCID"" = :Original_LOCALDOCID) AND (""FULLNAME"" = :Ori"& _ 
                "ginal_FULLNAME) AND (""CLINICID"" = :Original_CLINICID) AND (""ADDRESS"" = :Original"& _ 
                "_ADDRESS) AND (""TEL"" = :Original_TEL))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "LOCALDOCID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "LOCALDOCID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FULLNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "FULLNAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CLINICID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CLINICID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_LOCALDOCID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "LOCALDOCID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FULLNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "FULLNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CLINICID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CLINICID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, LOCALDOCID, FULLNAME, CLINICID, ADDRESS, TEL FROM B6301170.LOCALDOCTOR"& _ 
                "S"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.LOCALDOCTORSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.LOCALDOCTORSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.LOCALDOCTORSDataTable = New DataSet1.LOCALDOCTORSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.LOCALDOCTORSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "LOCALDOCTORS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Decimal, ByVal Original_LOCALDOCID As String, ByVal Original_FULLNAME As String, ByVal Original_CLINICID As String, ByVal Original_ADDRESS As String, ByVal Original_TEL As Long) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Decimal)
            If (Original_LOCALDOCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOCALDOCID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_LOCALDOCID,String)
            End If
            If (Original_FULLNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FULLNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FULLNAME,String)
            End If
            If (Original_CLINICID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CLINICID")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CLINICID,String)
            End If
            If (Original_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADDRESS")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ADDRESS,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TEL,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal LOCALDOCID As String, ByVal FULLNAME As String, ByVal CLINICID As String, ByVal ADDRESS As String, ByVal TEL As Long) As Integer
            If (LOCALDOCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOCALDOCID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(LOCALDOCID,String)
            End If
            If (FULLNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FULLNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FULLNAME,String)
            End If
            If (CLINICID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CLINICID")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CLINICID,String)
            End If
            If (ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADDRESS")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ADDRESS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(TEL,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LOCALDOCID As String, ByVal FULLNAME As String, ByVal CLINICID As String, ByVal ADDRESS As String, ByVal TEL As Long, ByVal Original_ID As Decimal, ByVal Original_LOCALDOCID As String, ByVal Original_FULLNAME As String, ByVal Original_CLINICID As String, ByVal Original_ADDRESS As String, ByVal Original_TEL As Long) As Integer
            If (LOCALDOCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOCALDOCID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LOCALDOCID,String)
            End If
            If (FULLNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FULLNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FULLNAME,String)
            End If
            If (CLINICID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CLINICID")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CLINICID,String)
            End If
            If (ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ADDRESS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TEL,Long)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID,Decimal)
            If (Original_LOCALDOCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOCALDOCID")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_LOCALDOCID,String)
            End If
            If (Original_FULLNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FULLNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FULLNAME,String)
            End If
            If (Original_CLINICID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CLINICID")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CLINICID,String)
            End If
            If (Original_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ADDRESS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_TEL,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FULLNAME As String, ByVal CLINICID As String, ByVal ADDRESS As String, ByVal TEL As Long, ByVal Original_ID As Decimal, ByVal Original_LOCALDOCID As String, ByVal Original_FULLNAME As String, ByVal Original_CLINICID As String, ByVal Original_ADDRESS As String, ByVal Original_TEL As Long) As Integer
            Return Me.Update(Original_LOCALDOCID, FULLNAME, CLINICID, ADDRESS, TEL, Original_ID, Original_LOCALDOCID, Original_FULLNAME, Original_CLINICID, Original_ADDRESS, Original_TEL)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LOGIN_LOGSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LOGIN_LOGS"
            tableMapping.ColumnMappings.Add("STAFFID", "STAFFID")
            tableMapping.ColumnMappings.Add("LOGINTIME", "LOGINTIME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""LOGIN_LOGS"" WHERE ((""STAFFID"" = :Original_STAFFID) AND ("""& _ 
                "LOGINTIME"" = :Original_LOGINTIME))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_LOGINTIME"
            param.DbType = Global.System.Data.DbType.DateTime
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.TimeStamp
            param.Size = 11
            param.IsNullable = true
            param.SourceColumn = "LOGINTIME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""LOGIN_LOGS"" (""STAFFID"", ""LOGINTIME"") VALUES (:STAFFID, :L"& _ 
                "OGINTIME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "LOGINTIME"
            param.DbType = Global.System.Data.DbType.DateTime
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.TimeStamp
            param.Size = 11
            param.IsNullable = true
            param.SourceColumn = "LOGINTIME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""LOGIN_LOGS"" SET ""STAFFID"" = :STAFFID, ""LOGINTIME"" = :LOGINTIME"& _ 
                " WHERE ((""STAFFID"" = :Original_STAFFID) AND (""LOGINTIME"" = :Original_LOGINTIME))"& _ 
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "LOGINTIME"
            param.DbType = Global.System.Data.DbType.DateTime
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.TimeStamp
            param.Size = 11
            param.IsNullable = true
            param.SourceColumn = "LOGINTIME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_LOGINTIME"
            param.DbType = Global.System.Data.DbType.DateTime
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.TimeStamp
            param.Size = 11
            param.IsNullable = true
            param.SourceColumn = "LOGINTIME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT STAFFID, LOGINTIME FROM B6301170.LOGIN_LOGS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.LOGIN_LOGSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.LOGIN_LOGSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.LOGIN_LOGSDataTable = New DataSet1.LOGIN_LOGSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.LOGIN_LOGSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "LOGIN_LOGS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_STAFFID As String, ByVal Original_LOGINTIME As Date) As Integer
            If (Original_STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STAFFID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_STAFFID,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_LOGINTIME,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal STAFFID As String, ByVal LOGINTIME As Date) As Integer
            If (STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STAFFID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(STAFFID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(LOGINTIME,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal STAFFID As String, ByVal LOGINTIME As Date, ByVal Original_STAFFID As String, ByVal Original_LOGINTIME As Date) As Integer
            If (STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STAFFID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(STAFFID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(LOGINTIME,Date)
            If (Original_STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STAFFID")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_STAFFID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_LOGINTIME,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LOGINTIME As Date, ByVal Original_STAFFID As String, ByVal Original_LOGINTIME As Date) As Integer
            Return Me.Update(Original_STAFFID, LOGINTIME, Original_STAFFID, Original_LOGINTIME)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MED_EQUIPMENTSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MED_EQUIPMENTS"
            tableMapping.ColumnMappings.Add("MEID", "MEID")
            tableMapping.ColumnMappings.Add("SUPPLIERID", "SUPPLIERID")
            tableMapping.ColumnMappings.Add("NAME", "NAME")
            tableMapping.ColumnMappings.Add("desc", "desc")
            tableMapping.ColumnMappings.Add("STOCK", "STOCK")
            tableMapping.ColumnMappings.Add("BUY_SCALE", "BUY_SCALE")
            tableMapping.ColumnMappings.Add("PRICE_PER_UNIT", "PRICE_PER_UNIT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""MED_EQUIPMENTS"" WHERE ((""MEID"" = :Original_MEID) AND ((:I"& _ 
                "sNull_SUPPLIERID = 1 AND ""SUPPLIERID"" IS NULL) OR (""SUPPLIERID"" = :Original_SUPP"& _ 
                "LIERID)) AND ((:IsNull_NAME = 1 AND ""NAME"" IS NULL) OR (""NAME"" = :Original_NAME)"& _ 
                ") AND ((:IsNull_desc = 1 AND ""desc"" IS NULL) OR (""desc"" = :Original_desc)) AND ("& _ 
                "(:IsNull_STOCK = 1 AND ""STOCK"" IS NULL) OR (""STOCK"" = :Original_STOCK)) AND ((:I"& _ 
                "sNull_BUY_SCALE = 1 AND ""BUY_SCALE"" IS NULL) OR (""BUY_SCALE"" = :Original_BUY_SCA"& _ 
                "LE)) AND ((:IsNull_PRICE_PER_UNIT = 1 AND ""PRICE_PER_UNIT"" IS NULL) OR (""PRICE_P"& _ 
                "ER_UNIT"" = :Original_PRICE_PER_UNIT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MEID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MEID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_desc"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "desc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_desc"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "desc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_STOCK"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "STOCK"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STOCK"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "STOCK"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_BUY_SCALE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BUY_SCALE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_BUY_SCALE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BUY_SCALE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_PRICE_PER_UNIT"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PRICE_PER_UNIT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PRICE_PER_UNIT"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PRICE_PER_UNIT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""MED_EQUIPMENTS"" (""MEID"", ""SUPPLIERID"", ""NAME"", ""desc"", ""S"& _ 
                "TOCK"", ""BUY_SCALE"", ""PRICE_PER_UNIT"") VALUES (:MEID, :SUPPLIERID, :NAME, :desc, "& _ 
                ":STOCK, :BUY_SCALE, :PRICE_PER_UNIT)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MEID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MEID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "desc"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "desc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STOCK"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "STOCK"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "BUY_SCALE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BUY_SCALE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PRICE_PER_UNIT"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PRICE_PER_UNIT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""MED_EQUIPMENTS"" SET ""MEID"" = :MEID, ""SUPPLIERID"" = :SUPPLIERID"& _ 
                ", ""NAME"" = :NAME, ""desc"" = :desc, ""STOCK"" = :STOCK, ""BUY_SCALE"" = :BUY_SCALE, ""P"& _ 
                "RICE_PER_UNIT"" = :PRICE_PER_UNIT WHERE ((""MEID"" = :Original_MEID) AND ((:IsNull_"& _ 
                "SUPPLIERID = 1 AND ""SUPPLIERID"" IS NULL) OR (""SUPPLIERID"" = :Original_SUPPLIERID"& _ 
                ")) AND ((:IsNull_NAME = 1 AND ""NAME"" IS NULL) OR (""NAME"" = :Original_NAME)) AND "& _ 
                "((:IsNull_desc = 1 AND ""desc"" IS NULL) OR (""desc"" = :Original_desc)) AND ((:IsNu"& _ 
                "ll_STOCK = 1 AND ""STOCK"" IS NULL) OR (""STOCK"" = :Original_STOCK)) AND ((:IsNull_"& _ 
                "BUY_SCALE = 1 AND ""BUY_SCALE"" IS NULL) OR (""BUY_SCALE"" = :Original_BUY_SCALE)) A"& _ 
                "ND ((:IsNull_PRICE_PER_UNIT = 1 AND ""PRICE_PER_UNIT"" IS NULL) OR (""PRICE_PER_UNI"& _ 
                "T"" = :Original_PRICE_PER_UNIT)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MEID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MEID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "desc"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "desc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STOCK"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "STOCK"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "BUY_SCALE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BUY_SCALE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PRICE_PER_UNIT"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PRICE_PER_UNIT"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MEID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MEID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_desc"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "desc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_desc"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "desc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_STOCK"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "STOCK"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STOCK"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "STOCK"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_BUY_SCALE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BUY_SCALE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_BUY_SCALE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BUY_SCALE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_PRICE_PER_UNIT"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PRICE_PER_UNIT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PRICE_PER_UNIT"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PRICE_PER_UNIT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MEID, SUPPLIERID, ""NAME"", ""desc"", STOCK, BUY_SCALE, PRICE_PER_UNIT FROM B6"& _ 
                "301170.MED_EQUIPMENTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.MED_EQUIPMENTSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.MED_EQUIPMENTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.MED_EQUIPMENTSDataTable = New DataSet1.MED_EQUIPMENTSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.MED_EQUIPMENTSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "MED_EQUIPMENTS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MEID As Long, ByVal Original_SUPPLIERID As Global.System.Nullable(Of Long), ByVal Original_NAME As String, ByVal Original_desc As String, ByVal Original_STOCK As Global.System.Nullable(Of Long), ByVal Original_BUY_SCALE As Global.System.Nullable(Of Double), ByVal Original_PRICE_PER_UNIT As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MEID,Long)
            If (Original_SUPPLIERID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SUPPLIERID.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_NAME,String)
            End If
            If (Original_desc Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_desc,String)
            End If
            If (Original_STOCK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_STOCK.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_BUY_SCALE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_BUY_SCALE.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_PRICE_PER_UNIT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_PRICE_PER_UNIT.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MEID As Long, ByVal SUPPLIERID As Global.System.Nullable(Of Long), ByVal NAME As String, ByVal desc As String, ByVal STOCK As Global.System.Nullable(Of Long), ByVal BUY_SCALE As Global.System.Nullable(Of Double), ByVal PRICE_PER_UNIT As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MEID,Long)
            If (SUPPLIERID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SUPPLIERID.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NAME,String)
            End If
            If (desc Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(desc,String)
            End If
            If (STOCK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(STOCK.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (BUY_SCALE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(BUY_SCALE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PRICE_PER_UNIT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PRICE_PER_UNIT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MEID As Long, ByVal SUPPLIERID As Global.System.Nullable(Of Long), ByVal NAME As String, ByVal desc As String, ByVal STOCK As Global.System.Nullable(Of Long), ByVal BUY_SCALE As Global.System.Nullable(Of Double), ByVal PRICE_PER_UNIT As Global.System.Nullable(Of Double), ByVal Original_MEID As Long, ByVal Original_SUPPLIERID As Global.System.Nullable(Of Long), ByVal Original_NAME As String, ByVal Original_desc As String, ByVal Original_STOCK As Global.System.Nullable(Of Long), ByVal Original_BUY_SCALE As Global.System.Nullable(Of Double), ByVal Original_PRICE_PER_UNIT As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MEID,Long)
            If (SUPPLIERID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SUPPLIERID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NAME,String)
            End If
            If (desc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(desc,String)
            End If
            If (STOCK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(STOCK.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (BUY_SCALE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(BUY_SCALE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PRICE_PER_UNIT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PRICE_PER_UNIT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_MEID,Long)
            If (Original_SUPPLIERID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SUPPLIERID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_NAME,String)
            End If
            If (Original_desc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_desc,String)
            End If
            If (Original_STOCK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_STOCK.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_BUY_SCALE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_BUY_SCALE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_PRICE_PER_UNIT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_PRICE_PER_UNIT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SUPPLIERID As Global.System.Nullable(Of Long), ByVal NAME As String, ByVal desc As String, ByVal STOCK As Global.System.Nullable(Of Long), ByVal BUY_SCALE As Global.System.Nullable(Of Double), ByVal PRICE_PER_UNIT As Global.System.Nullable(Of Double), ByVal Original_MEID As Long, ByVal Original_SUPPLIERID As Global.System.Nullable(Of Long), ByVal Original_NAME As String, ByVal Original_desc As String, ByVal Original_STOCK As Global.System.Nullable(Of Long), ByVal Original_BUY_SCALE As Global.System.Nullable(Of Double), ByVal Original_PRICE_PER_UNIT As Global.System.Nullable(Of Double)) As Integer
            Return Me.Update(Original_MEID, SUPPLIERID, NAME, desc, STOCK, BUY_SCALE, PRICE_PER_UNIT, Original_MEID, Original_SUPPLIERID, Original_NAME, Original_desc, Original_STOCK, Original_BUY_SCALE, Original_PRICE_PER_UNIT)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MED_MEDICINESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MED_MEDICINES"
            tableMapping.ColumnMappings.Add("MMID", "MMID")
            tableMapping.ColumnMappings.Add("SUPPLIERID", "SUPPLIERID")
            tableMapping.ColumnMappings.Add("NAME", "NAME")
            tableMapping.ColumnMappings.Add("desc", "desc")
            tableMapping.ColumnMappings.Add("DOSAGE", "DOSAGE")
            tableMapping.ColumnMappings.Add("METHOD", "METHOD")
            tableMapping.ColumnMappings.Add("STOCK", "STOCK")
            tableMapping.ColumnMappings.Add("BUY_SCALE", "BUY_SCALE")
            tableMapping.ColumnMappings.Add("PRICE_PER_UNIT", "PRICE_PER_UNIT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""MED_MEDICINES"" WHERE ((""MMID"" = :Original_MMID) AND ((:Is"& _ 
                "Null_SUPPLIERID = 1 AND ""SUPPLIERID"" IS NULL) OR (""SUPPLIERID"" = :Original_SUPPL"& _ 
                "IERID)) AND ((:IsNull_NAME = 1 AND ""NAME"" IS NULL) OR (""NAME"" = :Original_NAME))"& _ 
                " AND ((:IsNull_desc = 1 AND ""desc"" IS NULL) OR (""desc"" = :Original_desc)) AND (("& _ 
                ":IsNull_DOSAGE = 1 AND ""DOSAGE"" IS NULL) OR (""DOSAGE"" = :Original_DOSAGE)) AND ("& _ 
                "(:IsNull_METHOD = 1 AND ""METHOD"" IS NULL) OR (""METHOD"" = :Original_METHOD)) AND "& _ 
                "((:IsNull_STOCK = 1 AND ""STOCK"" IS NULL) OR (""STOCK"" = :Original_STOCK)) AND ((:"& _ 
                "IsNull_BUY_SCALE = 1 AND ""BUY_SCALE"" IS NULL) OR (""BUY_SCALE"" = :Original_BUY_SC"& _ 
                "ALE)) AND ((:IsNull_PRICE_PER_UNIT = 1 AND ""PRICE_PER_UNIT"" IS NULL) OR (""PRICE_"& _ 
                "PER_UNIT"" = :Original_PRICE_PER_UNIT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MMID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MMID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_desc"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "desc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_desc"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "desc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_DOSAGE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DOSAGE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOSAGE"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DOSAGE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_METHOD"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "METHOD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_METHOD"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "METHOD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_STOCK"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "STOCK"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STOCK"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "STOCK"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_BUY_SCALE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BUY_SCALE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_BUY_SCALE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BUY_SCALE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_PRICE_PER_UNIT"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PRICE_PER_UNIT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PRICE_PER_UNIT"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PRICE_PER_UNIT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""MED_MEDICINES"" (""MMID"", ""SUPPLIERID"", ""NAME"", ""desc"", ""DO"& _ 
                "SAGE"", ""METHOD"", ""STOCK"", ""BUY_SCALE"", ""PRICE_PER_UNIT"") VALUES (:MMID, :SUPPLIE"& _ 
                "RID, :NAME, :desc, :DOSAGE, :METHOD, :STOCK, :BUY_SCALE, :PRICE_PER_UNIT)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MMID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MMID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "desc"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "desc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOSAGE"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DOSAGE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "METHOD"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "METHOD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STOCK"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "STOCK"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "BUY_SCALE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BUY_SCALE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PRICE_PER_UNIT"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PRICE_PER_UNIT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""MED_MEDICINES"" SET ""MMID"" = :MMID, ""SUPPLIERID"" = :SUPPLIERID,"& _ 
                " ""NAME"" = :NAME, ""desc"" = :desc, ""DOSAGE"" = :DOSAGE, ""METHOD"" = :METHOD, ""STOCK"""& _ 
                " = :STOCK, ""BUY_SCALE"" = :BUY_SCALE, ""PRICE_PER_UNIT"" = :PRICE_PER_UNIT WHERE (("& _ 
                """MMID"" = :Original_MMID) AND ((:IsNull_SUPPLIERID = 1 AND ""SUPPLIERID"" IS NULL) "& _ 
                "OR (""SUPPLIERID"" = :Original_SUPPLIERID)) AND ((:IsNull_NAME = 1 AND ""NAME"" IS N"& _ 
                "ULL) OR (""NAME"" = :Original_NAME)) AND ((:IsNull_desc = 1 AND ""desc"" IS NULL) OR"& _ 
                " (""desc"" = :Original_desc)) AND ((:IsNull_DOSAGE = 1 AND ""DOSAGE"" IS NULL) OR ("""& _ 
                "DOSAGE"" = :Original_DOSAGE)) AND ((:IsNull_METHOD = 1 AND ""METHOD"" IS NULL) OR ("& _ 
                """METHOD"" = :Original_METHOD)) AND ((:IsNull_STOCK = 1 AND ""STOCK"" IS NULL) OR ("""& _ 
                "STOCK"" = :Original_STOCK)) AND ((:IsNull_BUY_SCALE = 1 AND ""BUY_SCALE"" IS NULL) "& _ 
                "OR (""BUY_SCALE"" = :Original_BUY_SCALE)) AND ((:IsNull_PRICE_PER_UNIT = 1 AND ""PR"& _ 
                "ICE_PER_UNIT"" IS NULL) OR (""PRICE_PER_UNIT"" = :Original_PRICE_PER_UNIT)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MMID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MMID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "desc"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "desc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOSAGE"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DOSAGE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "METHOD"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "METHOD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STOCK"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "STOCK"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "BUY_SCALE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BUY_SCALE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PRICE_PER_UNIT"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PRICE_PER_UNIT"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MMID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MMID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_desc"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "desc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_desc"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "desc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_DOSAGE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DOSAGE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOSAGE"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DOSAGE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_METHOD"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "METHOD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_METHOD"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "METHOD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_STOCK"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "STOCK"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STOCK"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "STOCK"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_BUY_SCALE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BUY_SCALE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_BUY_SCALE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "BUY_SCALE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_PRICE_PER_UNIT"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PRICE_PER_UNIT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PRICE_PER_UNIT"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "PRICE_PER_UNIT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MMID, SUPPLIERID, ""NAME"", ""desc"", DOSAGE, METHOD, STOCK, BUY_SCALE, PRICE_"& _ 
                "PER_UNIT FROM B6301170.MED_MEDICINES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.MED_MEDICINESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.MED_MEDICINESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.MED_MEDICINESDataTable = New DataSet1.MED_MEDICINESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.MED_MEDICINESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "MED_MEDICINES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MMID As Long, ByVal Original_SUPPLIERID As Global.System.Nullable(Of Long), ByVal Original_NAME As String, ByVal Original_desc As String, ByVal Original_DOSAGE As Global.System.Nullable(Of Long), ByVal Original_METHOD As String, ByVal Original_STOCK As Global.System.Nullable(Of Long), ByVal Original_BUY_SCALE As Global.System.Nullable(Of Double), ByVal Original_PRICE_PER_UNIT As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MMID,Long)
            If (Original_SUPPLIERID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SUPPLIERID.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_NAME,String)
            End If
            If (Original_desc Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_desc,String)
            End If
            If (Original_DOSAGE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_DOSAGE.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_METHOD Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_METHOD,String)
            End If
            If (Original_STOCK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_STOCK.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_BUY_SCALE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_BUY_SCALE.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_PRICE_PER_UNIT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_PRICE_PER_UNIT.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MMID As Long, ByVal SUPPLIERID As Global.System.Nullable(Of Long), ByVal NAME As String, ByVal desc As String, ByVal DOSAGE As Global.System.Nullable(Of Long), ByVal METHOD As String, ByVal STOCK As Global.System.Nullable(Of Long), ByVal BUY_SCALE As Global.System.Nullable(Of Double), ByVal PRICE_PER_UNIT As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MMID,Long)
            If (SUPPLIERID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SUPPLIERID.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NAME,String)
            End If
            If (desc Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(desc,String)
            End If
            If (DOSAGE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DOSAGE.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (METHOD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(METHOD,String)
            End If
            If (STOCK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(STOCK.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BUY_SCALE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(BUY_SCALE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PRICE_PER_UNIT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PRICE_PER_UNIT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MMID As Long,  _
                    ByVal SUPPLIERID As Global.System.Nullable(Of Long),  _
                    ByVal NAME As String,  _
                    ByVal desc As String,  _
                    ByVal DOSAGE As Global.System.Nullable(Of Long),  _
                    ByVal METHOD As String,  _
                    ByVal STOCK As Global.System.Nullable(Of Long),  _
                    ByVal BUY_SCALE As Global.System.Nullable(Of Double),  _
                    ByVal PRICE_PER_UNIT As Global.System.Nullable(Of Double),  _
                    ByVal Original_MMID As Long,  _
                    ByVal Original_SUPPLIERID As Global.System.Nullable(Of Long),  _
                    ByVal Original_NAME As String,  _
                    ByVal Original_desc As String,  _
                    ByVal Original_DOSAGE As Global.System.Nullable(Of Long),  _
                    ByVal Original_METHOD As String,  _
                    ByVal Original_STOCK As Global.System.Nullable(Of Long),  _
                    ByVal Original_BUY_SCALE As Global.System.Nullable(Of Double),  _
                    ByVal Original_PRICE_PER_UNIT As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MMID,Long)
            If (SUPPLIERID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SUPPLIERID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NAME,String)
            End If
            If (desc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(desc,String)
            End If
            If (DOSAGE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DOSAGE.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (METHOD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(METHOD,String)
            End If
            If (STOCK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(STOCK.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BUY_SCALE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(BUY_SCALE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PRICE_PER_UNIT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PRICE_PER_UNIT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_MMID,Long)
            If (Original_SUPPLIERID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_SUPPLIERID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_NAME,String)
            End If
            If (Original_desc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_desc,String)
            End If
            If (Original_DOSAGE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_DOSAGE.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_METHOD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_METHOD,String)
            End If
            If (Original_STOCK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_STOCK.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_BUY_SCALE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_BUY_SCALE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_PRICE_PER_UNIT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_PRICE_PER_UNIT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SUPPLIERID As Global.System.Nullable(Of Long),  _
                    ByVal NAME As String,  _
                    ByVal desc As String,  _
                    ByVal DOSAGE As Global.System.Nullable(Of Long),  _
                    ByVal METHOD As String,  _
                    ByVal STOCK As Global.System.Nullable(Of Long),  _
                    ByVal BUY_SCALE As Global.System.Nullable(Of Double),  _
                    ByVal PRICE_PER_UNIT As Global.System.Nullable(Of Double),  _
                    ByVal Original_MMID As Long,  _
                    ByVal Original_SUPPLIERID As Global.System.Nullable(Of Long),  _
                    ByVal Original_NAME As String,  _
                    ByVal Original_desc As String,  _
                    ByVal Original_DOSAGE As Global.System.Nullable(Of Long),  _
                    ByVal Original_METHOD As String,  _
                    ByVal Original_STOCK As Global.System.Nullable(Of Long),  _
                    ByVal Original_BUY_SCALE As Global.System.Nullable(Of Double),  _
                    ByVal Original_PRICE_PER_UNIT As Global.System.Nullable(Of Double)) As Integer
            Return Me.Update(Original_MMID, SUPPLIERID, NAME, desc, DOSAGE, METHOD, STOCK, BUY_SCALE, PRICE_PER_UNIT, Original_MMID, Original_SUPPLIERID, Original_NAME, Original_desc, Original_DOSAGE, Original_METHOD, Original_STOCK, Original_BUY_SCALE, Original_PRICE_PER_UNIT)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PATIENT_KINSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PATIENT_KINS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("KINSID", "KINSID")
            tableMapping.ColumnMappings.Add("FULLNAME", "FULLNAME")
            tableMapping.ColumnMappings.Add("ADDRESS", "ADDRESS")
            tableMapping.ColumnMappings.Add("RELATIONSHIP", "RELATIONSHIP")
            tableMapping.ColumnMappings.Add("TEL", "TEL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""PATIENT_KINS"" WHERE ((""ID"" = :Original_ID) AND (""KINSID"" "& _ 
                "= :Original_KINSID) AND (""FULLNAME"" = :Original_FULLNAME) AND (""ADDRESS"" = :Orig"& _ 
                "inal_ADDRESS) AND (""RELATIONSHIP"" = :Original_RELATIONSHIP) AND (""TEL"" = :Origin"& _ 
                "al_TEL))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_KINSID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "KINSID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FULLNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "FULLNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_RELATIONSHIP"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "RELATIONSHIP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""PATIENT_KINS"" (""KINSID"", ""FULLNAME"", ""ADDRESS"", ""RELATION"& _ 
                "SHIP"", ""TEL"") VALUES (:KINSID, :FULLNAME, :ADDRESS, :RELATIONSHIP, :TEL)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "KINSID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "KINSID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FULLNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "FULLNAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "RELATIONSHIP"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "RELATIONSHIP"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""PATIENT_KINS"" SET ""KINSID"" = :KINSID, ""FULLNAME"" = :FULLNAME, "& _ 
                """ADDRESS"" = :ADDRESS, ""RELATIONSHIP"" = :RELATIONSHIP, ""TEL"" = :TEL WHERE ((""ID"" "& _ 
                "= :Original_ID) AND (""KINSID"" = :Original_KINSID) AND (""FULLNAME"" = :Original_FU"& _ 
                "LLNAME) AND (""ADDRESS"" = :Original_ADDRESS) AND (""RELATIONSHIP"" = :Original_RELA"& _ 
                "TIONSHIP) AND (""TEL"" = :Original_TEL))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "KINSID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "KINSID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FULLNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "FULLNAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "RELATIONSHIP"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "RELATIONSHIP"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_KINSID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "KINSID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FULLNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "FULLNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_RELATIONSHIP"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "RELATIONSHIP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, KINSID, FULLNAME, ADDRESS, RELATIONSHIP, TEL FROM B6301170.PATIENT_KIN"& _ 
                "S"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.PATIENT_KINSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.PATIENT_KINSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.PATIENT_KINSDataTable = New DataSet1.PATIENT_KINSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.PATIENT_KINSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "PATIENT_KINS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Decimal, ByVal Original_KINSID As String, ByVal Original_FULLNAME As String, ByVal Original_ADDRESS As String, ByVal Original_RELATIONSHIP As String, ByVal Original_TEL As Long) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Decimal)
            If (Original_KINSID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_KINSID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_KINSID,String)
            End If
            If (Original_FULLNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FULLNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FULLNAME,String)
            End If
            If (Original_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADDRESS")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ADDRESS,String)
            End If
            If (Original_RELATIONSHIP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RELATIONSHIP")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_RELATIONSHIP,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TEL,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal KINSID As String, ByVal FULLNAME As String, ByVal ADDRESS As String, ByVal RELATIONSHIP As String, ByVal TEL As Long) As Integer
            If (KINSID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KINSID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(KINSID,String)
            End If
            If (FULLNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FULLNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FULLNAME,String)
            End If
            If (ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADDRESS")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ADDRESS,String)
            End If
            If (RELATIONSHIP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RELATIONSHIP")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RELATIONSHIP,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(TEL,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal KINSID As String, ByVal FULLNAME As String, ByVal ADDRESS As String, ByVal RELATIONSHIP As String, ByVal TEL As Long, ByVal Original_ID As Decimal, ByVal Original_KINSID As String, ByVal Original_FULLNAME As String, ByVal Original_ADDRESS As String, ByVal Original_RELATIONSHIP As String, ByVal Original_TEL As Long) As Integer
            If (KINSID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KINSID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(KINSID,String)
            End If
            If (FULLNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FULLNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FULLNAME,String)
            End If
            If (ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ADDRESS,String)
            End If
            If (RELATIONSHIP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RELATIONSHIP")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RELATIONSHIP,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TEL,Long)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID,Decimal)
            If (Original_KINSID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_KINSID")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_KINSID,String)
            End If
            If (Original_FULLNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FULLNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FULLNAME,String)
            End If
            If (Original_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ADDRESS,String)
            End If
            If (Original_RELATIONSHIP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RELATIONSHIP")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_RELATIONSHIP,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_TEL,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FULLNAME As String, ByVal ADDRESS As String, ByVal RELATIONSHIP As String, ByVal TEL As Long, ByVal Original_ID As Decimal, ByVal Original_KINSID As String, ByVal Original_FULLNAME As String, ByVal Original_ADDRESS As String, ByVal Original_RELATIONSHIP As String, ByVal Original_TEL As Long) As Integer
            Return Me.Update(Original_KINSID, FULLNAME, ADDRESS, RELATIONSHIP, TEL, Original_ID, Original_KINSID, Original_FULLNAME, Original_ADDRESS, Original_RELATIONSHIP, Original_TEL)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PATIENT_VISITSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PATIENT_VISITS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("VISITID", "VISITID")
            tableMapping.ColumnMappings.Add("PATIENTID", "PATIENTID")
            tableMapping.ColumnMappings.Add("STAFFID", "STAFFID")
            tableMapping.ColumnMappings.Add("DOCTORID", "DOCTORID")
            tableMapping.ColumnMappings.Add("WARDID", "WARDID")
            tableMapping.ColumnMappings.Add("APP_DATE", "APP_DATE")
            tableMapping.ColumnMappings.Add("APP_TYPE", "APP_TYPE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""PATIENT_VISITS"" WHERE ((""ID"" = :Original_ID) AND (""VISITI"& _ 
                "D"" = :Original_VISITID) AND (""PATIENTID"" = :Original_PATIENTID) AND (""STAFFID"" ="& _ 
                " :Original_STAFFID) AND (""DOCTORID"" = :Original_DOCTORID) AND (""WARDID"" = :Origi"& _ 
                "nal_WARDID) AND (""APP_DATE"" = :Original_APP_DATE) AND (""APP_TYPE"" = :Original_AP"& _ 
                "P_TYPE))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_VISITID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "VISITID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PATIENTID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "PATIENTID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_APP_DATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "APP_DATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_APP_TYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "APP_TYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""PATIENT_VISITS"" (""VISITID"", ""PATIENTID"", ""STAFFID"", ""DOCT"& _ 
                "ORID"", ""WARDID"", ""APP_DATE"", ""APP_TYPE"") VALUES (:VISITID, :PATIENTID, :STAFFID,"& _ 
                " :DOCTORID, :WARDID, :APP_DATE, :APP_TYPE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "VISITID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "VISITID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PATIENTID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "PATIENTID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APP_DATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "APP_DATE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APP_TYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "APP_TYPE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""PATIENT_VISITS"" SET ""VISITID"" = :VISITID, ""PATIENTID"" = :PATIE"& _ 
                "NTID, ""STAFFID"" = :STAFFID, ""DOCTORID"" = :DOCTORID, ""WARDID"" = :WARDID, ""APP_DAT"& _ 
                "E"" = :APP_DATE, ""APP_TYPE"" = :APP_TYPE WHERE ((""ID"" = :Original_ID) AND (""VISITI"& _ 
                "D"" = :Original_VISITID) AND (""PATIENTID"" = :Original_PATIENTID) AND (""STAFFID"" ="& _ 
                " :Original_STAFFID) AND (""DOCTORID"" = :Original_DOCTORID) AND (""WARDID"" = :Origi"& _ 
                "nal_WARDID) AND (""APP_DATE"" = :Original_APP_DATE) AND (""APP_TYPE"" = :Original_AP"& _ 
                "P_TYPE))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "VISITID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "VISITID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PATIENTID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "PATIENTID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APP_DATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "APP_DATE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "APP_TYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "APP_TYPE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_VISITID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "VISITID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PATIENTID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "PATIENTID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_APP_DATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "APP_DATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_APP_TYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "APP_TYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, VISITID, PATIENTID, STAFFID, DOCTORID, WARDID, APP_DATE, APP_TYPE FROM"& _ 
                " B6301170.PATIENT_VISITS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.PATIENT_VISITSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.PATIENT_VISITSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.PATIENT_VISITSDataTable = New DataSet1.PATIENT_VISITSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.PATIENT_VISITSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "PATIENT_VISITS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Decimal, ByVal Original_VISITID As String, ByVal Original_PATIENTID As String, ByVal Original_STAFFID As String, ByVal Original_DOCTORID As String, ByVal Original_WARDID As String, ByVal Original_APP_DATE As Date, ByVal Original_APP_TYPE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Decimal)
            If (Original_VISITID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VISITID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_VISITID,String)
            End If
            If (Original_PATIENTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PATIENTID")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PATIENTID,String)
            End If
            If (Original_STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STAFFID")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_STAFFID,String)
            End If
            If (Original_DOCTORID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DOCTORID")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DOCTORID,String)
            End If
            If (Original_WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WARDID")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_WARDID,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_APP_DATE,Date)
            If (Original_APP_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_APP_TYPE")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_APP_TYPE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal VISITID As String, ByVal PATIENTID As String, ByVal STAFFID As String, ByVal DOCTORID As String, ByVal WARDID As String, ByVal APP_DATE As Date, ByVal APP_TYPE As String) As Integer
            If (VISITID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VISITID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(VISITID,String)
            End If
            If (PATIENTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PATIENTID")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PATIENTID,String)
            End If
            If (STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STAFFID")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(STAFFID,String)
            End If
            If (DOCTORID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DOCTORID")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DOCTORID,String)
            End If
            If (WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WARDID")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(WARDID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(APP_DATE,Date)
            If (APP_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("APP_TYPE")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(APP_TYPE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal VISITID As String, ByVal PATIENTID As String, ByVal STAFFID As String, ByVal DOCTORID As String, ByVal WARDID As String, ByVal APP_DATE As Date, ByVal APP_TYPE As String, ByVal Original_ID As Decimal, ByVal Original_VISITID As String, ByVal Original_PATIENTID As String, ByVal Original_STAFFID As String, ByVal Original_DOCTORID As String, ByVal Original_WARDID As String, ByVal Original_APP_DATE As Date, ByVal Original_APP_TYPE As String) As Integer
            If (VISITID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VISITID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(VISITID,String)
            End If
            If (PATIENTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PATIENTID")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PATIENTID,String)
            End If
            If (STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STAFFID")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(STAFFID,String)
            End If
            If (DOCTORID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DOCTORID")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DOCTORID,String)
            End If
            If (WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WARDID")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(WARDID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(APP_DATE,Date)
            If (APP_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("APP_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(APP_TYPE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID,Decimal)
            If (Original_VISITID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VISITID")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_VISITID,String)
            End If
            If (Original_PATIENTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PATIENTID")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PATIENTID,String)
            End If
            If (Original_STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STAFFID")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_STAFFID,String)
            End If
            If (Original_DOCTORID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DOCTORID")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_DOCTORID,String)
            End If
            If (Original_WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WARDID")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_WARDID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_APP_DATE,Date)
            If (Original_APP_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_APP_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_APP_TYPE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PATIENTID As String, ByVal STAFFID As String, ByVal DOCTORID As String, ByVal WARDID As String, ByVal APP_DATE As Date, ByVal APP_TYPE As String, ByVal Original_ID As Decimal, ByVal Original_VISITID As String, ByVal Original_PATIENTID As String, ByVal Original_STAFFID As String, ByVal Original_DOCTORID As String, ByVal Original_WARDID As String, ByVal Original_APP_DATE As Date, ByVal Original_APP_TYPE As String) As Integer
            Return Me.Update(Original_VISITID, PATIENTID, STAFFID, DOCTORID, WARDID, APP_DATE, APP_TYPE, Original_ID, Original_VISITID, Original_PATIENTID, Original_STAFFID, Original_DOCTORID, Original_WARDID, Original_APP_DATE, Original_APP_TYPE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PATIENT_WARDSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PATIENT_WARDS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PATIENTID", "PATIENTID")
            tableMapping.ColumnMappings.Add("VISITID", "VISITID")
            tableMapping.ColumnMappings.Add("DOCTORID", "DOCTORID")
            tableMapping.ColumnMappings.Add("CNID", "CNID")
            tableMapping.ColumnMappings.Add("PWID", "PWID")
            tableMapping.ColumnMappings.Add("WARDID", "WARDID")
            tableMapping.ColumnMappings.Add("PATIENTTYPE", "PATIENTTYPE")
            tableMapping.ColumnMappings.Add("ON_WARD_DATE", "ON_WARD_DATE")
            tableMapping.ColumnMappings.Add("SYMPTOM", "SYMPTOM")
            tableMapping.ColumnMappings.Add("UPDATEAT", "UPDATEAT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""PATIENT_WARDS"" WHERE ((""ID"" = :Original_ID) AND (""PATIENT"& _ 
                "ID"" = :Original_PATIENTID) AND (""VISITID"" = :Original_VISITID) AND (""DOCTORID"" ="& _ 
                " :Original_DOCTORID) AND (""CNID"" = :Original_CNID) AND (""PWID"" = :Original_PWID)"& _ 
                " AND (""WARDID"" = :Original_WARDID) AND (""PATIENTTYPE"" = :Original_PATIENTTYPE) A"& _ 
                "ND (""ON_WARD_DATE"" = :Original_ON_WARD_DATE) AND (""SYMPTOM"" = :Original_SYMPTOM)"& _ 
                " AND ((:IsNull_UPDATEAT = 1 AND ""UPDATEAT"" IS NULL) OR (""UPDATEAT"" = :Original_U"& _ 
                "PDATEAT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PATIENTID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "PATIENTID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_VISITID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "VISITID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CNID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CNID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PWID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 42
            param.IsNullable = true
            param.SourceColumn = "PWID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PATIENTTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "PATIENTTYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ON_WARD_DATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ON_WARD_DATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SYMPTOM"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "SYMPTOM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_UPDATEAT"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "UPDATEAT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_UPDATEAT"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "UPDATEAT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""PATIENT_WARDS"" (""PATIENTID"", ""VISITID"", ""DOCTORID"", ""CNID"& _ 
                """, ""PWID"", ""WARDID"", ""PATIENTTYPE"", ""ON_WARD_DATE"", ""SYMPTOM"", ""UPDATEAT"") VALUE"& _ 
                "S (:PATIENTID, :VISITID, :DOCTORID, :CNID, :PWID, :WARDID, :PATIENTTYPE, :ON_WAR"& _ 
                "D_DATE, :SYMPTOM, :UPDATEAT)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PATIENTID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "PATIENTID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "VISITID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "VISITID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CNID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CNID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PWID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 42
            param.IsNullable = true
            param.SourceColumn = "PWID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PATIENTTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "PATIENTTYPE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ON_WARD_DATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ON_WARD_DATE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SYMPTOM"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "SYMPTOM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "UPDATEAT"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "UPDATEAT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""PATIENT_WARDS"" SET ""PATIENTID"" = :PATIENTID, ""VISITID"" = :VISI"& _ 
                "TID, ""DOCTORID"" = :DOCTORID, ""CNID"" = :CNID, ""PWID"" = :PWID, ""WARDID"" = :WARDID,"& _ 
                " ""PATIENTTYPE"" = :PATIENTTYPE, ""ON_WARD_DATE"" = :ON_WARD_DATE, ""SYMPTOM"" = :SYMP"& _ 
                "TOM, ""UPDATEAT"" = :UPDATEAT WHERE ((""ID"" = :Original_ID) AND (""PATIENTID"" = :Ori"& _ 
                "ginal_PATIENTID) AND (""VISITID"" = :Original_VISITID) AND (""DOCTORID"" = :Original"& _ 
                "_DOCTORID) AND (""CNID"" = :Original_CNID) AND (""PWID"" = :Original_PWID) AND (""WAR"& _ 
                "DID"" = :Original_WARDID) AND (""PATIENTTYPE"" = :Original_PATIENTTYPE) AND (""ON_WA"& _ 
                "RD_DATE"" = :Original_ON_WARD_DATE) AND (""SYMPTOM"" = :Original_SYMPTOM) AND ((:Is"& _ 
                "Null_UPDATEAT = 1 AND ""UPDATEAT"" IS NULL) OR (""UPDATEAT"" = :Original_UPDATEAT)))"& _ 
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PATIENTID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "PATIENTID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "VISITID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "VISITID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CNID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CNID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PWID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 42
            param.IsNullable = true
            param.SourceColumn = "PWID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PATIENTTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "PATIENTTYPE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ON_WARD_DATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ON_WARD_DATE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SYMPTOM"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "SYMPTOM"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "UPDATEAT"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "UPDATEAT"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PATIENTID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "PATIENTID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_VISITID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "VISITID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CNID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CNID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PWID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 42
            param.IsNullable = true
            param.SourceColumn = "PWID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PATIENTTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "PATIENTTYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ON_WARD_DATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ON_WARD_DATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SYMPTOM"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "SYMPTOM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_UPDATEAT"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "UPDATEAT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_UPDATEAT"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "UPDATEAT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, PATIENTID, VISITID, DOCTORID, CNID, PWID, WARDID, PATIENTTYPE, ON_WARD"& _ 
                "_DATE, SYMPTOM, UPDATEAT FROM B6301170.PATIENT_WARDS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.PATIENT_WARDSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.PATIENT_WARDSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.PATIENT_WARDSDataTable = New DataSet1.PATIENT_WARDSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.PATIENT_WARDSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "PATIENT_WARDS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Decimal, ByVal Original_PATIENTID As String, ByVal Original_VISITID As String, ByVal Original_DOCTORID As String, ByVal Original_CNID As String, ByVal Original_PWID As String, ByVal Original_WARDID As String, ByVal Original_PATIENTTYPE As String, ByVal Original_ON_WARD_DATE As Date, ByVal Original_SYMPTOM As String, ByVal Original_UPDATEAT As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Decimal)
            If (Original_PATIENTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PATIENTID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PATIENTID,String)
            End If
            If (Original_VISITID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VISITID")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_VISITID,String)
            End If
            If (Original_DOCTORID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DOCTORID")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DOCTORID,String)
            End If
            If (Original_CNID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CNID")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CNID,String)
            End If
            If (Original_PWID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PWID")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PWID,String)
            End If
            If (Original_WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WARDID")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_WARDID,String)
            End If
            If (Original_PATIENTTYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PATIENTTYPE")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PATIENTTYPE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ON_WARD_DATE,Date)
            If (Original_SYMPTOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYMPTOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_SYMPTOM,String)
            End If
            If (Original_UPDATEAT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_UPDATEAT.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PATIENTID As String, ByVal VISITID As String, ByVal DOCTORID As String, ByVal CNID As String, ByVal PWID As String, ByVal WARDID As String, ByVal PATIENTTYPE As String, ByVal ON_WARD_DATE As Date, ByVal SYMPTOM As String, ByVal UPDATEAT As Global.System.Nullable(Of Date)) As Integer
            If (PATIENTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PATIENTID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PATIENTID,String)
            End If
            If (VISITID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VISITID")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(VISITID,String)
            End If
            If (DOCTORID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DOCTORID")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DOCTORID,String)
            End If
            If (CNID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CNID")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CNID,String)
            End If
            If (PWID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PWID")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PWID,String)
            End If
            If (WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WARDID")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(WARDID,String)
            End If
            If (PATIENTTYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PATIENTTYPE")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PATIENTTYPE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(ON_WARD_DATE,Date)
            If (SYMPTOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYMPTOM")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SYMPTOM,String)
            End If
            If (UPDATEAT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(UPDATEAT.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PATIENTID As String,  _
                    ByVal VISITID As String,  _
                    ByVal DOCTORID As String,  _
                    ByVal CNID As String,  _
                    ByVal PWID As String,  _
                    ByVal WARDID As String,  _
                    ByVal PATIENTTYPE As String,  _
                    ByVal ON_WARD_DATE As Date,  _
                    ByVal SYMPTOM As String,  _
                    ByVal UPDATEAT As Global.System.Nullable(Of Date),  _
                    ByVal Original_ID As Decimal,  _
                    ByVal Original_PATIENTID As String,  _
                    ByVal Original_VISITID As String,  _
                    ByVal Original_DOCTORID As String,  _
                    ByVal Original_CNID As String,  _
                    ByVal Original_PWID As String,  _
                    ByVal Original_WARDID As String,  _
                    ByVal Original_PATIENTTYPE As String,  _
                    ByVal Original_ON_WARD_DATE As Date,  _
                    ByVal Original_SYMPTOM As String,  _
                    ByVal Original_UPDATEAT As Global.System.Nullable(Of Date)) As Integer
            If (PATIENTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PATIENTID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PATIENTID,String)
            End If
            If (VISITID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VISITID")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(VISITID,String)
            End If
            If (DOCTORID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DOCTORID")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DOCTORID,String)
            End If
            If (CNID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CNID")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CNID,String)
            End If
            If (PWID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PWID")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PWID,String)
            End If
            If (WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WARDID")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(WARDID,String)
            End If
            If (PATIENTTYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PATIENTTYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PATIENTTYPE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ON_WARD_DATE,Date)
            If (SYMPTOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYMPTOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SYMPTOM,String)
            End If
            If (UPDATEAT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(UPDATEAT.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ID,Decimal)
            If (Original_PATIENTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PATIENTID")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_PATIENTID,String)
            End If
            If (Original_VISITID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VISITID")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_VISITID,String)
            End If
            If (Original_DOCTORID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DOCTORID")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_DOCTORID,String)
            End If
            If (Original_CNID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CNID")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CNID,String)
            End If
            If (Original_PWID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PWID")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_PWID,String)
            End If
            If (Original_WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WARDID")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_WARDID,String)
            End If
            If (Original_PATIENTTYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PATIENTTYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_PATIENTTYPE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_ON_WARD_DATE,Date)
            If (Original_SYMPTOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYMPTOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_SYMPTOM,String)
            End If
            If (Original_UPDATEAT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_UPDATEAT.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PATIENTID As String,  _
                    ByVal VISITID As String,  _
                    ByVal DOCTORID As String,  _
                    ByVal CNID As String,  _
                    ByVal WARDID As String,  _
                    ByVal PATIENTTYPE As String,  _
                    ByVal ON_WARD_DATE As Date,  _
                    ByVal SYMPTOM As String,  _
                    ByVal UPDATEAT As Global.System.Nullable(Of Date),  _
                    ByVal Original_ID As Decimal,  _
                    ByVal Original_PATIENTID As String,  _
                    ByVal Original_VISITID As String,  _
                    ByVal Original_DOCTORID As String,  _
                    ByVal Original_CNID As String,  _
                    ByVal Original_PWID As String,  _
                    ByVal Original_WARDID As String,  _
                    ByVal Original_PATIENTTYPE As String,  _
                    ByVal Original_ON_WARD_DATE As Date,  _
                    ByVal Original_SYMPTOM As String,  _
                    ByVal Original_UPDATEAT As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(PATIENTID, VISITID, DOCTORID, CNID, Original_PWID, WARDID, PATIENTTYPE, ON_WARD_DATE, SYMPTOM, UPDATEAT, Original_ID, Original_PATIENTID, Original_VISITID, Original_DOCTORID, Original_CNID, Original_PWID, Original_WARDID, Original_PATIENTTYPE, Original_ON_WARD_DATE, Original_SYMPTOM, Original_UPDATEAT)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PATIENTSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PATIENTS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PATIENTID", "PATIENTID")
            tableMapping.ColumnMappings.Add("KINSID", "KINSID")
            tableMapping.ColumnMappings.Add("LOCALDOCID", "LOCALDOCID")
            tableMapping.ColumnMappings.Add("FIRSTNAME", "FIRSTNAME")
            tableMapping.ColumnMappings.Add("LASTNAME", "LASTNAME")
            tableMapping.ColumnMappings.Add("ADDRESS", "ADDRESS")
            tableMapping.ColumnMappings.Add("GENDER", "GENDER")
            tableMapping.ColumnMappings.Add("MARRYSTATUS", "MARRYSTATUS")
            tableMapping.ColumnMappings.Add("TEL", "TEL")
            tableMapping.ColumnMappings.Add("DOB", "DOB")
            tableMapping.ColumnMappings.Add("DATE_REGISTER", "DATE_REGISTER")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""PATIENTS"" WHERE ((""ID"" = :Original_ID) AND (""PATIENTID"" ="& _ 
                " :Original_PATIENTID) AND (""KINSID"" = :Original_KINSID) AND (""LOCALDOCID"" = :Ori"& _ 
                "ginal_LOCALDOCID) AND (""FIRSTNAME"" = :Original_FIRSTNAME) AND (""LASTNAME"" = :Ori"& _ 
                "ginal_LASTNAME) AND (""ADDRESS"" = :Original_ADDRESS) AND (""GENDER"" = :Original_GE"& _ 
                "NDER) AND (""MARRYSTATUS"" = :Original_MARRYSTATUS) AND (""TEL"" = :Original_TEL) AN"& _ 
                "D (""DOB"" = :Original_DOB) AND (""DATE_REGISTER"" = :Original_DATE_REGISTER))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PATIENTID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "PATIENTID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_KINSID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "KINSID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_LOCALDOCID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "LOCALDOCID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FIRSTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "FIRSTNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_LASTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "LASTNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GENDER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "GENDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MARRYSTATUS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MARRYSTATUS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOB"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DOB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DATE_REGISTER"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_REGISTER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""PATIENTS"" (""PATIENTID"", ""KINSID"", ""LOCALDOCID"", ""FIRSTNAM"& _ 
                "E"", ""LASTNAME"", ""ADDRESS"", ""GENDER"", ""MARRYSTATUS"", ""TEL"", ""DOB"", ""DATE_REGISTER"& _ 
                """) VALUES (:PATIENTID, :KINSID, :LOCALDOCID, :FIRSTNAME, :LASTNAME, :ADDRESS, :G"& _ 
                "ENDER, :MARRYSTATUS, :TEL, :DOB, :DATE_REGISTER)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PATIENTID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "PATIENTID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "KINSID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "KINSID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "LOCALDOCID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "LOCALDOCID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FIRSTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "FIRSTNAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "LASTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "LASTNAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GENDER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "GENDER"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MARRYSTATUS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MARRYSTATUS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOB"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DOB"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DATE_REGISTER"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_REGISTER"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""PATIENTS"" SET ""PATIENTID"" = :PATIENTID, ""KINSID"" = :KINSID, ""L"& _ 
                "OCALDOCID"" = :LOCALDOCID, ""FIRSTNAME"" = :FIRSTNAME, ""LASTNAME"" = :LASTNAME, ""ADD"& _ 
                "RESS"" = :ADDRESS, ""GENDER"" = :GENDER, ""MARRYSTATUS"" = :MARRYSTATUS, ""TEL"" = :TEL"& _ 
                ", ""DOB"" = :DOB, ""DATE_REGISTER"" = :DATE_REGISTER WHERE ((""ID"" = :Original_ID) AN"& _ 
                "D (""PATIENTID"" = :Original_PATIENTID) AND (""KINSID"" = :Original_KINSID) AND (""LO"& _ 
                "CALDOCID"" = :Original_LOCALDOCID) AND (""FIRSTNAME"" = :Original_FIRSTNAME) AND ("""& _ 
                "LASTNAME"" = :Original_LASTNAME) AND (""ADDRESS"" = :Original_ADDRESS) AND (""GENDER"& _ 
                """ = :Original_GENDER) AND (""MARRYSTATUS"" = :Original_MARRYSTATUS) AND (""TEL"" = :"& _ 
                "Original_TEL) AND (""DOB"" = :Original_DOB) AND (""DATE_REGISTER"" = :Original_DATE_"& _ 
                "REGISTER))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PATIENTID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "PATIENTID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "KINSID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "KINSID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "LOCALDOCID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "LOCALDOCID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FIRSTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "FIRSTNAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "LASTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "LASTNAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GENDER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "GENDER"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MARRYSTATUS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MARRYSTATUS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOB"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DOB"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DATE_REGISTER"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_REGISTER"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PATIENTID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "PATIENTID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_KINSID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "KINSID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_LOCALDOCID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "LOCALDOCID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FIRSTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "FIRSTNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_LASTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "LASTNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GENDER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "GENDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MARRYSTATUS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MARRYSTATUS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOB"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DOB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DATE_REGISTER"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATE_REGISTER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, PATIENTID, KINSID, LOCALDOCID, FIRSTNAME, LASTNAME, ADDRESS, GENDER, M"& _ 
                "ARRYSTATUS, TEL, DOB, DATE_REGISTER FROM B6301170.PATIENTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.PATIENTSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.PATIENTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.PATIENTSDataTable = New DataSet1.PATIENTSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.PATIENTSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "PATIENTS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Decimal, ByVal Original_PATIENTID As String, ByVal Original_KINSID As String, ByVal Original_LOCALDOCID As String, ByVal Original_FIRSTNAME As String, ByVal Original_LASTNAME As String, ByVal Original_ADDRESS As String, ByVal Original_GENDER As String, ByVal Original_MARRYSTATUS As String, ByVal Original_TEL As Long, ByVal Original_DOB As Date, ByVal Original_DATE_REGISTER As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Decimal)
            If (Original_PATIENTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PATIENTID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PATIENTID,String)
            End If
            If (Original_KINSID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_KINSID")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_KINSID,String)
            End If
            If (Original_LOCALDOCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOCALDOCID")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_LOCALDOCID,String)
            End If
            If (Original_FIRSTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIRSTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FIRSTNAME,String)
            End If
            If (Original_LASTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LASTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_LASTNAME,String)
            End If
            If (Original_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADDRESS")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ADDRESS,String)
            End If
            If (Original_GENDER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GENDER")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_GENDER,String)
            End If
            If (Original_MARRYSTATUS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MARRYSTATUS")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_MARRYSTATUS,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_TEL,Long)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_DOB,Date)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_DATE_REGISTER,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PATIENTID As String, ByVal KINSID As String, ByVal LOCALDOCID As String, ByVal FIRSTNAME As String, ByVal LASTNAME As String, ByVal ADDRESS As String, ByVal GENDER As String, ByVal MARRYSTATUS As String, ByVal TEL As Long, ByVal DOB As Date, ByVal DATE_REGISTER As Date) As Integer
            If (PATIENTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PATIENTID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PATIENTID,String)
            End If
            If (KINSID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KINSID")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(KINSID,String)
            End If
            If (LOCALDOCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOCALDOCID")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LOCALDOCID,String)
            End If
            If (FIRSTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIRSTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FIRSTNAME,String)
            End If
            If (LASTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LASTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(LASTNAME,String)
            End If
            If (ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADDRESS")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ADDRESS,String)
            End If
            If (GENDER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GENDER")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(GENDER,String)
            End If
            If (MARRYSTATUS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MARRYSTATUS")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MARRYSTATUS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(TEL,Long)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(DOB,Date)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(DATE_REGISTER,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PATIENTID As String,  _
                    ByVal KINSID As String,  _
                    ByVal LOCALDOCID As String,  _
                    ByVal FIRSTNAME As String,  _
                    ByVal LASTNAME As String,  _
                    ByVal ADDRESS As String,  _
                    ByVal GENDER As String,  _
                    ByVal MARRYSTATUS As String,  _
                    ByVal TEL As Long,  _
                    ByVal DOB As Date,  _
                    ByVal DATE_REGISTER As Date,  _
                    ByVal Original_ID As Decimal,  _
                    ByVal Original_PATIENTID As String,  _
                    ByVal Original_KINSID As String,  _
                    ByVal Original_LOCALDOCID As String,  _
                    ByVal Original_FIRSTNAME As String,  _
                    ByVal Original_LASTNAME As String,  _
                    ByVal Original_ADDRESS As String,  _
                    ByVal Original_GENDER As String,  _
                    ByVal Original_MARRYSTATUS As String,  _
                    ByVal Original_TEL As Long,  _
                    ByVal Original_DOB As Date,  _
                    ByVal Original_DATE_REGISTER As Date) As Integer
            If (PATIENTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PATIENTID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PATIENTID,String)
            End If
            If (KINSID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KINSID")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(KINSID,String)
            End If
            If (LOCALDOCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOCALDOCID")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LOCALDOCID,String)
            End If
            If (FIRSTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIRSTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FIRSTNAME,String)
            End If
            If (LASTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LASTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(LASTNAME,String)
            End If
            If (ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ADDRESS,String)
            End If
            If (GENDER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GENDER")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(GENDER,String)
            End If
            If (MARRYSTATUS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MARRYSTATUS")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MARRYSTATUS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(TEL,Long)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(DOB,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(DATE_REGISTER,Date)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ID,Decimal)
            If (Original_PATIENTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PATIENTID")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PATIENTID,String)
            End If
            If (Original_KINSID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_KINSID")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_KINSID,String)
            End If
            If (Original_LOCALDOCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOCALDOCID")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_LOCALDOCID,String)
            End If
            If (Original_FIRSTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIRSTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_FIRSTNAME,String)
            End If
            If (Original_LASTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LASTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_LASTNAME,String)
            End If
            If (Original_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ADDRESS,String)
            End If
            If (Original_GENDER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GENDER")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_GENDER,String)
            End If
            If (Original_MARRYSTATUS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MARRYSTATUS")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_MARRYSTATUS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_TEL,Long)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_DOB,Date)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_DATE_REGISTER,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal KINSID As String,  _
                    ByVal LOCALDOCID As String,  _
                    ByVal FIRSTNAME As String,  _
                    ByVal LASTNAME As String,  _
                    ByVal ADDRESS As String,  _
                    ByVal GENDER As String,  _
                    ByVal MARRYSTATUS As String,  _
                    ByVal TEL As Long,  _
                    ByVal DOB As Date,  _
                    ByVal DATE_REGISTER As Date,  _
                    ByVal Original_ID As Decimal,  _
                    ByVal Original_PATIENTID As String,  _
                    ByVal Original_KINSID As String,  _
                    ByVal Original_LOCALDOCID As String,  _
                    ByVal Original_FIRSTNAME As String,  _
                    ByVal Original_LASTNAME As String,  _
                    ByVal Original_ADDRESS As String,  _
                    ByVal Original_GENDER As String,  _
                    ByVal Original_MARRYSTATUS As String,  _
                    ByVal Original_TEL As Long,  _
                    ByVal Original_DOB As Date,  _
                    ByVal Original_DATE_REGISTER As Date) As Integer
            Return Me.Update(Original_PATIENTID, KINSID, LOCALDOCID, FIRSTNAME, LASTNAME, ADDRESS, GENDER, MARRYSTATUS, TEL, DOB, DATE_REGISTER, Original_ID, Original_PATIENTID, Original_KINSID, Original_LOCALDOCID, Original_FIRSTNAME, Original_LASTNAME, Original_ADDRESS, Original_GENDER, Original_MARRYSTATUS, Original_TEL, Original_DOB, Original_DATE_REGISTER)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PW_PRESCRIPTSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PW_PRESCRIPTS"
            tableMapping.ColumnMappings.Add("MMID", "MMID")
            tableMapping.ColumnMappings.Add("PWID", "PWID")
            tableMapping.ColumnMappings.Add("DOCTORID", "DOCTORID")
            tableMapping.ColumnMappings.Add("CNID", "CNID")
            tableMapping.ColumnMappings.Add("DOSAGE", "DOSAGE")
            tableMapping.ColumnMappings.Add("STARTDATE", "STARTDATE")
            tableMapping.ColumnMappings.Add("ENDDATE", "ENDDATE")
            tableMapping.ColumnMappings.Add("CREATEAT", "CREATEAT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""PW_PRESCRIPTS"" WHERE ((""MMID"" = :Original_MMID) AND (""PWI"& _ 
                "D"" = :Original_PWID) AND (""DOCTORID"" = :Original_DOCTORID) AND (""CNID"" = :Origin"& _ 
                "al_CNID) AND (""DOSAGE"" = :Original_DOSAGE) AND (""STARTDATE"" = :Original_STARTDAT"& _ 
                "E) AND ((:IsNull_ENDDATE = 1 AND ""ENDDATE"" IS NULL) OR (""ENDDATE"" = :Original_EN"& _ 
                "DDATE)) AND (""CREATEAT"" = :Original_CREATEAT))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MMID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MMID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PWID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 42
            param.IsNullable = true
            param.SourceColumn = "PWID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CNID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CNID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOSAGE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DOSAGE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STARTDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "STARTDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_ENDDATE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ENDDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ENDDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ENDDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CREATEAT"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CREATEAT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""PW_PRESCRIPTS"" (""MMID"", ""PWID"", ""DOCTORID"", ""CNID"", ""DOSA"& _ 
                "GE"", ""STARTDATE"", ""ENDDATE"", ""CREATEAT"") VALUES (:MMID, :PWID, :DOCTORID, :CNID,"& _ 
                " :DOSAGE, :STARTDATE, :ENDDATE, :CREATEAT)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MMID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MMID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PWID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 42
            param.IsNullable = true
            param.SourceColumn = "PWID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CNID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CNID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOSAGE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DOSAGE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STARTDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "STARTDATE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ENDDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ENDDATE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CREATEAT"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CREATEAT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""PW_PRESCRIPTS"" SET ""MMID"" = :MMID, ""PWID"" = :PWID, ""DOCTORID"" "& _ 
                "= :DOCTORID, ""CNID"" = :CNID, ""DOSAGE"" = :DOSAGE, ""STARTDATE"" = :STARTDATE, ""ENDD"& _ 
                "ATE"" = :ENDDATE, ""CREATEAT"" = :CREATEAT WHERE ((""MMID"" = :Original_MMID) AND (""P"& _ 
                "WID"" = :Original_PWID) AND (""DOCTORID"" = :Original_DOCTORID) AND (""CNID"" = :Orig"& _ 
                "inal_CNID) AND (""DOSAGE"" = :Original_DOSAGE) AND (""STARTDATE"" = :Original_STARTD"& _ 
                "ATE) AND ((:IsNull_ENDDATE = 1 AND ""ENDDATE"" IS NULL) OR (""ENDDATE"" = :Original_"& _ 
                "ENDDATE)) AND (""CREATEAT"" = :Original_CREATEAT))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MMID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MMID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PWID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 42
            param.IsNullable = true
            param.SourceColumn = "PWID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CNID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CNID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOSAGE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DOSAGE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STARTDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "STARTDATE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ENDDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ENDDATE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CREATEAT"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CREATEAT"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MMID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "MMID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PWID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 42
            param.IsNullable = true
            param.SourceColumn = "PWID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CNID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CNID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOSAGE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "DOSAGE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STARTDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "STARTDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_ENDDATE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ENDDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ENDDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ENDDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CREATEAT"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CREATEAT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MMID, PWID, DOCTORID, CNID, DOSAGE, STARTDATE, ENDDATE, CREATEAT FROM B630"& _ 
                "1170.PW_PRESCRIPTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.PW_PRESCRIPTSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.PW_PRESCRIPTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.PW_PRESCRIPTSDataTable = New DataSet1.PW_PRESCRIPTSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.PW_PRESCRIPTSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "PW_PRESCRIPTS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MMID As Long, ByVal Original_PWID As String, ByVal Original_DOCTORID As String, ByVal Original_CNID As String, ByVal Original_DOSAGE As Double, ByVal Original_STARTDATE As Date, ByVal Original_ENDDATE As Global.System.Nullable(Of Date), ByVal Original_CREATEAT As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MMID,Long)
            If (Original_PWID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PWID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PWID,String)
            End If
            If (Original_DOCTORID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DOCTORID")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DOCTORID,String)
            End If
            If (Original_CNID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CNID")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CNID,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DOSAGE,Double)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_STARTDATE,Date)
            If (Original_ENDDATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ENDDATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CREATEAT,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MMID As Long, ByVal PWID As String, ByVal DOCTORID As String, ByVal CNID As String, ByVal DOSAGE As Double, ByVal STARTDATE As Date, ByVal ENDDATE As Global.System.Nullable(Of Date), ByVal CREATEAT As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MMID,Long)
            If (PWID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PWID")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PWID,String)
            End If
            If (DOCTORID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DOCTORID")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DOCTORID,String)
            End If
            If (CNID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CNID")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CNID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(DOSAGE,Double)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(STARTDATE,Date)
            If (ENDDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ENDDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(CREATEAT,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MMID As Long,  _
                    ByVal PWID As String,  _
                    ByVal DOCTORID As String,  _
                    ByVal CNID As String,  _
                    ByVal DOSAGE As Double,  _
                    ByVal STARTDATE As Date,  _
                    ByVal ENDDATE As Global.System.Nullable(Of Date),  _
                    ByVal CREATEAT As Date,  _
                    ByVal Original_MMID As Long,  _
                    ByVal Original_PWID As String,  _
                    ByVal Original_DOCTORID As String,  _
                    ByVal Original_CNID As String,  _
                    ByVal Original_DOSAGE As Double,  _
                    ByVal Original_STARTDATE As Date,  _
                    ByVal Original_ENDDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_CREATEAT As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MMID,Long)
            If (PWID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PWID")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PWID,String)
            End If
            If (DOCTORID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DOCTORID")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DOCTORID,String)
            End If
            If (CNID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CNID")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CNID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DOSAGE,Double)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(STARTDATE,Date)
            If (ENDDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ENDDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CREATEAT,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_MMID,Long)
            If (Original_PWID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PWID")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PWID,String)
            End If
            If (Original_DOCTORID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DOCTORID")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_DOCTORID,String)
            End If
            If (Original_CNID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CNID")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CNID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_DOSAGE,Double)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_STARTDATE,Date)
            If (Original_ENDDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ENDDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_CREATEAT,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DOSAGE As Double, ByVal STARTDATE As Date, ByVal ENDDATE As Global.System.Nullable(Of Date), ByVal CREATEAT As Date, ByVal Original_MMID As Long, ByVal Original_PWID As String, ByVal Original_DOCTORID As String, ByVal Original_CNID As String, ByVal Original_DOSAGE As Double, ByVal Original_STARTDATE As Date, ByVal Original_ENDDATE As Global.System.Nullable(Of Date), ByVal Original_CREATEAT As Date) As Integer
            Return Me.Update(Original_MMID, Original_PWID, Original_DOCTORID, Original_CNID, DOSAGE, STARTDATE, ENDDATE, CREATEAT, Original_MMID, Original_PWID, Original_DOCTORID, Original_CNID, Original_DOSAGE, Original_STARTDATE, Original_ENDDATE, Original_CREATEAT)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SHIFTSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SHIFTS"
            tableMapping.ColumnMappings.Add("SHIFTID", "SHIFTID")
            tableMapping.ColumnMappings.Add("SHIFTNAME", "SHIFTNAME")
            tableMapping.ColumnMappings.Add("STARTTIME", "STARTTIME")
            tableMapping.ColumnMappings.Add("ENDTIME", "ENDTIME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""SHIFTS"" WHERE ((""SHIFTID"" = :Original_SHIFTID) AND (""SHIF"& _ 
                "TNAME"" = :Original_SHIFTNAME) AND (""STARTTIME"" = :Original_STARTTIME) AND (""ENDT"& _ 
                "IME"" = :Original_ENDTIME))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SHIFTID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SHIFTID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SHIFTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "SHIFTNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STARTTIME"
            param.DbType = Global.System.Data.DbType.DateTime
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.TimeStamp
            param.Size = 11
            param.IsNullable = true
            param.SourceColumn = "STARTTIME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ENDTIME"
            param.DbType = Global.System.Data.DbType.DateTime
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.TimeStamp
            param.Size = 11
            param.IsNullable = true
            param.SourceColumn = "ENDTIME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""SHIFTS"" (""SHIFTID"", ""SHIFTNAME"", ""STARTTIME"", ""ENDTIME"") "& _ 
                "VALUES (:SHIFTID, :SHIFTNAME, :STARTTIME, :ENDTIME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SHIFTID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SHIFTID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SHIFTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "SHIFTNAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STARTTIME"
            param.DbType = Global.System.Data.DbType.DateTime
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.TimeStamp
            param.Size = 11
            param.IsNullable = true
            param.SourceColumn = "STARTTIME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ENDTIME"
            param.DbType = Global.System.Data.DbType.DateTime
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.TimeStamp
            param.Size = 11
            param.IsNullable = true
            param.SourceColumn = "ENDTIME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""SHIFTS"" SET ""SHIFTID"" = :SHIFTID, ""SHIFTNAME"" = :SHIFTNAME, ""S"& _ 
                "TARTTIME"" = :STARTTIME, ""ENDTIME"" = :ENDTIME WHERE ((""SHIFTID"" = :Original_SHIFT"& _ 
                "ID) AND (""SHIFTNAME"" = :Original_SHIFTNAME) AND (""STARTTIME"" = :Original_STARTTI"& _ 
                "ME) AND (""ENDTIME"" = :Original_ENDTIME))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SHIFTID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SHIFTID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SHIFTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "SHIFTNAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STARTTIME"
            param.DbType = Global.System.Data.DbType.DateTime
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.TimeStamp
            param.Size = 11
            param.IsNullable = true
            param.SourceColumn = "STARTTIME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ENDTIME"
            param.DbType = Global.System.Data.DbType.DateTime
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.TimeStamp
            param.Size = 11
            param.IsNullable = true
            param.SourceColumn = "ENDTIME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SHIFTID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SHIFTID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SHIFTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "SHIFTNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STARTTIME"
            param.DbType = Global.System.Data.DbType.DateTime
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.TimeStamp
            param.Size = 11
            param.IsNullable = true
            param.SourceColumn = "STARTTIME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ENDTIME"
            param.DbType = Global.System.Data.DbType.DateTime
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.TimeStamp
            param.Size = 11
            param.IsNullable = true
            param.SourceColumn = "ENDTIME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SHIFTID, SHIFTNAME, STARTTIME, ENDTIME FROM B6301170.SHIFTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.SHIFTSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.SHIFTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.SHIFTSDataTable = New DataSet1.SHIFTSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.SHIFTSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "SHIFTS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SHIFTID As Long, ByVal Original_SHIFTNAME As String, ByVal Original_STARTTIME As Date, ByVal Original_ENDTIME As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SHIFTID,Long)
            If (Original_SHIFTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SHIFTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SHIFTNAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_STARTTIME,Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ENDTIME,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SHIFTID As Long, ByVal SHIFTNAME As String, ByVal STARTTIME As Date, ByVal ENDTIME As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SHIFTID,Long)
            If (SHIFTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SHIFTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SHIFTNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(STARTTIME,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ENDTIME,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SHIFTID As Long, ByVal SHIFTNAME As String, ByVal STARTTIME As Date, ByVal ENDTIME As Date, ByVal Original_SHIFTID As Long, ByVal Original_SHIFTNAME As String, ByVal Original_STARTTIME As Date, ByVal Original_ENDTIME As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SHIFTID,Long)
            If (SHIFTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SHIFTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SHIFTNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(STARTTIME,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ENDTIME,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SHIFTID,Long)
            If (Original_SHIFTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SHIFTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SHIFTNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_STARTTIME,Date)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ENDTIME,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SHIFTNAME As String, ByVal STARTTIME As Date, ByVal ENDTIME As Date, ByVal Original_SHIFTID As Long, ByVal Original_SHIFTNAME As String, ByVal Original_STARTTIME As Date, ByVal Original_ENDTIME As Date) As Integer
            Return Me.Update(Original_SHIFTID, SHIFTNAME, STARTTIME, ENDTIME, Original_SHIFTID, Original_SHIFTNAME, Original_STARTTIME, Original_ENDTIME)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class STAFF_EXPERIENCESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "STAFF_EXPERIENCES"
            tableMapping.ColumnMappings.Add("STAFFID", "STAFFID")
            tableMapping.ColumnMappings.Add("ORGANIZATION", "ORGANIZATION")
            tableMapping.ColumnMappings.Add("POSITION", "POSITION")
            tableMapping.ColumnMappings.Add("STARTDATE", "STARTDATE")
            tableMapping.ColumnMappings.Add("ENDDATE", "ENDDATE")
            tableMapping.ColumnMappings.Add("EXPID", "EXPID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""STAFF_EXPERIENCES"" WHERE ((""STAFFID"" = :Original_STAFFID)"& _ 
                " AND (""ORGANIZATION"" = :Original_ORGANIZATION) AND (""POSITION"" = :Original_POSIT"& _ 
                "ION) AND (""STARTDATE"" = :Original_STARTDATE) AND (""ENDDATE"" = :Original_ENDDATE)"& _ 
                " AND (""EXPID"" = :Original_EXPID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ORGANIZATION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "ORGANIZATION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_POSITION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "POSITION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STARTDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "STARTDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ENDDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ENDDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_EXPID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "EXPID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""STAFF_EXPERIENCES"" (""STAFFID"", ""ORGANIZATION"", ""POSITION"""& _ 
                ", ""STARTDATE"", ""ENDDATE"") VALUES (:STAFFID, :ORGANIZATION, :POSITION, :STARTDATE"& _ 
                ", :ENDDATE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ORGANIZATION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "ORGANIZATION"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "POSITION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "POSITION"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STARTDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "STARTDATE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ENDDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ENDDATE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""STAFF_EXPERIENCES"" SET ""STAFFID"" = :STAFFID, ""ORGANIZATION"" = "& _ 
                ":ORGANIZATION, ""POSITION"" = :POSITION, ""STARTDATE"" = :STARTDATE, ""ENDDATE"" = :EN"& _ 
                "DDATE WHERE ((""STAFFID"" = :Original_STAFFID) AND (""ORGANIZATION"" = :Original_ORG"& _ 
                "ANIZATION) AND (""POSITION"" = :Original_POSITION) AND (""STARTDATE"" = :Original_ST"& _ 
                "ARTDATE) AND (""ENDDATE"" = :Original_ENDDATE) AND (""EXPID"" = :Original_EXPID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ORGANIZATION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "ORGANIZATION"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "POSITION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "POSITION"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STARTDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "STARTDATE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ENDDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ENDDATE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ORGANIZATION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 100
            param.IsNullable = true
            param.SourceColumn = "ORGANIZATION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_POSITION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "POSITION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STARTDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "STARTDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ENDDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ENDDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_EXPID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "EXPID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT STAFFID, ""ORGANIZATION"", POSITION, STARTDATE, ENDDATE, EXPID FROM B6301170"& _ 
                ".STAFF_EXPERIENCES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.STAFF_EXPERIENCESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.STAFF_EXPERIENCESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.STAFF_EXPERIENCESDataTable = New DataSet1.STAFF_EXPERIENCESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.STAFF_EXPERIENCESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "STAFF_EXPERIENCES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_STAFFID As String, ByVal Original_ORGANIZATION As String, ByVal Original_POSITION As String, ByVal Original_STARTDATE As Date, ByVal Original_ENDDATE As Date, ByVal Original_EXPID As Decimal) As Integer
            If (Original_STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STAFFID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_STAFFID,String)
            End If
            If (Original_ORGANIZATION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ORGANIZATION")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ORGANIZATION,String)
            End If
            If (Original_POSITION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_POSITION")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_POSITION,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_STARTDATE,Date)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ENDDATE,Date)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_EXPID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal STAFFID As String, ByVal ORGANIZATION As String, ByVal POSITION As String, ByVal STARTDATE As Date, ByVal ENDDATE As Date) As Integer
            If (STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STAFFID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(STAFFID,String)
            End If
            If (ORGANIZATION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ORGANIZATION")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ORGANIZATION,String)
            End If
            If (POSITION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("POSITION")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(POSITION,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(STARTDATE,Date)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ENDDATE,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal STAFFID As String, ByVal ORGANIZATION As String, ByVal POSITION As String, ByVal STARTDATE As Date, ByVal ENDDATE As Date, ByVal Original_STAFFID As String, ByVal Original_ORGANIZATION As String, ByVal Original_POSITION As String, ByVal Original_STARTDATE As Date, ByVal Original_ENDDATE As Date, ByVal Original_EXPID As Decimal) As Integer
            If (STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STAFFID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(STAFFID,String)
            End If
            If (ORGANIZATION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ORGANIZATION")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ORGANIZATION,String)
            End If
            If (POSITION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("POSITION")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(POSITION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(STARTDATE,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ENDDATE,Date)
            If (Original_STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STAFFID")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_STAFFID,String)
            End If
            If (Original_ORGANIZATION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ORGANIZATION")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ORGANIZATION,String)
            End If
            If (Original_POSITION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_POSITION")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_POSITION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_STARTDATE,Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ENDDATE,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_EXPID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ORGANIZATION As String, ByVal POSITION As String, ByVal ENDDATE As Date, ByVal Original_STAFFID As String, ByVal Original_ORGANIZATION As String, ByVal Original_POSITION As String, ByVal Original_STARTDATE As Date, ByVal Original_ENDDATE As Date, ByVal Original_EXPID As Decimal) As Integer
            Return Me.Update(Original_STAFFID, ORGANIZATION, POSITION, Original_STARTDATE, ENDDATE, Original_STAFFID, Original_ORGANIZATION, Original_POSITION, Original_STARTDATE, Original_ENDDATE, Original_EXPID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class STAFF_QUALIFICATESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "STAFF_QUALIFICATES"
            tableMapping.ColumnMappings.Add("STAFFID", "STAFFID")
            tableMapping.ColumnMappings.Add("TYPE", "TYPE")
            tableMapping.ColumnMappings.Add("DATES", "DATES")
            tableMapping.ColumnMappings.Add("MAJOR", "MAJOR")
            tableMapping.ColumnMappings.Add("QUALID", "QUALID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""STAFF_QUALIFICATES"" WHERE ((""STAFFID"" = :Original_STAFFID"& _ 
                ") AND (""TYPE"" = :Original_TYPE) AND (""DATES"" = :Original_DATES) AND (""MAJOR"" = :"& _ 
                "Original_MAJOR) AND (""QUALID"" = :Original_QUALID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "TYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DATES"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MAJOR"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MAJOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_QUALID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "QUALID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""STAFF_QUALIFICATES"" (""STAFFID"", ""TYPE"", ""DATES"", ""MAJOR"")"& _ 
                " VALUES (:STAFFID, :TYPE, :DATES, :MAJOR)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "TYPE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DATES"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MAJOR"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MAJOR"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""STAFF_QUALIFICATES"" SET ""STAFFID"" = :STAFFID, ""TYPE"" = :TYPE, "& _ 
                """DATES"" = :DATES, ""MAJOR"" = :MAJOR WHERE ((""STAFFID"" = :Original_STAFFID) AND ("""& _ 
                "TYPE"" = :Original_TYPE) AND (""DATES"" = :Original_DATES) AND (""MAJOR"" = :Original"& _ 
                "_MAJOR) AND (""QUALID"" = :Original_QUALID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "TYPE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DATES"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATES"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MAJOR"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MAJOR"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "TYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DATES"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DATES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MAJOR"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MAJOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_QUALID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "QUALID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT STAFFID, ""TYPE"", DATES, MAJOR, QUALID FROM B6301170.STAFF_QUALIFICATES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.STAFF_QUALIFICATESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.STAFF_QUALIFICATESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.STAFF_QUALIFICATESDataTable = New DataSet1.STAFF_QUALIFICATESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.STAFF_QUALIFICATESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "STAFF_QUALIFICATES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_STAFFID As String, ByVal Original_TYPE As String, ByVal Original_DATES As Date, ByVal Original_MAJOR As String, ByVal Original_QUALID As Decimal) As Integer
            If (Original_STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STAFFID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_STAFFID,String)
            End If
            If (Original_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TYPE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TYPE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DATES,Date)
            If (Original_MAJOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAJOR")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MAJOR,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_QUALID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal STAFFID As String, ByVal TYPE As String, ByVal DATES As Date, ByVal MAJOR As String) As Integer
            If (STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STAFFID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(STAFFID,String)
            End If
            If (TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TYPE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TYPE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(DATES,Date)
            If (MAJOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAJOR")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MAJOR,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal STAFFID As String, ByVal TYPE As String, ByVal DATES As Date, ByVal MAJOR As String, ByVal Original_STAFFID As String, ByVal Original_TYPE As String, ByVal Original_DATES As Date, ByVal Original_MAJOR As String, ByVal Original_QUALID As Decimal) As Integer
            If (STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STAFFID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(STAFFID,String)
            End If
            If (TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TYPE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DATES,Date)
            If (MAJOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAJOR")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MAJOR,String)
            End If
            If (Original_STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STAFFID")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_STAFFID,String)
            End If
            If (Original_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_TYPE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_DATES,Date)
            If (Original_MAJOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAJOR")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_MAJOR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_QUALID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TYPE As String, ByVal MAJOR As String, ByVal Original_STAFFID As String, ByVal Original_TYPE As String, ByVal Original_DATES As Date, ByVal Original_MAJOR As String, ByVal Original_QUALID As Decimal) As Integer
            Return Me.Update(Original_STAFFID, TYPE, Original_DATES, MAJOR, Original_STAFFID, Original_TYPE, Original_DATES, Original_MAJOR, Original_QUALID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class STAFFSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "STAFFS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("STAFFID", "STAFFID")
            tableMapping.ColumnMappings.Add("DOCTORID", "DOCTORID")
            tableMapping.ColumnMappings.Add("CNID", "CNID")
            tableMapping.ColumnMappings.Add("MDID", "MDID")
            tableMapping.ColumnMappings.Add("FIRSTNAME", "FIRSTNAME")
            tableMapping.ColumnMappings.Add("LASTNAME", "LASTNAME")
            tableMapping.ColumnMappings.Add("ADDRESS", "ADDRESS")
            tableMapping.ColumnMappings.Add("TEL", "TEL")
            tableMapping.ColumnMappings.Add("DOB", "DOB")
            tableMapping.ColumnMappings.Add("NIN", "NIN")
            tableMapping.ColumnMappings.Add("POSITION", "POSITION")
            tableMapping.ColumnMappings.Add("SALARY", "SALARY")
            tableMapping.ColumnMappings.Add("SALARYSCALE", "SALARYSCALE")
            tableMapping.ColumnMappings.Add("HOURSWEEK", "HOURSWEEK")
            tableMapping.ColumnMappings.Add("CONTACTTYPE", "CONTACTTYPE")
            tableMapping.ColumnMappings.Add("PAIDTYPE", "PAIDTYPE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""STAFFS"" WHERE ((""ID"" = :Original_ID) AND (""STAFFID"" = :Or"& _ 
                "iginal_STAFFID) AND ((:IsNull_DOCTORID = 1 AND ""DOCTORID"" IS NULL) OR (""DOCTORID"& _ 
                """ = :Original_DOCTORID)) AND ((:IsNull_CNID = 1 AND ""CNID"" IS NULL) OR (""CNID"" ="& _ 
                " :Original_CNID)) AND ((:IsNull_MDID = 1 AND ""MDID"" IS NULL) OR (""MDID"" = :Origi"& _ 
                "nal_MDID)) AND (""FIRSTNAME"" = :Original_FIRSTNAME) AND (""LASTNAME"" = :Original_L"& _ 
                "ASTNAME) AND ((:IsNull_ADDRESS = 1 AND ""ADDRESS"" IS NULL) OR (""ADDRESS"" = :Origi"& _ 
                "nal_ADDRESS)) AND ((:IsNull_TEL = 1 AND ""TEL"" IS NULL) OR (""TEL"" = :Original_TEL"& _ 
                ")) AND ((:IsNull_DOB = 1 AND ""DOB"" IS NULL) OR (""DOB"" = :Original_DOB)) AND ((:I"& _ 
                "sNull_NIN = 1 AND ""NIN"" IS NULL) OR (""NIN"" = :Original_NIN)) AND ((:IsNull_POSIT"& _ 
                "ION = 1 AND ""POSITION"" IS NULL) OR (""POSITION"" = :Original_POSITION)) AND ((:IsN"& _ 
                "ull_SALARY = 1 AND ""SALARY"" IS NULL) OR (""SALARY"" = :Original_SALARY)) AND ((:Is"& _ 
                "Null_SALARYSCALE = 1 AND ""SALARYSCALE"" IS NULL) OR (""SALARYSCALE"" = :Original_SA"& _ 
                "LARYSCALE)) AND ((:IsNull_HOURSWEEK = 1 AND ""HOURSWEEK"" IS NULL) OR (""HOURSWEEK"""& _ 
                " = :Original_HOURSWEEK)) AND ((:IsNull_CONTACTTYPE = 1 AND ""CONTACTTYPE"" IS NULL"& _ 
                ") OR (""CONTACTTYPE"" = :Original_CONTACTTYPE)) AND ((:IsNull_PAIDTYPE = 1 AND ""PA"& _ 
                "IDTYPE"" IS NULL) OR (""PAIDTYPE"" = :Original_PAIDTYPE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_DOCTORID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_CNID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CNID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CNID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CNID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_MDID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FIRSTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "FIRSTNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_LASTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "LASTNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_ADDRESS"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_TEL"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_DOB"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DOB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOB"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DOB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_NIN"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "NIN"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NIN"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "NIN"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_POSITION"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "POSITION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_POSITION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "POSITION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_SALARY"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SALARY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SALARY"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SALARY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_SALARYSCALE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SALARYSCALE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SALARYSCALE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SALARYSCALE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_HOURSWEEK"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "HOURSWEEK"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_HOURSWEEK"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "HOURSWEEK"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_CONTACTTYPE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "CONTACTTYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CONTACTTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "CONTACTTYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_PAIDTYPE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "PAIDTYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PAIDTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "PAIDTYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""STAFFS"" (""STAFFID"", ""DOCTORID"", ""CNID"", ""MDID"", ""FIRSTNAM"& _ 
                "E"", ""LASTNAME"", ""ADDRESS"", ""TEL"", ""DOB"", ""NIN"", ""POSITION"", ""SALARY"", ""SALARYSCA"& _ 
                "LE"", ""HOURSWEEK"", ""CONTACTTYPE"", ""PAIDTYPE"") VALUES (:STAFFID, :DOCTORID, :CNID,"& _ 
                " :MDID, :FIRSTNAME, :LASTNAME, :ADDRESS, :TEL, :DOB, :NIN, :POSITION, :SALARY, :"& _ 
                "SALARYSCALE, :HOURSWEEK, :CONTACTTYPE, :PAIDTYPE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CNID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CNID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MDID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FIRSTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "FIRSTNAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "LASTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "LASTNAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOB"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DOB"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NIN"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "NIN"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "POSITION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "POSITION"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SALARY"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SALARY"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SALARYSCALE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SALARYSCALE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "HOURSWEEK"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "HOURSWEEK"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CONTACTTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "CONTACTTYPE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PAIDTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "PAIDTYPE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""STAFFS"" SET ""STAFFID"" = :STAFFID, ""DOCTORID"" = :DOCTORID, ""CNI"& _ 
                "D"" = :CNID, ""MDID"" = :MDID, ""FIRSTNAME"" = :FIRSTNAME, ""LASTNAME"" = :LASTNAME, ""A"& _ 
                "DDRESS"" = :ADDRESS, ""TEL"" = :TEL, ""DOB"" = :DOB, ""NIN"" = :NIN, ""POSITION"" = :POSI"& _ 
                "TION, ""SALARY"" = :SALARY, ""SALARYSCALE"" = :SALARYSCALE, ""HOURSWEEK"" = :HOURSWEEK"& _ 
                ", ""CONTACTTYPE"" = :CONTACTTYPE, ""PAIDTYPE"" = :PAIDTYPE WHERE ((""ID"" = :Original_"& _ 
                "ID) AND (""STAFFID"" = :Original_STAFFID) AND ((:IsNull_DOCTORID = 1 AND ""DOCTORID"& _ 
                """ IS NULL) OR (""DOCTORID"" = :Original_DOCTORID)) AND ((:IsNull_CNID = 1 AND ""CNI"& _ 
                "D"" IS NULL) OR (""CNID"" = :Original_CNID)) AND ((:IsNull_MDID = 1 AND ""MDID"" IS N"& _ 
                "ULL) OR (""MDID"" = :Original_MDID)) AND (""FIRSTNAME"" = :Original_FIRSTNAME) AND ("& _ 
                """LASTNAME"" = :Original_LASTNAME) AND ((:IsNull_ADDRESS = 1 AND ""ADDRESS"" IS NULL"& _ 
                ") OR (""ADDRESS"" = :Original_ADDRESS)) AND ((:IsNull_TEL = 1 AND ""TEL"" IS NULL) O"& _ 
                "R (""TEL"" = :Original_TEL)) AND ((:IsNull_DOB = 1 AND ""DOB"" IS NULL) OR (""DOB"" = "& _ 
                ":Original_DOB)) AND ((:IsNull_NIN = 1 AND ""NIN"" IS NULL) OR (""NIN"" = :Original_N"& _ 
                "IN)) AND ((:IsNull_POSITION = 1 AND ""POSITION"" IS NULL) OR (""POSITION"" = :Origin"& _ 
                "al_POSITION)) AND ((:IsNull_SALARY = 1 AND ""SALARY"" IS NULL) OR (""SALARY"" = :Ori"& _ 
                "ginal_SALARY)) AND ((:IsNull_SALARYSCALE = 1 AND ""SALARYSCALE"" IS NULL) OR (""SAL"& _ 
                "ARYSCALE"" = :Original_SALARYSCALE)) AND ((:IsNull_HOURSWEEK = 1 AND ""HOURSWEEK"" "& _ 
                "IS NULL) OR (""HOURSWEEK"" = :Original_HOURSWEEK)) AND ((:IsNull_CONTACTTYPE = 1 A"& _ 
                "ND ""CONTACTTYPE"" IS NULL) OR (""CONTACTTYPE"" = :Original_CONTACTTYPE)) AND ((:IsN"& _ 
                "ull_PAIDTYPE = 1 AND ""PAIDTYPE"" IS NULL) OR (""PAIDTYPE"" = :Original_PAIDTYPE)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CNID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CNID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MDID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FIRSTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "FIRSTNAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "LASTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "LASTNAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DOB"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DOB"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NIN"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "NIN"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "POSITION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "POSITION"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SALARY"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SALARY"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SALARYSCALE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SALARYSCALE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "HOURSWEEK"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "HOURSWEEK"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CONTACTTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "CONTACTTYPE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "PAIDTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "PAIDTYPE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_DOCTORID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOCTORID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "DOCTORID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_CNID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CNID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CNID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CNID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_MDID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FIRSTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "FIRSTNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_LASTNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "LASTNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_ADDRESS"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_TEL"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_DOB"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DOB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOB"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DOB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_NIN"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "NIN"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NIN"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "NIN"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_POSITION"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "POSITION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_POSITION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "POSITION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_SALARY"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SALARY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SALARY"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SALARY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_SALARYSCALE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SALARYSCALE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SALARYSCALE"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Double]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SALARYSCALE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_HOURSWEEK"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "HOURSWEEK"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_HOURSWEEK"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "HOURSWEEK"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_CONTACTTYPE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "CONTACTTYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CONTACTTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "CONTACTTYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_PAIDTYPE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "PAIDTYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PAIDTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "PAIDTYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, STAFFID, DOCTORID, CNID, MDID, FIRSTNAME, LASTNAME, ADDRESS, TEL, DOB,"& _ 
                " NIN, POSITION, SALARY, SALARYSCALE, HOURSWEEK, CONTACTTYPE, PAIDTYPE FROM B6301"& _ 
                "170.STAFFS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.STAFFSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.STAFFSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.STAFFSDataTable = New DataSet1.STAFFSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.STAFFSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "STAFFS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID As Decimal,  _
                    ByVal Original_STAFFID As String,  _
                    ByVal Original_DOCTORID As String,  _
                    ByVal Original_CNID As String,  _
                    ByVal Original_MDID As String,  _
                    ByVal Original_FIRSTNAME As String,  _
                    ByVal Original_LASTNAME As String,  _
                    ByVal Original_ADDRESS As String,  _
                    ByVal Original_TEL As Global.System.Nullable(Of Long),  _
                    ByVal Original_DOB As Global.System.Nullable(Of Date),  _
                    ByVal Original_NIN As String,  _
                    ByVal Original_POSITION As String,  _
                    ByVal Original_SALARY As Global.System.Nullable(Of Double),  _
                    ByVal Original_SALARYSCALE As Global.System.Nullable(Of Double),  _
                    ByVal Original_HOURSWEEK As Global.System.Nullable(Of Date),  _
                    ByVal Original_CONTACTTYPE As String,  _
                    ByVal Original_PAIDTYPE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Decimal)
            If (Original_STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STAFFID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_STAFFID,String)
            End If
            If (Original_DOCTORID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DOCTORID,String)
            End If
            If (Original_CNID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CNID,String)
            End If
            If (Original_MDID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MDID,String)
            End If
            If (Original_FIRSTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIRSTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FIRSTNAME,String)
            End If
            If (Original_LASTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LASTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_LASTNAME,String)
            End If
            If (Original_ADDRESS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ADDRESS,String)
            End If
            If (Original_TEL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_TEL.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_DOB.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_DOB.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_NIN Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_NIN,String)
            End If
            If (Original_POSITION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_POSITION,String)
            End If
            If (Original_SALARY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_SALARY.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_SALARYSCALE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_SALARYSCALE.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_HOURSWEEK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_HOURSWEEK.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_CONTACTTYPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_CONTACTTYPE,String)
            End If
            If (Original_PAIDTYPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_PAIDTYPE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal STAFFID As String,  _
                    ByVal DOCTORID As String,  _
                    ByVal CNID As String,  _
                    ByVal MDID As String,  _
                    ByVal FIRSTNAME As String,  _
                    ByVal LASTNAME As String,  _
                    ByVal ADDRESS As String,  _
                    ByVal TEL As Global.System.Nullable(Of Long),  _
                    ByVal DOB As Global.System.Nullable(Of Date),  _
                    ByVal NIN As String,  _
                    ByVal POSITION As String,  _
                    ByVal SALARY As Global.System.Nullable(Of Double),  _
                    ByVal SALARYSCALE As Global.System.Nullable(Of Double),  _
                    ByVal HOURSWEEK As Global.System.Nullable(Of Date),  _
                    ByVal CONTACTTYPE As String,  _
                    ByVal PAIDTYPE As String) As Integer
            If (STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STAFFID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(STAFFID,String)
            End If
            If (DOCTORID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DOCTORID,String)
            End If
            If (CNID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CNID,String)
            End If
            If (MDID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MDID,String)
            End If
            If (FIRSTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIRSTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FIRSTNAME,String)
            End If
            If (LASTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LASTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(LASTNAME,String)
            End If
            If (ADDRESS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ADDRESS,String)
            End If
            If (TEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TEL.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (DOB.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(DOB.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (NIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(NIN,String)
            End If
            If (POSITION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(POSITION,String)
            End If
            If (SALARY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SALARY.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (SALARYSCALE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(SALARYSCALE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (HOURSWEEK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(HOURSWEEK.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CONTACTTYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CONTACTTYPE,String)
            End If
            If (PAIDTYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PAIDTYPE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal STAFFID As String,  _
                    ByVal DOCTORID As String,  _
                    ByVal CNID As String,  _
                    ByVal MDID As String,  _
                    ByVal FIRSTNAME As String,  _
                    ByVal LASTNAME As String,  _
                    ByVal ADDRESS As String,  _
                    ByVal TEL As Global.System.Nullable(Of Long),  _
                    ByVal DOB As Global.System.Nullable(Of Date),  _
                    ByVal NIN As String,  _
                    ByVal POSITION As String,  _
                    ByVal SALARY As Global.System.Nullable(Of Double),  _
                    ByVal SALARYSCALE As Global.System.Nullable(Of Double),  _
                    ByVal HOURSWEEK As Global.System.Nullable(Of Date),  _
                    ByVal CONTACTTYPE As String,  _
                    ByVal PAIDTYPE As String,  _
                    ByVal Original_ID As Decimal,  _
                    ByVal Original_STAFFID As String,  _
                    ByVal Original_DOCTORID As String,  _
                    ByVal Original_CNID As String,  _
                    ByVal Original_MDID As String,  _
                    ByVal Original_FIRSTNAME As String,  _
                    ByVal Original_LASTNAME As String,  _
                    ByVal Original_ADDRESS As String,  _
                    ByVal Original_TEL As Global.System.Nullable(Of Long),  _
                    ByVal Original_DOB As Global.System.Nullable(Of Date),  _
                    ByVal Original_NIN As String,  _
                    ByVal Original_POSITION As String,  _
                    ByVal Original_SALARY As Global.System.Nullable(Of Double),  _
                    ByVal Original_SALARYSCALE As Global.System.Nullable(Of Double),  _
                    ByVal Original_HOURSWEEK As Global.System.Nullable(Of Date),  _
                    ByVal Original_CONTACTTYPE As String,  _
                    ByVal Original_PAIDTYPE As String) As Integer
            If (STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STAFFID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(STAFFID,String)
            End If
            If (DOCTORID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DOCTORID,String)
            End If
            If (CNID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CNID,String)
            End If
            If (MDID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MDID,String)
            End If
            If (FIRSTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIRSTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FIRSTNAME,String)
            End If
            If (LASTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LASTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(LASTNAME,String)
            End If
            If (ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ADDRESS,String)
            End If
            If (TEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TEL.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (DOB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(DOB.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (NIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(NIN,String)
            End If
            If (POSITION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(POSITION,String)
            End If
            If (SALARY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SALARY.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (SALARYSCALE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(SALARYSCALE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (HOURSWEEK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(HOURSWEEK.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CONTACTTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CONTACTTYPE,String)
            End If
            If (PAIDTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(PAIDTYPE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_ID,Decimal)
            If (Original_STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STAFFID")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_STAFFID,String)
            End If
            If (Original_DOCTORID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_DOCTORID,String)
            End If
            If (Original_CNID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_CNID,String)
            End If
            If (Original_MDID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_MDID,String)
            End If
            If (Original_FIRSTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIRSTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_FIRSTNAME,String)
            End If
            If (Original_LASTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LASTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_LASTNAME,String)
            End If
            If (Original_ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ADDRESS,String)
            End If
            If (Original_TEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_TEL.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_DOB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_DOB.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_NIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_NIN,String)
            End If
            If (Original_POSITION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_POSITION,String)
            End If
            If (Original_SALARY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_SALARY.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_SALARYSCALE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_SALARYSCALE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_HOURSWEEK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_HOURSWEEK.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_CONTACTTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_CONTACTTYPE,String)
            End If
            If (Original_PAIDTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_PAIDTYPE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DOCTORID As String,  _
                    ByVal CNID As String,  _
                    ByVal MDID As String,  _
                    ByVal FIRSTNAME As String,  _
                    ByVal LASTNAME As String,  _
                    ByVal ADDRESS As String,  _
                    ByVal TEL As Global.System.Nullable(Of Long),  _
                    ByVal DOB As Global.System.Nullable(Of Date),  _
                    ByVal NIN As String,  _
                    ByVal POSITION As String,  _
                    ByVal SALARY As Global.System.Nullable(Of Double),  _
                    ByVal SALARYSCALE As Global.System.Nullable(Of Double),  _
                    ByVal HOURSWEEK As Global.System.Nullable(Of Date),  _
                    ByVal CONTACTTYPE As String,  _
                    ByVal PAIDTYPE As String,  _
                    ByVal Original_ID As Decimal,  _
                    ByVal Original_STAFFID As String,  _
                    ByVal Original_DOCTORID As String,  _
                    ByVal Original_CNID As String,  _
                    ByVal Original_MDID As String,  _
                    ByVal Original_FIRSTNAME As String,  _
                    ByVal Original_LASTNAME As String,  _
                    ByVal Original_ADDRESS As String,  _
                    ByVal Original_TEL As Global.System.Nullable(Of Long),  _
                    ByVal Original_DOB As Global.System.Nullable(Of Date),  _
                    ByVal Original_NIN As String,  _
                    ByVal Original_POSITION As String,  _
                    ByVal Original_SALARY As Global.System.Nullable(Of Double),  _
                    ByVal Original_SALARYSCALE As Global.System.Nullable(Of Double),  _
                    ByVal Original_HOURSWEEK As Global.System.Nullable(Of Date),  _
                    ByVal Original_CONTACTTYPE As String,  _
                    ByVal Original_PAIDTYPE As String) As Integer
            Return Me.Update(Original_STAFFID, DOCTORID, CNID, MDID, FIRSTNAME, LASTNAME, ADDRESS, TEL, DOB, NIN, POSITION, SALARY, SALARYSCALE, HOURSWEEK, CONTACTTYPE, PAIDTYPE, Original_ID, Original_STAFFID, Original_DOCTORID, Original_CNID, Original_MDID, Original_FIRSTNAME, Original_LASTNAME, Original_ADDRESS, Original_TEL, Original_DOB, Original_NIN, Original_POSITION, Original_SALARY, Original_SALARYSCALE, Original_HOURSWEEK, Original_CONTACTTYPE, Original_PAIDTYPE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SUPPILERSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SUPPILERS"
            tableMapping.ColumnMappings.Add("SUPPLIERID", "SUPPLIERID")
            tableMapping.ColumnMappings.Add("MDID", "MDID")
            tableMapping.ColumnMappings.Add("NAME", "NAME")
            tableMapping.ColumnMappings.Add("ADDRESS", "ADDRESS")
            tableMapping.ColumnMappings.Add("TEL", "TEL")
            tableMapping.ColumnMappings.Add("FAX", "FAX")
            tableMapping.ColumnMappings.Add("CREATEAT", "CREATEAT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""SUPPILERS"" WHERE ((""SUPPLIERID"" = :Original_SUPPLIERID) A"& _ 
                "ND ((:IsNull_MDID = 1 AND ""MDID"" IS NULL) OR (""MDID"" = :Original_MDID)) AND ((:I"& _ 
                "sNull_NAME = 1 AND ""NAME"" IS NULL) OR (""NAME"" = :Original_NAME)) AND ((:IsNull_A"& _ 
                "DDRESS = 1 AND ""ADDRESS"" IS NULL) OR (""ADDRESS"" = :Original_ADDRESS)) AND ((:IsN"& _ 
                "ull_TEL = 1 AND ""TEL"" IS NULL) OR (""TEL"" = :Original_TEL)) AND ((:IsNull_FAX = 1"& _ 
                " AND ""FAX"" IS NULL) OR (""FAX"" = :Original_FAX)) AND ((:IsNull_CREATEAT = 1 AND """& _ 
                "CREATEAT"" IS NULL) OR (""CREATEAT"" = :Original_CREATEAT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_MDID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_ADDRESS"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_TEL"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_FAX"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "FAX"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FAX"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "FAX"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_CREATEAT"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CREATEAT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CREATEAT"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CREATEAT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""SUPPILERS"" (""SUPPLIERID"", ""MDID"", ""NAME"", ""ADDRESS"", ""TEL"& _ 
                """, ""FAX"", ""CREATEAT"") VALUES (:SUPPLIERID, :MDID, :NAME, :ADDRESS, :TEL, :FAX, :"& _ 
                "CREATEAT)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MDID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FAX"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "FAX"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CREATEAT"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CREATEAT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""SUPPILERS"" SET ""SUPPLIERID"" = :SUPPLIERID, ""MDID"" = :MDID, ""NA"& _ 
                "ME"" = :NAME, ""ADDRESS"" = :ADDRESS, ""TEL"" = :TEL, ""FAX"" = :FAX, ""CREATEAT"" = :CRE"& _ 
                "ATEAT WHERE ((""SUPPLIERID"" = :Original_SUPPLIERID) AND ((:IsNull_MDID = 1 AND ""M"& _ 
                "DID"" IS NULL) OR (""MDID"" = :Original_MDID)) AND ((:IsNull_NAME = 1 AND ""NAME"" IS"& _ 
                " NULL) OR (""NAME"" = :Original_NAME)) AND ((:IsNull_ADDRESS = 1 AND ""ADDRESS"" IS "& _ 
                "NULL) OR (""ADDRESS"" = :Original_ADDRESS)) AND ((:IsNull_TEL = 1 AND ""TEL"" IS NUL"& _ 
                "L) OR (""TEL"" = :Original_TEL)) AND ((:IsNull_FAX = 1 AND ""FAX"" IS NULL) OR (""FAX"& _ 
                """ = :Original_FAX)) AND ((:IsNull_CREATEAT = 1 AND ""CREATEAT"" IS NULL) OR (""CREA"& _ 
                "TEAT"" = :Original_CREATEAT)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MDID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "FAX"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "FAX"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CREATEAT"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CREATEAT"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SUPPLIERID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIERID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_MDID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_ADDRESS"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ADDRESS"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_TEL"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_FAX"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "FAX"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FAX"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "FAX"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_CREATEAT"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CREATEAT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CREATEAT"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "CREATEAT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SUPPLIERID, MDID, ""NAME"", ADDRESS, TEL, FAX, CREATEAT FROM B6301170.SUPPIL"& _ 
                "ERS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.SUPPILERSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.SUPPILERSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.SUPPILERSDataTable = New DataSet1.SUPPILERSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.SUPPILERSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "SUPPILERS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SUPPLIERID As Long, ByVal Original_MDID As String, ByVal Original_NAME As String, ByVal Original_ADDRESS As String, ByVal Original_TEL As Global.System.Nullable(Of Long), ByVal Original_FAX As String, ByVal Original_CREATEAT As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SUPPLIERID,Long)
            If (Original_MDID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MDID,String)
            End If
            If (Original_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_NAME,String)
            End If
            If (Original_ADDRESS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ADDRESS,String)
            End If
            If (Original_TEL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_TEL.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_FAX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_FAX,String)
            End If
            If (Original_CREATEAT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_CREATEAT.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SUPPLIERID As Long, ByVal MDID As String, ByVal NAME As String, ByVal ADDRESS As String, ByVal TEL As Global.System.Nullable(Of Long), ByVal FAX As String, ByVal CREATEAT As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SUPPLIERID,Long)
            If (MDID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MDID,String)
            End If
            If (NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NAME,String)
            End If
            If (ADDRESS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ADDRESS,String)
            End If
            If (TEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TEL.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FAX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FAX,String)
            End If
            If (CREATEAT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CREATEAT.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SUPPLIERID As Long, ByVal MDID As String, ByVal NAME As String, ByVal ADDRESS As String, ByVal TEL As Global.System.Nullable(Of Long), ByVal FAX As String, ByVal CREATEAT As Global.System.Nullable(Of Date), ByVal Original_SUPPLIERID As Long, ByVal Original_MDID As String, ByVal Original_NAME As String, ByVal Original_ADDRESS As String, ByVal Original_TEL As Global.System.Nullable(Of Long), ByVal Original_FAX As String, ByVal Original_CREATEAT As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SUPPLIERID,Long)
            If (MDID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MDID,String)
            End If
            If (NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NAME,String)
            End If
            If (ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ADDRESS,String)
            End If
            If (TEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TEL.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FAX,String)
            End If
            If (CREATEAT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CREATEAT.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SUPPLIERID,Long)
            If (Original_MDID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_MDID,String)
            End If
            If (Original_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_NAME,String)
            End If
            If (Original_ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ADDRESS,String)
            End If
            If (Original_TEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_TEL.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_FAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_FAX,String)
            End If
            If (Original_CREATEAT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_CREATEAT.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MDID As String, ByVal NAME As String, ByVal ADDRESS As String, ByVal TEL As Global.System.Nullable(Of Long), ByVal FAX As String, ByVal CREATEAT As Global.System.Nullable(Of Date), ByVal Original_SUPPLIERID As Long, ByVal Original_MDID As String, ByVal Original_NAME As String, ByVal Original_ADDRESS As String, ByVal Original_TEL As Global.System.Nullable(Of Long), ByVal Original_FAX As String, ByVal Original_CREATEAT As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_SUPPLIERID, MDID, NAME, ADDRESS, TEL, FAX, CREATEAT, Original_SUPPLIERID, Original_MDID, Original_NAME, Original_ADDRESS, Original_TEL, Original_FAX, Original_CREATEAT)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WARD_STAFFSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WARD_STAFFS"
            tableMapping.ColumnMappings.Add("WSID", "WSID")
            tableMapping.ColumnMappings.Add("SHIFTID", "SHIFTID")
            tableMapping.ColumnMappings.Add("STAFFID", "STAFFID")
            tableMapping.ColumnMappings.Add("WARDID", "WARDID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""WARD_STAFFS"" WHERE ((""WSID"" = :Original_WSID) AND (""SHIFT"& _ 
                "ID"" = :Original_SHIFTID) AND (""STAFFID"" = :Original_STAFFID) AND (""WARDID"" = :Or"& _ 
                "iginal_WARDID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WSID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "WSID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SHIFTID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SHIFTID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""WARD_STAFFS"" (""WSID"", ""SHIFTID"", ""STAFFID"", ""WARDID"") VAL"& _ 
                "UES (:WSID, :SHIFTID, :STAFFID, :WARDID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WSID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "WSID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SHIFTID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SHIFTID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""WARD_STAFFS"" SET ""WSID"" = :WSID, ""SHIFTID"" = :SHIFTID, ""STAFFI"& _ 
                "D"" = :STAFFID, ""WARDID"" = :WARDID WHERE ((""WSID"" = :Original_WSID) AND (""SHIFTID"& _ 
                """ = :Original_SHIFTID) AND (""STAFFID"" = :Original_STAFFID) AND (""WARDID"" = :Orig"& _ 
                "inal_WARDID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WSID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "WSID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SHIFTID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SHIFTID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WSID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "WSID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SHIFTID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SHIFTID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STAFFID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "STAFFID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT WSID, SHIFTID, STAFFID, WARDID FROM B6301170.WARD_STAFFS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.WARD_STAFFSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.WARD_STAFFSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.WARD_STAFFSDataTable = New DataSet1.WARD_STAFFSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.WARD_STAFFSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "WARD_STAFFS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_WSID As Long, ByVal Original_SHIFTID As Long, ByVal Original_STAFFID As String, ByVal Original_WARDID As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_WSID,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SHIFTID,Long)
            If (Original_STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STAFFID")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_STAFFID,String)
            End If
            If (Original_WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WARDID")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_WARDID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal WSID As Long, ByVal SHIFTID As Long, ByVal STAFFID As String, ByVal WARDID As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(WSID,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SHIFTID,Long)
            If (STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STAFFID")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(STAFFID,String)
            End If
            If (WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WARDID")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(WARDID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal WSID As Long, ByVal SHIFTID As Long, ByVal STAFFID As String, ByVal WARDID As String, ByVal Original_WSID As Long, ByVal Original_SHIFTID As Long, ByVal Original_STAFFID As String, ByVal Original_WARDID As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(WSID,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SHIFTID,Long)
            If (STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STAFFID")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(STAFFID,String)
            End If
            If (WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WARDID")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(WARDID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_WSID,Long)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SHIFTID,Long)
            If (Original_STAFFID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STAFFID")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_STAFFID,String)
            End If
            If (Original_WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WARDID")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_WARDID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SHIFTID As Long, ByVal STAFFID As String, ByVal WARDID As String, ByVal Original_WSID As Long, ByVal Original_SHIFTID As Long, ByVal Original_STAFFID As String, ByVal Original_WARDID As String) As Integer
            Return Me.Update(Original_WSID, SHIFTID, STAFFID, WARDID, Original_WSID, Original_SHIFTID, Original_STAFFID, Original_WARDID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WARDSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WARDS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("WARDID", "WARDID")
            tableMapping.ColumnMappings.Add("WARDNAME", "WARDNAME")
            tableMapping.ColumnMappings.Add("WARDLOCATION", "WARDLOCATION")
            tableMapping.ColumnMappings.Add("WARDTEL", "WARDTEL")
            tableMapping.ColumnMappings.Add("TOTALBED", "TOTALBED")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""B6301170"".""WARDS"" WHERE ((""ID"" = :Original_ID) AND (""WARDID"" = :Orig"& _ 
                "inal_WARDID) AND ((:IsNull_WARDNAME = 1 AND ""WARDNAME"" IS NULL) OR (""WARDNAME"" ="& _ 
                " :Original_WARDNAME)) AND ((:IsNull_WARDLOCATION = 1 AND ""WARDLOCATION"" IS NULL)"& _ 
                " OR (""WARDLOCATION"" = :Original_WARDLOCATION)) AND ((:IsNull_WARDTEL = 1 AND ""WA"& _ 
                "RDTEL"" IS NULL) OR (""WARDTEL"" = :Original_WARDTEL)) AND ((:IsNull_TOTALBED = 1 A"& _ 
                "ND ""TOTALBED"" IS NULL) OR (""TOTALBED"" = :Original_TOTALBED)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_WARDNAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "WARDNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "WARDNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_WARDLOCATION"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "WARDLOCATION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDLOCATION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "WARDLOCATION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_WARDTEL"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "WARDTEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDTEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "WARDTEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_TOTALBED"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TOTALBED"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TOTALBED"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TOTALBED"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""B6301170"".""WARDS"" (""WARDID"", ""WARDNAME"", ""WARDLOCATION"", ""WARDTEL"", "& _ 
                """TOTALBED"") VALUES (:WARDID, :WARDNAME, :WARDLOCATION, :WARDTEL, :TOTALBED)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "WARDNAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDLOCATION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "WARDLOCATION"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDTEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "WARDTEL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TOTALBED"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TOTALBED"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""B6301170"".""WARDS"" SET ""WARDID"" = :WARDID, ""WARDNAME"" = :WARDNAME, ""WARDLO"& _ 
                "CATION"" = :WARDLOCATION, ""WARDTEL"" = :WARDTEL, ""TOTALBED"" = :TOTALBED WHERE ((""I"& _ 
                "D"" = :Original_ID) AND (""WARDID"" = :Original_WARDID) AND ((:IsNull_WARDNAME = 1 "& _ 
                "AND ""WARDNAME"" IS NULL) OR (""WARDNAME"" = :Original_WARDNAME)) AND ((:IsNull_WARD"& _ 
                "LOCATION = 1 AND ""WARDLOCATION"" IS NULL) OR (""WARDLOCATION"" = :Original_WARDLOCA"& _ 
                "TION)) AND ((:IsNull_WARDTEL = 1 AND ""WARDTEL"" IS NULL) OR (""WARDTEL"" = :Origina"& _ 
                "l_WARDTEL)) AND ((:IsNull_TOTALBED = 1 AND ""TOTALBED"" IS NULL) OR (""TOTALBED"" = "& _ 
                ":Original_TOTALBED)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "WARDNAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDLOCATION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "WARDLOCATION"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "WARDTEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "WARDTEL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "TOTALBED"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TOTALBED"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDID"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 41
            param.IsNullable = true
            param.SourceColumn = "WARDID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_WARDNAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "WARDNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "WARDNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_WARDLOCATION"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "WARDLOCATION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDLOCATION"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 256
            param.IsNullable = true
            param.SourceColumn = "WARDLOCATION"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_WARDTEL"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "WARDTEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WARDTEL"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "WARDTEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_TOTALBED"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TOTALBED"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TOTALBED"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int64
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "TOTALBED"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.WellmeadowsProjects.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, WARDID, WARDNAME, WARDLOCATION, WARDTEL, TOTALBED FROM B6301170.WARDS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.WARDSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.WARDSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.WARDSDataTable = New DataSet1.WARDSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.WARDSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "WARDS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Decimal, ByVal Original_WARDID As String, ByVal Original_WARDNAME As String, ByVal Original_WARDLOCATION As String, ByVal Original_WARDTEL As Global.System.Nullable(Of Long), ByVal Original_TOTALBED As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Decimal)
            If (Original_WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WARDID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_WARDID,String)
            End If
            If (Original_WARDNAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_WARDNAME,String)
            End If
            If (Original_WARDLOCATION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_WARDLOCATION,String)
            End If
            If (Original_WARDTEL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_WARDTEL.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTALBED.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_TOTALBED.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal WARDID As String, ByVal WARDNAME As String, ByVal WARDLOCATION As String, ByVal WARDTEL As Global.System.Nullable(Of Long), ByVal TOTALBED As Global.System.Nullable(Of Long)) As Integer
            If (WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WARDID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(WARDID,String)
            End If
            If (WARDNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(WARDNAME,String)
            End If
            If (WARDLOCATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(WARDLOCATION,String)
            End If
            If (WARDTEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(WARDTEL.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TOTALBED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TOTALBED.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal WARDID As String, ByVal WARDNAME As String, ByVal WARDLOCATION As String, ByVal WARDTEL As Global.System.Nullable(Of Long), ByVal TOTALBED As Global.System.Nullable(Of Long), ByVal Original_ID As Decimal, ByVal Original_WARDID As String, ByVal Original_WARDNAME As String, ByVal Original_WARDLOCATION As String, ByVal Original_WARDTEL As Global.System.Nullable(Of Long), ByVal Original_TOTALBED As Global.System.Nullable(Of Long)) As Integer
            If (WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WARDID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(WARDID,String)
            End If
            If (WARDNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(WARDNAME,String)
            End If
            If (WARDLOCATION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(WARDLOCATION,String)
            End If
            If (WARDTEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(WARDTEL.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TOTALBED.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TOTALBED.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID,Decimal)
            If (Original_WARDID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WARDID")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_WARDID,String)
            End If
            If (Original_WARDNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_WARDNAME,String)
            End If
            If (Original_WARDLOCATION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_WARDLOCATION,String)
            End If
            If (Original_WARDTEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_WARDTEL.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTALBED.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_TOTALBED.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal WARDNAME As String, ByVal WARDLOCATION As String, ByVal WARDTEL As Global.System.Nullable(Of Long), ByVal TOTALBED As Global.System.Nullable(Of Long), ByVal Original_ID As Decimal, ByVal Original_WARDID As String, ByVal Original_WARDNAME As String, ByVal Original_WARDLOCATION As String, ByVal Original_WARDTEL As Global.System.Nullable(Of Long), ByVal Original_TOTALBED As Global.System.Nullable(Of Long)) As Integer
            Return Me.Update(Original_WARDID, WARDNAME, WARDLOCATION, WARDTEL, TOTALBED, Original_ID, Original_WARDID, Original_WARDNAME, Original_WARDLOCATION, Original_WARDTEL, Original_TOTALBED)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _bEDSTableAdapter As BEDSTableAdapter
        
        Private _iN_PATIENTSTableAdapter As IN_PATIENTSTableAdapter
        
        Private _lOCALDOCTORSTableAdapter As LOCALDOCTORSTableAdapter
        
        Private _lOGIN_LOGSTableAdapter As LOGIN_LOGSTableAdapter
        
        Private _mED_EQUIPMENTSTableAdapter As MED_EQUIPMENTSTableAdapter
        
        Private _mED_MEDICINESTableAdapter As MED_MEDICINESTableAdapter
        
        Private _pATIENT_KINSTableAdapter As PATIENT_KINSTableAdapter
        
        Private _pATIENT_VISITSTableAdapter As PATIENT_VISITSTableAdapter
        
        Private _pATIENT_WARDSTableAdapter As PATIENT_WARDSTableAdapter
        
        Private _pATIENTSTableAdapter As PATIENTSTableAdapter
        
        Private _pW_PRESCRIPTSTableAdapter As PW_PRESCRIPTSTableAdapter
        
        Private _sHIFTSTableAdapter As SHIFTSTableAdapter
        
        Private _sTAFF_EXPERIENCESTableAdapter As STAFF_EXPERIENCESTableAdapter
        
        Private _sTAFF_QUALIFICATESTableAdapter As STAFF_QUALIFICATESTableAdapter
        
        Private _sTAFFSTableAdapter As STAFFSTableAdapter
        
        Private _sUPPILERSTableAdapter As SUPPILERSTableAdapter
        
        Private _wARD_STAFFSTableAdapter As WARD_STAFFSTableAdapter
        
        Private _wARDSTableAdapter As WARDSTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property BEDSTableAdapter() As BEDSTableAdapter
            Get
                Return Me._bEDSTableAdapter
            End Get
            Set
                Me._bEDSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IN_PATIENTSTableAdapter() As IN_PATIENTSTableAdapter
            Get
                Return Me._iN_PATIENTSTableAdapter
            End Get
            Set
                Me._iN_PATIENTSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LOCALDOCTORSTableAdapter() As LOCALDOCTORSTableAdapter
            Get
                Return Me._lOCALDOCTORSTableAdapter
            End Get
            Set
                Me._lOCALDOCTORSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LOGIN_LOGSTableAdapter() As LOGIN_LOGSTableAdapter
            Get
                Return Me._lOGIN_LOGSTableAdapter
            End Get
            Set
                Me._lOGIN_LOGSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MED_EQUIPMENTSTableAdapter() As MED_EQUIPMENTSTableAdapter
            Get
                Return Me._mED_EQUIPMENTSTableAdapter
            End Get
            Set
                Me._mED_EQUIPMENTSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MED_MEDICINESTableAdapter() As MED_MEDICINESTableAdapter
            Get
                Return Me._mED_MEDICINESTableAdapter
            End Get
            Set
                Me._mED_MEDICINESTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PATIENT_KINSTableAdapter() As PATIENT_KINSTableAdapter
            Get
                Return Me._pATIENT_KINSTableAdapter
            End Get
            Set
                Me._pATIENT_KINSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PATIENT_VISITSTableAdapter() As PATIENT_VISITSTableAdapter
            Get
                Return Me._pATIENT_VISITSTableAdapter
            End Get
            Set
                Me._pATIENT_VISITSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PATIENT_WARDSTableAdapter() As PATIENT_WARDSTableAdapter
            Get
                Return Me._pATIENT_WARDSTableAdapter
            End Get
            Set
                Me._pATIENT_WARDSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PATIENTSTableAdapter() As PATIENTSTableAdapter
            Get
                Return Me._pATIENTSTableAdapter
            End Get
            Set
                Me._pATIENTSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PW_PRESCRIPTSTableAdapter() As PW_PRESCRIPTSTableAdapter
            Get
                Return Me._pW_PRESCRIPTSTableAdapter
            End Get
            Set
                Me._pW_PRESCRIPTSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SHIFTSTableAdapter() As SHIFTSTableAdapter
            Get
                Return Me._sHIFTSTableAdapter
            End Get
            Set
                Me._sHIFTSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property STAFF_EXPERIENCESTableAdapter() As STAFF_EXPERIENCESTableAdapter
            Get
                Return Me._sTAFF_EXPERIENCESTableAdapter
            End Get
            Set
                Me._sTAFF_EXPERIENCESTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property STAFF_QUALIFICATESTableAdapter() As STAFF_QUALIFICATESTableAdapter
            Get
                Return Me._sTAFF_QUALIFICATESTableAdapter
            End Get
            Set
                Me._sTAFF_QUALIFICATESTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property STAFFSTableAdapter() As STAFFSTableAdapter
            Get
                Return Me._sTAFFSTableAdapter
            End Get
            Set
                Me._sTAFFSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SUPPILERSTableAdapter() As SUPPILERSTableAdapter
            Get
                Return Me._sUPPILERSTableAdapter
            End Get
            Set
                Me._sUPPILERSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property WARD_STAFFSTableAdapter() As WARD_STAFFSTableAdapter
            Get
                Return Me._wARD_STAFFSTableAdapter
            End Get
            Set
                Me._wARD_STAFFSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property WARDSTableAdapter() As WARDSTableAdapter
            Get
                Return Me._wARDSTableAdapter
            End Get
            Set
                Me._wARDSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._bEDSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._bEDSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._bEDSTableAdapter.Connection
                End If
                If ((Not (Me._iN_PATIENTSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iN_PATIENTSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iN_PATIENTSTableAdapter.Connection
                End If
                If ((Not (Me._lOCALDOCTORSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lOCALDOCTORSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._lOCALDOCTORSTableAdapter.Connection
                End If
                If ((Not (Me._lOGIN_LOGSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lOGIN_LOGSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._lOGIN_LOGSTableAdapter.Connection
                End If
                If ((Not (Me._mED_EQUIPMENTSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mED_EQUIPMENTSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mED_EQUIPMENTSTableAdapter.Connection
                End If
                If ((Not (Me._mED_MEDICINESTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mED_MEDICINESTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mED_MEDICINESTableAdapter.Connection
                End If
                If ((Not (Me._pATIENT_KINSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pATIENT_KINSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pATIENT_KINSTableAdapter.Connection
                End If
                If ((Not (Me._pATIENT_VISITSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pATIENT_VISITSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pATIENT_VISITSTableAdapter.Connection
                End If
                If ((Not (Me._pATIENT_WARDSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pATIENT_WARDSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pATIENT_WARDSTableAdapter.Connection
                End If
                If ((Not (Me._pATIENTSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pATIENTSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pATIENTSTableAdapter.Connection
                End If
                If ((Not (Me._pW_PRESCRIPTSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pW_PRESCRIPTSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pW_PRESCRIPTSTableAdapter.Connection
                End If
                If ((Not (Me._sHIFTSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sHIFTSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sHIFTSTableAdapter.Connection
                End If
                If ((Not (Me._sTAFF_EXPERIENCESTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sTAFF_EXPERIENCESTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sTAFF_EXPERIENCESTableAdapter.Connection
                End If
                If ((Not (Me._sTAFF_QUALIFICATESTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sTAFF_QUALIFICATESTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sTAFF_QUALIFICATESTableAdapter.Connection
                End If
                If ((Not (Me._sTAFFSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sTAFFSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sTAFFSTableAdapter.Connection
                End If
                If ((Not (Me._sUPPILERSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sUPPILERSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sUPPILERSTableAdapter.Connection
                End If
                If ((Not (Me._wARD_STAFFSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._wARD_STAFFSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._wARD_STAFFSTableAdapter.Connection
                End If
                If ((Not (Me._wARDSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._wARDSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._wARDSTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._bEDSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iN_PATIENTSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._lOCALDOCTORSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._lOGIN_LOGSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mED_EQUIPMENTSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mED_MEDICINESTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pATIENT_KINSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pATIENT_VISITSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pATIENT_WARDSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pATIENTSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pW_PRESCRIPTSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sHIFTSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sTAFF_EXPERIENCESTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sTAFF_QUALIFICATESTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sTAFFSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sUPPILERSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._wARD_STAFFSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._wARDSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._lOCALDOCTORSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LOCALDOCTORS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lOCALDOCTORSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pATIENT_KINSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PATIENT_KINS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pATIENT_KINSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pATIENTSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PATIENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pATIENTSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sTAFFSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.STAFFS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sTAFFSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._wARDSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.WARDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._wARDSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pATIENT_VISITSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PATIENT_VISITS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pATIENT_VISITSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sUPPILERSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SUPPILERS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sUPPILERSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mED_MEDICINESTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MED_MEDICINES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mED_MEDICINESTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pATIENT_WARDSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PATIENT_WARDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pATIENT_WARDSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sHIFTSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SHIFTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sHIFTSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._bEDSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.BEDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._bEDSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._lOGIN_LOGSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LOGIN_LOGS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lOGIN_LOGSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._wARD_STAFFSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.WARD_STAFFS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._wARD_STAFFSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pW_PRESCRIPTSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PW_PRESCRIPTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pW_PRESCRIPTSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sTAFF_EXPERIENCESTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.STAFF_EXPERIENCES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sTAFF_EXPERIENCESTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sTAFF_QUALIFICATESTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.STAFF_QUALIFICATES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sTAFF_QUALIFICATESTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iN_PATIENTSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IN_PATIENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iN_PATIENTSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mED_EQUIPMENTSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MED_EQUIPMENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mED_EQUIPMENTSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSet1, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._lOCALDOCTORSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LOCALDOCTORS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lOCALDOCTORSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pATIENT_KINSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PATIENT_KINS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pATIENT_KINSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pATIENTSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PATIENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pATIENTSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sTAFFSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.STAFFS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sTAFFSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._wARDSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.WARDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._wARDSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pATIENT_VISITSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PATIENT_VISITS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pATIENT_VISITSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sUPPILERSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SUPPILERS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sUPPILERSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mED_MEDICINESTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MED_MEDICINES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mED_MEDICINESTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pATIENT_WARDSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PATIENT_WARDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pATIENT_WARDSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sHIFTSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SHIFTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sHIFTSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._bEDSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.BEDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._bEDSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._lOGIN_LOGSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LOGIN_LOGS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lOGIN_LOGSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._wARD_STAFFSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.WARD_STAFFS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._wARD_STAFFSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pW_PRESCRIPTSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PW_PRESCRIPTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pW_PRESCRIPTSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sTAFF_EXPERIENCESTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.STAFF_EXPERIENCES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sTAFF_EXPERIENCESTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sTAFF_QUALIFICATESTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.STAFF_QUALIFICATES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sTAFF_QUALIFICATESTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iN_PATIENTSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IN_PATIENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iN_PATIENTSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mED_EQUIPMENTSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MED_EQUIPMENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mED_EQUIPMENTSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._mED_EQUIPMENTSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MED_EQUIPMENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mED_EQUIPMENTSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iN_PATIENTSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IN_PATIENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iN_PATIENTSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sTAFF_QUALIFICATESTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.STAFF_QUALIFICATES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sTAFF_QUALIFICATESTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sTAFF_EXPERIENCESTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.STAFF_EXPERIENCES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sTAFF_EXPERIENCESTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pW_PRESCRIPTSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PW_PRESCRIPTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pW_PRESCRIPTSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._wARD_STAFFSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.WARD_STAFFS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._wARD_STAFFSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._lOGIN_LOGSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LOGIN_LOGS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lOGIN_LOGSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._bEDSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.BEDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._bEDSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sHIFTSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SHIFTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sHIFTSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pATIENT_WARDSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PATIENT_WARDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pATIENT_WARDSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mED_MEDICINESTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MED_MEDICINES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mED_MEDICINESTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sUPPILERSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SUPPILERS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sUPPILERSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pATIENT_VISITSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PATIENT_VISITS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pATIENT_VISITSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._wARDSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.WARDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._wARDSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sTAFFSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.STAFFS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sTAFFSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pATIENTSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PATIENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pATIENTSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pATIENT_KINSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PATIENT_KINS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pATIENT_KINSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._lOCALDOCTORSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LOCALDOCTORS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lOCALDOCTORSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSet1) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._bEDSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._bEDSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iN_PATIENTSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iN_PATIENTSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._lOCALDOCTORSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lOCALDOCTORSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._lOGIN_LOGSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lOGIN_LOGSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mED_EQUIPMENTSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mED_EQUIPMENTSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mED_MEDICINESTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mED_MEDICINESTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pATIENT_KINSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pATIENT_KINSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pATIENT_VISITSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pATIENT_VISITSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pATIENT_WARDSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pATIENT_WARDSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pATIENTSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pATIENTSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pW_PRESCRIPTSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pW_PRESCRIPTSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sHIFTSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sHIFTSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sTAFF_EXPERIENCESTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sTAFF_EXPERIENCESTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sTAFF_QUALIFICATESTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sTAFF_QUALIFICATESTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sTAFFSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sTAFFSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sUPPILERSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sUPPILERSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._wARD_STAFFSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._wARD_STAFFSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._wARDSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._wARDSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._bEDSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._bEDSTableAdapter, Me._bEDSTableAdapter.Connection)
                    Me._bEDSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._bEDSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._bEDSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._bEDSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._bEDSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iN_PATIENTSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iN_PATIENTSTableAdapter, Me._iN_PATIENTSTableAdapter.Connection)
                    Me._iN_PATIENTSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._iN_PATIENTSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._iN_PATIENTSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iN_PATIENTSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iN_PATIENTSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._lOCALDOCTORSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lOCALDOCTORSTableAdapter, Me._lOCALDOCTORSTableAdapter.Connection)
                    Me._lOCALDOCTORSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._lOCALDOCTORSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._lOCALDOCTORSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lOCALDOCTORSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lOCALDOCTORSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._lOGIN_LOGSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lOGIN_LOGSTableAdapter, Me._lOGIN_LOGSTableAdapter.Connection)
                    Me._lOGIN_LOGSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._lOGIN_LOGSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._lOGIN_LOGSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lOGIN_LOGSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lOGIN_LOGSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mED_EQUIPMENTSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mED_EQUIPMENTSTableAdapter, Me._mED_EQUIPMENTSTableAdapter.Connection)
                    Me._mED_EQUIPMENTSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._mED_EQUIPMENTSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._mED_EQUIPMENTSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mED_EQUIPMENTSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mED_EQUIPMENTSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mED_MEDICINESTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mED_MEDICINESTableAdapter, Me._mED_MEDICINESTableAdapter.Connection)
                    Me._mED_MEDICINESTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._mED_MEDICINESTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._mED_MEDICINESTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mED_MEDICINESTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mED_MEDICINESTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pATIENT_KINSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pATIENT_KINSTableAdapter, Me._pATIENT_KINSTableAdapter.Connection)
                    Me._pATIENT_KINSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._pATIENT_KINSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._pATIENT_KINSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pATIENT_KINSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pATIENT_KINSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pATIENT_VISITSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pATIENT_VISITSTableAdapter, Me._pATIENT_VISITSTableAdapter.Connection)
                    Me._pATIENT_VISITSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._pATIENT_VISITSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._pATIENT_VISITSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pATIENT_VISITSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pATIENT_VISITSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pATIENT_WARDSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pATIENT_WARDSTableAdapter, Me._pATIENT_WARDSTableAdapter.Connection)
                    Me._pATIENT_WARDSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._pATIENT_WARDSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._pATIENT_WARDSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pATIENT_WARDSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pATIENT_WARDSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pATIENTSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pATIENTSTableAdapter, Me._pATIENTSTableAdapter.Connection)
                    Me._pATIENTSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._pATIENTSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._pATIENTSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pATIENTSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pATIENTSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pW_PRESCRIPTSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pW_PRESCRIPTSTableAdapter, Me._pW_PRESCRIPTSTableAdapter.Connection)
                    Me._pW_PRESCRIPTSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._pW_PRESCRIPTSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._pW_PRESCRIPTSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pW_PRESCRIPTSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pW_PRESCRIPTSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sHIFTSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sHIFTSTableAdapter, Me._sHIFTSTableAdapter.Connection)
                    Me._sHIFTSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._sHIFTSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._sHIFTSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sHIFTSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sHIFTSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sTAFF_EXPERIENCESTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sTAFF_EXPERIENCESTableAdapter, Me._sTAFF_EXPERIENCESTableAdapter.Connection)
                    Me._sTAFF_EXPERIENCESTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._sTAFF_EXPERIENCESTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._sTAFF_EXPERIENCESTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sTAFF_EXPERIENCESTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sTAFF_EXPERIENCESTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sTAFF_QUALIFICATESTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sTAFF_QUALIFICATESTableAdapter, Me._sTAFF_QUALIFICATESTableAdapter.Connection)
                    Me._sTAFF_QUALIFICATESTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._sTAFF_QUALIFICATESTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._sTAFF_QUALIFICATESTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sTAFF_QUALIFICATESTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sTAFF_QUALIFICATESTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sTAFFSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sTAFFSTableAdapter, Me._sTAFFSTableAdapter.Connection)
                    Me._sTAFFSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._sTAFFSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._sTAFFSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sTAFFSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sTAFFSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sUPPILERSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sUPPILERSTableAdapter, Me._sUPPILERSTableAdapter.Connection)
                    Me._sUPPILERSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._sUPPILERSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._sUPPILERSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sUPPILERSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sUPPILERSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._wARD_STAFFSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._wARD_STAFFSTableAdapter, Me._wARD_STAFFSTableAdapter.Connection)
                    Me._wARD_STAFFSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._wARD_STAFFSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._wARD_STAFFSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._wARD_STAFFSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._wARD_STAFFSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._wARDSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._wARDSTableAdapter, Me._wARDSTableAdapter.Connection)
                    Me._wARDSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._wARDSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._wARDSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._wARDSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._wARDSTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._bEDSTableAdapter) Is Nothing) Then
                    Me._bEDSTableAdapter.Connection = CType(revertConnections(Me._bEDSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._bEDSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iN_PATIENTSTableAdapter) Is Nothing) Then
                    Me._iN_PATIENTSTableAdapter.Connection = CType(revertConnections(Me._iN_PATIENTSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._iN_PATIENTSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._lOCALDOCTORSTableAdapter) Is Nothing) Then
                    Me._lOCALDOCTORSTableAdapter.Connection = CType(revertConnections(Me._lOCALDOCTORSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._lOCALDOCTORSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._lOGIN_LOGSTableAdapter) Is Nothing) Then
                    Me._lOGIN_LOGSTableAdapter.Connection = CType(revertConnections(Me._lOGIN_LOGSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._lOGIN_LOGSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mED_EQUIPMENTSTableAdapter) Is Nothing) Then
                    Me._mED_EQUIPMENTSTableAdapter.Connection = CType(revertConnections(Me._mED_EQUIPMENTSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._mED_EQUIPMENTSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mED_MEDICINESTableAdapter) Is Nothing) Then
                    Me._mED_MEDICINESTableAdapter.Connection = CType(revertConnections(Me._mED_MEDICINESTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._mED_MEDICINESTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pATIENT_KINSTableAdapter) Is Nothing) Then
                    Me._pATIENT_KINSTableAdapter.Connection = CType(revertConnections(Me._pATIENT_KINSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._pATIENT_KINSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pATIENT_VISITSTableAdapter) Is Nothing) Then
                    Me._pATIENT_VISITSTableAdapter.Connection = CType(revertConnections(Me._pATIENT_VISITSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._pATIENT_VISITSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pATIENT_WARDSTableAdapter) Is Nothing) Then
                    Me._pATIENT_WARDSTableAdapter.Connection = CType(revertConnections(Me._pATIENT_WARDSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._pATIENT_WARDSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pATIENTSTableAdapter) Is Nothing) Then
                    Me._pATIENTSTableAdapter.Connection = CType(revertConnections(Me._pATIENTSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._pATIENTSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pW_PRESCRIPTSTableAdapter) Is Nothing) Then
                    Me._pW_PRESCRIPTSTableAdapter.Connection = CType(revertConnections(Me._pW_PRESCRIPTSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._pW_PRESCRIPTSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sHIFTSTableAdapter) Is Nothing) Then
                    Me._sHIFTSTableAdapter.Connection = CType(revertConnections(Me._sHIFTSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._sHIFTSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sTAFF_EXPERIENCESTableAdapter) Is Nothing) Then
                    Me._sTAFF_EXPERIENCESTableAdapter.Connection = CType(revertConnections(Me._sTAFF_EXPERIENCESTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._sTAFF_EXPERIENCESTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sTAFF_QUALIFICATESTableAdapter) Is Nothing) Then
                    Me._sTAFF_QUALIFICATESTableAdapter.Connection = CType(revertConnections(Me._sTAFF_QUALIFICATESTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._sTAFF_QUALIFICATESTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sTAFFSTableAdapter) Is Nothing) Then
                    Me._sTAFFSTableAdapter.Connection = CType(revertConnections(Me._sTAFFSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._sTAFFSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sUPPILERSTableAdapter) Is Nothing) Then
                    Me._sUPPILERSTableAdapter.Connection = CType(revertConnections(Me._sUPPILERSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._sUPPILERSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._wARD_STAFFSTableAdapter) Is Nothing) Then
                    Me._wARD_STAFFSTableAdapter.Connection = CType(revertConnections(Me._wARD_STAFFSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._wARD_STAFFSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._wARDSTableAdapter) Is Nothing) Then
                    Me._wARDSTableAdapter.Connection = CType(revertConnections(Me._wARDSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._wARDSTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
